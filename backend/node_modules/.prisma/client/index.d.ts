
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserProfile
 * 
 */
export type UserProfile = $Result.DefaultSelection<Prisma.$UserProfilePayload>
/**
 * Model UserPhoto
 * 
 */
export type UserPhoto = $Result.DefaultSelection<Prisma.$UserPhotoPayload>
/**
 * Model StyleSuggestion
 * 
 */
export type StyleSuggestion = $Result.DefaultSelection<Prisma.$StyleSuggestionPayload>
/**
 * Model ProductRecommendation
 * 
 */
export type ProductRecommendation = $Result.DefaultSelection<Prisma.$ProductRecommendationPayload>
/**
 * Model Favorite
 * 
 */
export type Favorite = $Result.DefaultSelection<Prisma.$FavoritePayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model UserPreference
 * 
 */
export type UserPreference = $Result.DefaultSelection<Prisma.$UserPreferencePayload>
/**
 * Model SeasonalTrend
 * 
 */
export type SeasonalTrend = $Result.DefaultSelection<Prisma.$SeasonalTrendPayload>
/**
 * Model TrendProduct
 * 
 */
export type TrendProduct = $Result.DefaultSelection<Prisma.$TrendProductPayload>
/**
 * Model PhotoAnalysis
 * 
 */
export type PhotoAnalysis = $Result.DefaultSelection<Prisma.$PhotoAnalysisPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  NON_BINARY: 'NON_BINARY',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const BodyType: {
  ECTOMORPH: 'ECTOMORPH',
  MESOMORPH: 'MESOMORPH',
  ENDOMORPH: 'ENDOMORPH',
  PEAR: 'PEAR',
  APPLE: 'APPLE',
  HOURGLASS: 'HOURGLASS',
  RECTANGLE: 'RECTANGLE',
  INVERTED_TRIANGLE: 'INVERTED_TRIANGLE'
};

export type BodyType = (typeof BodyType)[keyof typeof BodyType]


export const FaceShape: {
  OVAL: 'OVAL',
  ROUND: 'ROUND',
  SQUARE: 'SQUARE',
  HEART: 'HEART',
  DIAMOND: 'DIAMOND',
  OBLONG: 'OBLONG'
};

export type FaceShape = (typeof FaceShape)[keyof typeof FaceShape]


export const SkinTone: {
  VERY_FAIR: 'VERY_FAIR',
  FAIR: 'FAIR',
  LIGHT: 'LIGHT',
  MEDIUM: 'MEDIUM',
  OLIVE: 'OLIVE',
  TAN: 'TAN',
  DARK: 'DARK',
  VERY_DARK: 'VERY_DARK'
};

export type SkinTone = (typeof SkinTone)[keyof typeof SkinTone]


export const BudgetRange: {
  BUDGET_FRIENDLY: 'BUDGET_FRIENDLY',
  MID_RANGE: 'MID_RANGE',
  PREMIUM: 'PREMIUM',
  LUXURY: 'LUXURY'
};

export type BudgetRange = (typeof BudgetRange)[keyof typeof BudgetRange]


export const StyleType: {
  CASUAL: 'CASUAL',
  FORMAL: 'FORMAL',
  BUSINESS: 'BUSINESS',
  TRENDY: 'TRENDY',
  CLASSIC: 'CLASSIC',
  BOHEMIAN: 'BOHEMIAN',
  MINIMALIST: 'MINIMALIST',
  SPORTY: 'SPORTY',
  VINTAGE: 'VINTAGE',
  EDGY: 'EDGY'
};

export type StyleType = (typeof StyleType)[keyof typeof StyleType]


export const PhotoType: {
  FACE: 'FACE',
  FULL_BODY: 'FULL_BODY',
  OUTFIT: 'OUTFIT'
};

export type PhotoType = (typeof PhotoType)[keyof typeof PhotoType]


export const Occasion: {
  CASUAL: 'CASUAL',
  OFFICE: 'OFFICE',
  DATE: 'DATE',
  WEDDING: 'WEDDING',
  PARTY: 'PARTY',
  FORMAL_EVENT: 'FORMAL_EVENT',
  VACATION: 'VACATION',
  WORKOUT: 'WORKOUT',
  INTERVIEW: 'INTERVIEW'
};

export type Occasion = (typeof Occasion)[keyof typeof Occasion]


export const Platform: {
  MYNTRA: 'MYNTRA',
  AMAZON: 'AMAZON',
  HM: 'HM',
  AJIO: 'AJIO',
  NYKAA: 'NYKAA'
};

export type Platform = (typeof Platform)[keyof typeof Platform]


export const ProductCategory: {
  CLOTHING: 'CLOTHING',
  FOOTWEAR: 'FOOTWEAR',
  ACCESSORIES: 'ACCESSORIES',
  SKINCARE: 'SKINCARE',
  HAIRCARE: 'HAIRCARE',
  MAKEUP: 'MAKEUP'
};

export type ProductCategory = (typeof ProductCategory)[keyof typeof ProductCategory]


export const AnalysisType: {
  BODY_TYPE: 'BODY_TYPE',
  FACE_SHAPE: 'FACE_SHAPE',
  SKIN_TONE: 'SKIN_TONE',
  FULL_ANALYSIS: 'FULL_ANALYSIS'
};

export type AnalysisType = (typeof AnalysisType)[keyof typeof AnalysisType]

}

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type BodyType = $Enums.BodyType

export const BodyType: typeof $Enums.BodyType

export type FaceShape = $Enums.FaceShape

export const FaceShape: typeof $Enums.FaceShape

export type SkinTone = $Enums.SkinTone

export const SkinTone: typeof $Enums.SkinTone

export type BudgetRange = $Enums.BudgetRange

export const BudgetRange: typeof $Enums.BudgetRange

export type StyleType = $Enums.StyleType

export const StyleType: typeof $Enums.StyleType

export type PhotoType = $Enums.PhotoType

export const PhotoType: typeof $Enums.PhotoType

export type Occasion = $Enums.Occasion

export const Occasion: typeof $Enums.Occasion

export type Platform = $Enums.Platform

export const Platform: typeof $Enums.Platform

export type ProductCategory = $Enums.ProductCategory

export const ProductCategory: typeof $Enums.ProductCategory

export type AnalysisType = $Enums.AnalysisType

export const AnalysisType: typeof $Enums.AnalysisType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<ExtArgs>;

  /**
   * `prisma.userPhoto`: Exposes CRUD operations for the **UserPhoto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPhotos
    * const userPhotos = await prisma.userPhoto.findMany()
    * ```
    */
  get userPhoto(): Prisma.UserPhotoDelegate<ExtArgs>;

  /**
   * `prisma.styleSuggestion`: Exposes CRUD operations for the **StyleSuggestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StyleSuggestions
    * const styleSuggestions = await prisma.styleSuggestion.findMany()
    * ```
    */
  get styleSuggestion(): Prisma.StyleSuggestionDelegate<ExtArgs>;

  /**
   * `prisma.productRecommendation`: Exposes CRUD operations for the **ProductRecommendation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductRecommendations
    * const productRecommendations = await prisma.productRecommendation.findMany()
    * ```
    */
  get productRecommendation(): Prisma.ProductRecommendationDelegate<ExtArgs>;

  /**
   * `prisma.favorite`: Exposes CRUD operations for the **Favorite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favorites
    * const favorites = await prisma.favorite.findMany()
    * ```
    */
  get favorite(): Prisma.FavoriteDelegate<ExtArgs>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs>;

  /**
   * `prisma.userPreference`: Exposes CRUD operations for the **UserPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPreferences
    * const userPreferences = await prisma.userPreference.findMany()
    * ```
    */
  get userPreference(): Prisma.UserPreferenceDelegate<ExtArgs>;

  /**
   * `prisma.seasonalTrend`: Exposes CRUD operations for the **SeasonalTrend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeasonalTrends
    * const seasonalTrends = await prisma.seasonalTrend.findMany()
    * ```
    */
  get seasonalTrend(): Prisma.SeasonalTrendDelegate<ExtArgs>;

  /**
   * `prisma.trendProduct`: Exposes CRUD operations for the **TrendProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrendProducts
    * const trendProducts = await prisma.trendProduct.findMany()
    * ```
    */
  get trendProduct(): Prisma.TrendProductDelegate<ExtArgs>;

  /**
   * `prisma.photoAnalysis`: Exposes CRUD operations for the **PhotoAnalysis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PhotoAnalyses
    * const photoAnalyses = await prisma.photoAnalysis.findMany()
    * ```
    */
  get photoAnalysis(): Prisma.PhotoAnalysisDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserProfile: 'UserProfile',
    UserPhoto: 'UserPhoto',
    StyleSuggestion: 'StyleSuggestion',
    ProductRecommendation: 'ProductRecommendation',
    Favorite: 'Favorite',
    Feedback: 'Feedback',
    UserPreference: 'UserPreference',
    SeasonalTrend: 'SeasonalTrend',
    TrendProduct: 'TrendProduct',
    PhotoAnalysis: 'PhotoAnalysis'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "userProfile" | "userPhoto" | "styleSuggestion" | "productRecommendation" | "favorite" | "feedback" | "userPreference" | "seasonalTrend" | "trendProduct" | "photoAnalysis"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserProfile: {
        payload: Prisma.$UserProfilePayload<ExtArgs>
        fields: Prisma.UserProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findFirst: {
            args: Prisma.UserProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findMany: {
            args: Prisma.UserProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          create: {
            args: Prisma.UserProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          createMany: {
            args: Prisma.UserProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          delete: {
            args: Prisma.UserProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          update: {
            args: Prisma.UserProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfile>
          }
          groupBy: {
            args: Prisma.UserProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number
          }
        }
      }
      UserPhoto: {
        payload: Prisma.$UserPhotoPayload<ExtArgs>
        fields: Prisma.UserPhotoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPhotoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPhotoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPhotoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPhotoPayload>
          }
          findFirst: {
            args: Prisma.UserPhotoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPhotoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPhotoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPhotoPayload>
          }
          findMany: {
            args: Prisma.UserPhotoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPhotoPayload>[]
          }
          create: {
            args: Prisma.UserPhotoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPhotoPayload>
          }
          createMany: {
            args: Prisma.UserPhotoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPhotoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPhotoPayload>[]
          }
          delete: {
            args: Prisma.UserPhotoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPhotoPayload>
          }
          update: {
            args: Prisma.UserPhotoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPhotoPayload>
          }
          deleteMany: {
            args: Prisma.UserPhotoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPhotoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPhotoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPhotoPayload>
          }
          aggregate: {
            args: Prisma.UserPhotoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPhoto>
          }
          groupBy: {
            args: Prisma.UserPhotoGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPhotoGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPhotoCountArgs<ExtArgs>
            result: $Utils.Optional<UserPhotoCountAggregateOutputType> | number
          }
        }
      }
      StyleSuggestion: {
        payload: Prisma.$StyleSuggestionPayload<ExtArgs>
        fields: Prisma.StyleSuggestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StyleSuggestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleSuggestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StyleSuggestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleSuggestionPayload>
          }
          findFirst: {
            args: Prisma.StyleSuggestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleSuggestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StyleSuggestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleSuggestionPayload>
          }
          findMany: {
            args: Prisma.StyleSuggestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleSuggestionPayload>[]
          }
          create: {
            args: Prisma.StyleSuggestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleSuggestionPayload>
          }
          createMany: {
            args: Prisma.StyleSuggestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StyleSuggestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleSuggestionPayload>[]
          }
          delete: {
            args: Prisma.StyleSuggestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleSuggestionPayload>
          }
          update: {
            args: Prisma.StyleSuggestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleSuggestionPayload>
          }
          deleteMany: {
            args: Prisma.StyleSuggestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StyleSuggestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StyleSuggestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleSuggestionPayload>
          }
          aggregate: {
            args: Prisma.StyleSuggestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStyleSuggestion>
          }
          groupBy: {
            args: Prisma.StyleSuggestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<StyleSuggestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StyleSuggestionCountArgs<ExtArgs>
            result: $Utils.Optional<StyleSuggestionCountAggregateOutputType> | number
          }
        }
      }
      ProductRecommendation: {
        payload: Prisma.$ProductRecommendationPayload<ExtArgs>
        fields: Prisma.ProductRecommendationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductRecommendationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductRecommendationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductRecommendationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductRecommendationPayload>
          }
          findFirst: {
            args: Prisma.ProductRecommendationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductRecommendationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductRecommendationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductRecommendationPayload>
          }
          findMany: {
            args: Prisma.ProductRecommendationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductRecommendationPayload>[]
          }
          create: {
            args: Prisma.ProductRecommendationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductRecommendationPayload>
          }
          createMany: {
            args: Prisma.ProductRecommendationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductRecommendationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductRecommendationPayload>[]
          }
          delete: {
            args: Prisma.ProductRecommendationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductRecommendationPayload>
          }
          update: {
            args: Prisma.ProductRecommendationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductRecommendationPayload>
          }
          deleteMany: {
            args: Prisma.ProductRecommendationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductRecommendationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductRecommendationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductRecommendationPayload>
          }
          aggregate: {
            args: Prisma.ProductRecommendationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductRecommendation>
          }
          groupBy: {
            args: Prisma.ProductRecommendationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductRecommendationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductRecommendationCountArgs<ExtArgs>
            result: $Utils.Optional<ProductRecommendationCountAggregateOutputType> | number
          }
        }
      }
      Favorite: {
        payload: Prisma.$FavoritePayload<ExtArgs>
        fields: Prisma.FavoriteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findFirst: {
            args: Prisma.FavoriteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findMany: {
            args: Prisma.FavoriteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          create: {
            args: Prisma.FavoriteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          createMany: {
            args: Prisma.FavoriteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          delete: {
            args: Prisma.FavoriteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          update: {
            args: Prisma.FavoriteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          deleteMany: {
            args: Prisma.FavoriteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          aggregate: {
            args: Prisma.FavoriteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavorite>
          }
          groupBy: {
            args: Prisma.FavoriteGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      UserPreference: {
        payload: Prisma.$UserPreferencePayload<ExtArgs>
        fields: Prisma.UserPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          findFirst: {
            args: Prisma.UserPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          findMany: {
            args: Prisma.UserPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>[]
          }
          create: {
            args: Prisma.UserPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          createMany: {
            args: Prisma.UserPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>[]
          }
          delete: {
            args: Prisma.UserPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          update: {
            args: Prisma.UserPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          deleteMany: {
            args: Prisma.UserPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          aggregate: {
            args: Prisma.UserPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPreference>
          }
          groupBy: {
            args: Prisma.UserPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<UserPreferenceCountAggregateOutputType> | number
          }
        }
      }
      SeasonalTrend: {
        payload: Prisma.$SeasonalTrendPayload<ExtArgs>
        fields: Prisma.SeasonalTrendFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeasonalTrendFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonalTrendPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeasonalTrendFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonalTrendPayload>
          }
          findFirst: {
            args: Prisma.SeasonalTrendFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonalTrendPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeasonalTrendFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonalTrendPayload>
          }
          findMany: {
            args: Prisma.SeasonalTrendFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonalTrendPayload>[]
          }
          create: {
            args: Prisma.SeasonalTrendCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonalTrendPayload>
          }
          createMany: {
            args: Prisma.SeasonalTrendCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeasonalTrendCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonalTrendPayload>[]
          }
          delete: {
            args: Prisma.SeasonalTrendDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonalTrendPayload>
          }
          update: {
            args: Prisma.SeasonalTrendUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonalTrendPayload>
          }
          deleteMany: {
            args: Prisma.SeasonalTrendDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeasonalTrendUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeasonalTrendUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonalTrendPayload>
          }
          aggregate: {
            args: Prisma.SeasonalTrendAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeasonalTrend>
          }
          groupBy: {
            args: Prisma.SeasonalTrendGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeasonalTrendGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeasonalTrendCountArgs<ExtArgs>
            result: $Utils.Optional<SeasonalTrendCountAggregateOutputType> | number
          }
        }
      }
      TrendProduct: {
        payload: Prisma.$TrendProductPayload<ExtArgs>
        fields: Prisma.TrendProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrendProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrendProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendProductPayload>
          }
          findFirst: {
            args: Prisma.TrendProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrendProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendProductPayload>
          }
          findMany: {
            args: Prisma.TrendProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendProductPayload>[]
          }
          create: {
            args: Prisma.TrendProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendProductPayload>
          }
          createMany: {
            args: Prisma.TrendProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrendProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendProductPayload>[]
          }
          delete: {
            args: Prisma.TrendProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendProductPayload>
          }
          update: {
            args: Prisma.TrendProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendProductPayload>
          }
          deleteMany: {
            args: Prisma.TrendProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrendProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TrendProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendProductPayload>
          }
          aggregate: {
            args: Prisma.TrendProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrendProduct>
          }
          groupBy: {
            args: Prisma.TrendProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrendProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrendProductCountArgs<ExtArgs>
            result: $Utils.Optional<TrendProductCountAggregateOutputType> | number
          }
        }
      }
      PhotoAnalysis: {
        payload: Prisma.$PhotoAnalysisPayload<ExtArgs>
        fields: Prisma.PhotoAnalysisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhotoAnalysisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoAnalysisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhotoAnalysisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoAnalysisPayload>
          }
          findFirst: {
            args: Prisma.PhotoAnalysisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoAnalysisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhotoAnalysisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoAnalysisPayload>
          }
          findMany: {
            args: Prisma.PhotoAnalysisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoAnalysisPayload>[]
          }
          create: {
            args: Prisma.PhotoAnalysisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoAnalysisPayload>
          }
          createMany: {
            args: Prisma.PhotoAnalysisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PhotoAnalysisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoAnalysisPayload>[]
          }
          delete: {
            args: Prisma.PhotoAnalysisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoAnalysisPayload>
          }
          update: {
            args: Prisma.PhotoAnalysisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoAnalysisPayload>
          }
          deleteMany: {
            args: Prisma.PhotoAnalysisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PhotoAnalysisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PhotoAnalysisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoAnalysisPayload>
          }
          aggregate: {
            args: Prisma.PhotoAnalysisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePhotoAnalysis>
          }
          groupBy: {
            args: Prisma.PhotoAnalysisGroupByArgs<ExtArgs>
            result: $Utils.Optional<PhotoAnalysisGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhotoAnalysisCountArgs<ExtArgs>
            result: $Utils.Optional<PhotoAnalysisCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    photos: number
    preferences: number
    favorites: number
    feedback: number
    photoAnalyses: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    photos?: boolean | UserCountOutputTypeCountPhotosArgs
    preferences?: boolean | UserCountOutputTypeCountPreferencesArgs
    favorites?: boolean | UserCountOutputTypeCountFavoritesArgs
    feedback?: boolean | UserCountOutputTypeCountFeedbackArgs
    photoAnalyses?: boolean | UserCountOutputTypeCountPhotoAnalysesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPhotoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferenceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPhotoAnalysesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoAnalysisWhereInput
  }


  /**
   * Count Type StyleSuggestionCountOutputType
   */

  export type StyleSuggestionCountOutputType = {
    products: number
    feedback: number
  }

  export type StyleSuggestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | StyleSuggestionCountOutputTypeCountProductsArgs
    feedback?: boolean | StyleSuggestionCountOutputTypeCountFeedbackArgs
  }

  // Custom InputTypes
  /**
   * StyleSuggestionCountOutputType without action
   */
  export type StyleSuggestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestionCountOutputType
     */
    select?: StyleSuggestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StyleSuggestionCountOutputType without action
   */
  export type StyleSuggestionCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductRecommendationWhereInput
  }

  /**
   * StyleSuggestionCountOutputType without action
   */
  export type StyleSuggestionCountOutputTypeCountFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * Count Type SeasonalTrendCountOutputType
   */

  export type SeasonalTrendCountOutputType = {
    products: number
  }

  export type SeasonalTrendCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | SeasonalTrendCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * SeasonalTrendCountOutputType without action
   */
  export type SeasonalTrendCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrendCountOutputType
     */
    select?: SeasonalTrendCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SeasonalTrendCountOutputType without action
   */
  export type SeasonalTrendCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrendProductWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    googleId: string | null
    appleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    googleId: string | null
    appleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    avatar: number
    googleId: number
    appleId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    googleId?: true
    appleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    googleId?: true
    appleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    googleId?: true
    appleId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string | null
    name: string
    avatar: string | null
    googleId: string | null
    appleId: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    googleId?: boolean
    appleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
    photos?: boolean | User$photosArgs<ExtArgs>
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    feedback?: boolean | User$feedbackArgs<ExtArgs>
    photoAnalyses?: boolean | User$photoAnalysesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    googleId?: boolean
    appleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    googleId?: boolean
    appleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
    photos?: boolean | User$photosArgs<ExtArgs>
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    feedback?: boolean | User$feedbackArgs<ExtArgs>
    photoAnalyses?: boolean | User$photoAnalysesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$UserProfilePayload<ExtArgs> | null
      photos: Prisma.$UserPhotoPayload<ExtArgs>[]
      preferences: Prisma.$UserPreferencePayload<ExtArgs>[]
      favorites: Prisma.$FavoritePayload<ExtArgs>[]
      feedback: Prisma.$FeedbackPayload<ExtArgs>[]
      photoAnalyses: Prisma.$PhotoAnalysisPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string | null
      name: string
      avatar: string | null
      googleId: string | null
      appleId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    photos<T extends User$photosArgs<ExtArgs> = {}>(args?: Subset<T, User$photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPhotoPayload<ExtArgs>, T, "findMany"> | Null>
    preferences<T extends User$preferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$preferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findMany"> | Null>
    favorites<T extends User$favoritesArgs<ExtArgs> = {}>(args?: Subset<T, User$favoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany"> | Null>
    feedback<T extends User$feedbackArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    photoAnalyses<T extends User$photoAnalysesArgs<ExtArgs> = {}>(args?: Subset<T, User$photoAnalysesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoAnalysisPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly googleId: FieldRef<"User", 'String'>
    readonly appleId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    where?: UserProfileWhereInput
  }

  /**
   * User.photos
   */
  export type User$photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoInclude<ExtArgs> | null
    where?: UserPhotoWhereInput
    orderBy?: UserPhotoOrderByWithRelationInput | UserPhotoOrderByWithRelationInput[]
    cursor?: UserPhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPhotoScalarFieldEnum | UserPhotoScalarFieldEnum[]
  }

  /**
   * User.preferences
   */
  export type User$preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    where?: UserPreferenceWhereInput
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    cursor?: UserPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * User.favorites
   */
  export type User$favoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    cursor?: FavoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * User.feedback
   */
  export type User$feedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User.photoAnalyses
   */
  export type User$photoAnalysesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisInclude<ExtArgs> | null
    where?: PhotoAnalysisWhereInput
    orderBy?: PhotoAnalysisOrderByWithRelationInput | PhotoAnalysisOrderByWithRelationInput[]
    cursor?: PhotoAnalysisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhotoAnalysisScalarFieldEnum | PhotoAnalysisScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileAvgAggregateOutputType = {
    height: number | null
    weight: number | null
  }

  export type UserProfileSumAggregateOutputType = {
    height: number | null
    weight: number | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    gender: $Enums.Gender | null
    height: number | null
    weight: number | null
    bodyType: $Enums.BodyType | null
    faceShape: $Enums.FaceShape | null
    skinTone: $Enums.SkinTone | null
    budgetRange: $Enums.BudgetRange | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    gender: $Enums.Gender | null
    height: number | null
    weight: number | null
    bodyType: $Enums.BodyType | null
    faceShape: $Enums.FaceShape | null
    skinTone: $Enums.SkinTone | null
    budgetRange: $Enums.BudgetRange | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    userId: number
    gender: number
    height: number
    weight: number
    bodyType: number
    faceShape: number
    skinTone: number
    styleType: number
    budgetRange: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserProfileAvgAggregateInputType = {
    height?: true
    weight?: true
  }

  export type UserProfileSumAggregateInputType = {
    height?: true
    weight?: true
  }

  export type UserProfileMinAggregateInputType = {
    id?: true
    userId?: true
    gender?: true
    height?: true
    weight?: true
    bodyType?: true
    faceShape?: true
    skinTone?: true
    budgetRange?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    gender?: true
    height?: true
    weight?: true
    bodyType?: true
    faceShape?: true
    skinTone?: true
    budgetRange?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    userId?: true
    gender?: true
    height?: true
    weight?: true
    bodyType?: true
    faceShape?: true
    skinTone?: true
    styleType?: true
    budgetRange?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfile to aggregate.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithAggregationInput | UserProfileOrderByWithAggregationInput[]
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _avg?: UserProfileAvgAggregateInputType
    _sum?: UserProfileSumAggregateInputType
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }

  export type UserProfileGroupByOutputType = {
    id: string
    userId: string
    gender: $Enums.Gender
    height: number | null
    weight: number | null
    bodyType: $Enums.BodyType | null
    faceShape: $Enums.FaceShape | null
    skinTone: $Enums.SkinTone | null
    styleType: $Enums.StyleType[]
    budgetRange: $Enums.BudgetRange | null
    createdAt: Date
    updatedAt: Date
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gender?: boolean
    height?: boolean
    weight?: boolean
    bodyType?: boolean
    faceShape?: boolean
    skinTone?: boolean
    styleType?: boolean
    budgetRange?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gender?: boolean
    height?: boolean
    weight?: boolean
    bodyType?: boolean
    faceShape?: boolean
    skinTone?: boolean
    styleType?: boolean
    budgetRange?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    gender?: boolean
    height?: boolean
    weight?: boolean
    bodyType?: boolean
    faceShape?: boolean
    skinTone?: boolean
    styleType?: boolean
    budgetRange?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      gender: $Enums.Gender
      height: number | null
      weight: number | null
      bodyType: $Enums.BodyType | null
      faceShape: $Enums.FaceShape | null
      skinTone: $Enums.SkinTone | null
      styleType: $Enums.StyleType[]
      budgetRange: $Enums.BudgetRange | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userProfile"]>
    composites: {}
  }

  type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> = $Result.GetResult<Prisma.$UserProfilePayload, S>

  type UserProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserProfileCountAggregateInputType | true
    }

  export interface UserProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'], meta: { name: 'UserProfile' } }
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileFindUniqueArgs>(args: SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileFindFirstArgs>(args?: SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProfileFindManyArgs>(args?: SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
     */
    create<T extends UserProfileCreateArgs>(args: SelectSubset<T, UserProfileCreateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserProfiles.
     * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileCreateManyArgs>(args?: SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfiles and returns the data saved in the database.
     * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
     */
    delete<T extends UserProfileDeleteArgs>(args: SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileUpdateArgs>(args: SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileDeleteManyArgs>(args?: SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileUpdateManyArgs>(args: SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileUpsertArgs>(args: SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfile model
   */
  readonly fields: UserProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfile model
   */ 
  interface UserProfileFieldRefs {
    readonly id: FieldRef<"UserProfile", 'String'>
    readonly userId: FieldRef<"UserProfile", 'String'>
    readonly gender: FieldRef<"UserProfile", 'Gender'>
    readonly height: FieldRef<"UserProfile", 'Float'>
    readonly weight: FieldRef<"UserProfile", 'Float'>
    readonly bodyType: FieldRef<"UserProfile", 'BodyType'>
    readonly faceShape: FieldRef<"UserProfile", 'FaceShape'>
    readonly skinTone: FieldRef<"UserProfile", 'SkinTone'>
    readonly styleType: FieldRef<"UserProfile", 'StyleType[]'>
    readonly budgetRange: FieldRef<"UserProfile", 'BudgetRange'>
    readonly createdAt: FieldRef<"UserProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfiles to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProfile.
     */
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }

  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile createManyAndReturn
   */
  export type UserProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProfile.
     */
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     */
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     */
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }

  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter which UserProfile to delete.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfiles to delete
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile without action
   */
  export type UserProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
  }


  /**
   * Model UserPhoto
   */

  export type AggregateUserPhoto = {
    _count: UserPhotoCountAggregateOutputType | null
    _min: UserPhotoMinAggregateOutputType | null
    _max: UserPhotoMaxAggregateOutputType | null
  }

  export type UserPhotoMinAggregateOutputType = {
    id: string | null
    userId: string | null
    url: string | null
    type: $Enums.PhotoType | null
    isActive: boolean | null
    publicId: string | null
    createdAt: Date | null
  }

  export type UserPhotoMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    url: string | null
    type: $Enums.PhotoType | null
    isActive: boolean | null
    publicId: string | null
    createdAt: Date | null
  }

  export type UserPhotoCountAggregateOutputType = {
    id: number
    userId: number
    url: number
    type: number
    isActive: number
    publicId: number
    createdAt: number
    _all: number
  }


  export type UserPhotoMinAggregateInputType = {
    id?: true
    userId?: true
    url?: true
    type?: true
    isActive?: true
    publicId?: true
    createdAt?: true
  }

  export type UserPhotoMaxAggregateInputType = {
    id?: true
    userId?: true
    url?: true
    type?: true
    isActive?: true
    publicId?: true
    createdAt?: true
  }

  export type UserPhotoCountAggregateInputType = {
    id?: true
    userId?: true
    url?: true
    type?: true
    isActive?: true
    publicId?: true
    createdAt?: true
    _all?: true
  }

  export type UserPhotoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPhoto to aggregate.
     */
    where?: UserPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPhotos to fetch.
     */
    orderBy?: UserPhotoOrderByWithRelationInput | UserPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPhotos
    **/
    _count?: true | UserPhotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPhotoMaxAggregateInputType
  }

  export type GetUserPhotoAggregateType<T extends UserPhotoAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPhoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPhoto[P]>
      : GetScalarType<T[P], AggregateUserPhoto[P]>
  }




  export type UserPhotoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPhotoWhereInput
    orderBy?: UserPhotoOrderByWithAggregationInput | UserPhotoOrderByWithAggregationInput[]
    by: UserPhotoScalarFieldEnum[] | UserPhotoScalarFieldEnum
    having?: UserPhotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPhotoCountAggregateInputType | true
    _min?: UserPhotoMinAggregateInputType
    _max?: UserPhotoMaxAggregateInputType
  }

  export type UserPhotoGroupByOutputType = {
    id: string
    userId: string
    url: string
    type: $Enums.PhotoType
    isActive: boolean
    publicId: string
    createdAt: Date
    _count: UserPhotoCountAggregateOutputType | null
    _min: UserPhotoMinAggregateOutputType | null
    _max: UserPhotoMaxAggregateOutputType | null
  }

  type GetUserPhotoGroupByPayload<T extends UserPhotoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPhotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPhotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPhotoGroupByOutputType[P]>
            : GetScalarType<T[P], UserPhotoGroupByOutputType[P]>
        }
      >
    >


  export type UserPhotoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    url?: boolean
    type?: boolean
    isActive?: boolean
    publicId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPhoto"]>

  export type UserPhotoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    url?: boolean
    type?: boolean
    isActive?: boolean
    publicId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPhoto"]>

  export type UserPhotoSelectScalar = {
    id?: boolean
    userId?: boolean
    url?: boolean
    type?: boolean
    isActive?: boolean
    publicId?: boolean
    createdAt?: boolean
  }

  export type UserPhotoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPhotoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPhotoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPhoto"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      url: string
      type: $Enums.PhotoType
      isActive: boolean
      publicId: string
      createdAt: Date
    }, ExtArgs["result"]["userPhoto"]>
    composites: {}
  }

  type UserPhotoGetPayload<S extends boolean | null | undefined | UserPhotoDefaultArgs> = $Result.GetResult<Prisma.$UserPhotoPayload, S>

  type UserPhotoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPhotoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPhotoCountAggregateInputType | true
    }

  export interface UserPhotoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPhoto'], meta: { name: 'UserPhoto' } }
    /**
     * Find zero or one UserPhoto that matches the filter.
     * @param {UserPhotoFindUniqueArgs} args - Arguments to find a UserPhoto
     * @example
     * // Get one UserPhoto
     * const userPhoto = await prisma.userPhoto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPhotoFindUniqueArgs>(args: SelectSubset<T, UserPhotoFindUniqueArgs<ExtArgs>>): Prisma__UserPhotoClient<$Result.GetResult<Prisma.$UserPhotoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPhoto that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPhotoFindUniqueOrThrowArgs} args - Arguments to find a UserPhoto
     * @example
     * // Get one UserPhoto
     * const userPhoto = await prisma.userPhoto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPhotoFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPhotoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPhotoClient<$Result.GetResult<Prisma.$UserPhotoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPhoto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPhotoFindFirstArgs} args - Arguments to find a UserPhoto
     * @example
     * // Get one UserPhoto
     * const userPhoto = await prisma.userPhoto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPhotoFindFirstArgs>(args?: SelectSubset<T, UserPhotoFindFirstArgs<ExtArgs>>): Prisma__UserPhotoClient<$Result.GetResult<Prisma.$UserPhotoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPhoto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPhotoFindFirstOrThrowArgs} args - Arguments to find a UserPhoto
     * @example
     * // Get one UserPhoto
     * const userPhoto = await prisma.userPhoto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPhotoFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPhotoFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPhotoClient<$Result.GetResult<Prisma.$UserPhotoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserPhotos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPhotoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPhotos
     * const userPhotos = await prisma.userPhoto.findMany()
     * 
     * // Get first 10 UserPhotos
     * const userPhotos = await prisma.userPhoto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPhotoWithIdOnly = await prisma.userPhoto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPhotoFindManyArgs>(args?: SelectSubset<T, UserPhotoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPhotoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPhoto.
     * @param {UserPhotoCreateArgs} args - Arguments to create a UserPhoto.
     * @example
     * // Create one UserPhoto
     * const UserPhoto = await prisma.userPhoto.create({
     *   data: {
     *     // ... data to create a UserPhoto
     *   }
     * })
     * 
     */
    create<T extends UserPhotoCreateArgs>(args: SelectSubset<T, UserPhotoCreateArgs<ExtArgs>>): Prisma__UserPhotoClient<$Result.GetResult<Prisma.$UserPhotoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserPhotos.
     * @param {UserPhotoCreateManyArgs} args - Arguments to create many UserPhotos.
     * @example
     * // Create many UserPhotos
     * const userPhoto = await prisma.userPhoto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPhotoCreateManyArgs>(args?: SelectSubset<T, UserPhotoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPhotos and returns the data saved in the database.
     * @param {UserPhotoCreateManyAndReturnArgs} args - Arguments to create many UserPhotos.
     * @example
     * // Create many UserPhotos
     * const userPhoto = await prisma.userPhoto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPhotos and only return the `id`
     * const userPhotoWithIdOnly = await prisma.userPhoto.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPhotoCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPhotoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPhotoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserPhoto.
     * @param {UserPhotoDeleteArgs} args - Arguments to delete one UserPhoto.
     * @example
     * // Delete one UserPhoto
     * const UserPhoto = await prisma.userPhoto.delete({
     *   where: {
     *     // ... filter to delete one UserPhoto
     *   }
     * })
     * 
     */
    delete<T extends UserPhotoDeleteArgs>(args: SelectSubset<T, UserPhotoDeleteArgs<ExtArgs>>): Prisma__UserPhotoClient<$Result.GetResult<Prisma.$UserPhotoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPhoto.
     * @param {UserPhotoUpdateArgs} args - Arguments to update one UserPhoto.
     * @example
     * // Update one UserPhoto
     * const userPhoto = await prisma.userPhoto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPhotoUpdateArgs>(args: SelectSubset<T, UserPhotoUpdateArgs<ExtArgs>>): Prisma__UserPhotoClient<$Result.GetResult<Prisma.$UserPhotoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserPhotos.
     * @param {UserPhotoDeleteManyArgs} args - Arguments to filter UserPhotos to delete.
     * @example
     * // Delete a few UserPhotos
     * const { count } = await prisma.userPhoto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPhotoDeleteManyArgs>(args?: SelectSubset<T, UserPhotoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPhotos
     * const userPhoto = await prisma.userPhoto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPhotoUpdateManyArgs>(args: SelectSubset<T, UserPhotoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPhoto.
     * @param {UserPhotoUpsertArgs} args - Arguments to update or create a UserPhoto.
     * @example
     * // Update or create a UserPhoto
     * const userPhoto = await prisma.userPhoto.upsert({
     *   create: {
     *     // ... data to create a UserPhoto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPhoto we want to update
     *   }
     * })
     */
    upsert<T extends UserPhotoUpsertArgs>(args: SelectSubset<T, UserPhotoUpsertArgs<ExtArgs>>): Prisma__UserPhotoClient<$Result.GetResult<Prisma.$UserPhotoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserPhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPhotoCountArgs} args - Arguments to filter UserPhotos to count.
     * @example
     * // Count the number of UserPhotos
     * const count = await prisma.userPhoto.count({
     *   where: {
     *     // ... the filter for the UserPhotos we want to count
     *   }
     * })
    **/
    count<T extends UserPhotoCountArgs>(
      args?: Subset<T, UserPhotoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPhotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPhotoAggregateArgs>(args: Subset<T, UserPhotoAggregateArgs>): Prisma.PrismaPromise<GetUserPhotoAggregateType<T>>

    /**
     * Group by UserPhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPhotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPhotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPhotoGroupByArgs['orderBy'] }
        : { orderBy?: UserPhotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPhoto model
   */
  readonly fields: UserPhotoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPhoto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPhotoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPhoto model
   */ 
  interface UserPhotoFieldRefs {
    readonly id: FieldRef<"UserPhoto", 'String'>
    readonly userId: FieldRef<"UserPhoto", 'String'>
    readonly url: FieldRef<"UserPhoto", 'String'>
    readonly type: FieldRef<"UserPhoto", 'PhotoType'>
    readonly isActive: FieldRef<"UserPhoto", 'Boolean'>
    readonly publicId: FieldRef<"UserPhoto", 'String'>
    readonly createdAt: FieldRef<"UserPhoto", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserPhoto findUnique
   */
  export type UserPhotoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoInclude<ExtArgs> | null
    /**
     * Filter, which UserPhoto to fetch.
     */
    where: UserPhotoWhereUniqueInput
  }

  /**
   * UserPhoto findUniqueOrThrow
   */
  export type UserPhotoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoInclude<ExtArgs> | null
    /**
     * Filter, which UserPhoto to fetch.
     */
    where: UserPhotoWhereUniqueInput
  }

  /**
   * UserPhoto findFirst
   */
  export type UserPhotoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoInclude<ExtArgs> | null
    /**
     * Filter, which UserPhoto to fetch.
     */
    where?: UserPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPhotos to fetch.
     */
    orderBy?: UserPhotoOrderByWithRelationInput | UserPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPhotos.
     */
    cursor?: UserPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPhotos.
     */
    distinct?: UserPhotoScalarFieldEnum | UserPhotoScalarFieldEnum[]
  }

  /**
   * UserPhoto findFirstOrThrow
   */
  export type UserPhotoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoInclude<ExtArgs> | null
    /**
     * Filter, which UserPhoto to fetch.
     */
    where?: UserPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPhotos to fetch.
     */
    orderBy?: UserPhotoOrderByWithRelationInput | UserPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPhotos.
     */
    cursor?: UserPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPhotos.
     */
    distinct?: UserPhotoScalarFieldEnum | UserPhotoScalarFieldEnum[]
  }

  /**
   * UserPhoto findMany
   */
  export type UserPhotoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoInclude<ExtArgs> | null
    /**
     * Filter, which UserPhotos to fetch.
     */
    where?: UserPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPhotos to fetch.
     */
    orderBy?: UserPhotoOrderByWithRelationInput | UserPhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPhotos.
     */
    cursor?: UserPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPhotos.
     */
    skip?: number
    distinct?: UserPhotoScalarFieldEnum | UserPhotoScalarFieldEnum[]
  }

  /**
   * UserPhoto create
   */
  export type UserPhotoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPhoto.
     */
    data: XOR<UserPhotoCreateInput, UserPhotoUncheckedCreateInput>
  }

  /**
   * UserPhoto createMany
   */
  export type UserPhotoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPhotos.
     */
    data: UserPhotoCreateManyInput | UserPhotoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPhoto createManyAndReturn
   */
  export type UserPhotoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserPhotos.
     */
    data: UserPhotoCreateManyInput | UserPhotoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPhoto update
   */
  export type UserPhotoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPhoto.
     */
    data: XOR<UserPhotoUpdateInput, UserPhotoUncheckedUpdateInput>
    /**
     * Choose, which UserPhoto to update.
     */
    where: UserPhotoWhereUniqueInput
  }

  /**
   * UserPhoto updateMany
   */
  export type UserPhotoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPhotos.
     */
    data: XOR<UserPhotoUpdateManyMutationInput, UserPhotoUncheckedUpdateManyInput>
    /**
     * Filter which UserPhotos to update
     */
    where?: UserPhotoWhereInput
  }

  /**
   * UserPhoto upsert
   */
  export type UserPhotoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPhoto to update in case it exists.
     */
    where: UserPhotoWhereUniqueInput
    /**
     * In case the UserPhoto found by the `where` argument doesn't exist, create a new UserPhoto with this data.
     */
    create: XOR<UserPhotoCreateInput, UserPhotoUncheckedCreateInput>
    /**
     * In case the UserPhoto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPhotoUpdateInput, UserPhotoUncheckedUpdateInput>
  }

  /**
   * UserPhoto delete
   */
  export type UserPhotoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoInclude<ExtArgs> | null
    /**
     * Filter which UserPhoto to delete.
     */
    where: UserPhotoWhereUniqueInput
  }

  /**
   * UserPhoto deleteMany
   */
  export type UserPhotoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPhotos to delete
     */
    where?: UserPhotoWhereInput
  }

  /**
   * UserPhoto without action
   */
  export type UserPhotoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPhoto
     */
    select?: UserPhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPhotoInclude<ExtArgs> | null
  }


  /**
   * Model StyleSuggestion
   */

  export type AggregateStyleSuggestion = {
    _count: StyleSuggestionCountAggregateOutputType | null
    _avg: StyleSuggestionAvgAggregateOutputType | null
    _sum: StyleSuggestionSumAggregateOutputType | null
    _min: StyleSuggestionMinAggregateOutputType | null
    _max: StyleSuggestionMaxAggregateOutputType | null
  }

  export type StyleSuggestionAvgAggregateOutputType = {
    confidence: number | null
  }

  export type StyleSuggestionSumAggregateOutputType = {
    confidence: number | null
  }

  export type StyleSuggestionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    occasion: $Enums.Occasion | null
    bodyType: $Enums.BodyType | null
    faceShape: $Enums.FaceShape | null
    skinTone: $Enums.SkinTone | null
    outfitDesc: string | null
    hairstyle: string | null
    accessories: string | null
    skincare: string | null
    outfitImageUrl: string | null
    styleImageUrl: string | null
    confidence: number | null
    createdAt: Date | null
  }

  export type StyleSuggestionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    occasion: $Enums.Occasion | null
    bodyType: $Enums.BodyType | null
    faceShape: $Enums.FaceShape | null
    skinTone: $Enums.SkinTone | null
    outfitDesc: string | null
    hairstyle: string | null
    accessories: string | null
    skincare: string | null
    outfitImageUrl: string | null
    styleImageUrl: string | null
    confidence: number | null
    createdAt: Date | null
  }

  export type StyleSuggestionCountAggregateOutputType = {
    id: number
    userId: number
    occasion: number
    bodyType: number
    faceShape: number
    skinTone: number
    outfitDesc: number
    hairstyle: number
    accessories: number
    skincare: number
    colors: number
    outfitImageUrl: number
    styleImageUrl: number
    confidence: number
    createdAt: number
    _all: number
  }


  export type StyleSuggestionAvgAggregateInputType = {
    confidence?: true
  }

  export type StyleSuggestionSumAggregateInputType = {
    confidence?: true
  }

  export type StyleSuggestionMinAggregateInputType = {
    id?: true
    userId?: true
    occasion?: true
    bodyType?: true
    faceShape?: true
    skinTone?: true
    outfitDesc?: true
    hairstyle?: true
    accessories?: true
    skincare?: true
    outfitImageUrl?: true
    styleImageUrl?: true
    confidence?: true
    createdAt?: true
  }

  export type StyleSuggestionMaxAggregateInputType = {
    id?: true
    userId?: true
    occasion?: true
    bodyType?: true
    faceShape?: true
    skinTone?: true
    outfitDesc?: true
    hairstyle?: true
    accessories?: true
    skincare?: true
    outfitImageUrl?: true
    styleImageUrl?: true
    confidence?: true
    createdAt?: true
  }

  export type StyleSuggestionCountAggregateInputType = {
    id?: true
    userId?: true
    occasion?: true
    bodyType?: true
    faceShape?: true
    skinTone?: true
    outfitDesc?: true
    hairstyle?: true
    accessories?: true
    skincare?: true
    colors?: true
    outfitImageUrl?: true
    styleImageUrl?: true
    confidence?: true
    createdAt?: true
    _all?: true
  }

  export type StyleSuggestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StyleSuggestion to aggregate.
     */
    where?: StyleSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleSuggestions to fetch.
     */
    orderBy?: StyleSuggestionOrderByWithRelationInput | StyleSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StyleSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StyleSuggestions
    **/
    _count?: true | StyleSuggestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StyleSuggestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StyleSuggestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StyleSuggestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StyleSuggestionMaxAggregateInputType
  }

  export type GetStyleSuggestionAggregateType<T extends StyleSuggestionAggregateArgs> = {
        [P in keyof T & keyof AggregateStyleSuggestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStyleSuggestion[P]>
      : GetScalarType<T[P], AggregateStyleSuggestion[P]>
  }




  export type StyleSuggestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StyleSuggestionWhereInput
    orderBy?: StyleSuggestionOrderByWithAggregationInput | StyleSuggestionOrderByWithAggregationInput[]
    by: StyleSuggestionScalarFieldEnum[] | StyleSuggestionScalarFieldEnum
    having?: StyleSuggestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StyleSuggestionCountAggregateInputType | true
    _avg?: StyleSuggestionAvgAggregateInputType
    _sum?: StyleSuggestionSumAggregateInputType
    _min?: StyleSuggestionMinAggregateInputType
    _max?: StyleSuggestionMaxAggregateInputType
  }

  export type StyleSuggestionGroupByOutputType = {
    id: string
    userId: string
    occasion: $Enums.Occasion
    bodyType: $Enums.BodyType | null
    faceShape: $Enums.FaceShape | null
    skinTone: $Enums.SkinTone | null
    outfitDesc: string
    hairstyle: string | null
    accessories: string | null
    skincare: string | null
    colors: string[]
    outfitImageUrl: string | null
    styleImageUrl: string | null
    confidence: number | null
    createdAt: Date
    _count: StyleSuggestionCountAggregateOutputType | null
    _avg: StyleSuggestionAvgAggregateOutputType | null
    _sum: StyleSuggestionSumAggregateOutputType | null
    _min: StyleSuggestionMinAggregateOutputType | null
    _max: StyleSuggestionMaxAggregateOutputType | null
  }

  type GetStyleSuggestionGroupByPayload<T extends StyleSuggestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StyleSuggestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StyleSuggestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StyleSuggestionGroupByOutputType[P]>
            : GetScalarType<T[P], StyleSuggestionGroupByOutputType[P]>
        }
      >
    >


  export type StyleSuggestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    occasion?: boolean
    bodyType?: boolean
    faceShape?: boolean
    skinTone?: boolean
    outfitDesc?: boolean
    hairstyle?: boolean
    accessories?: boolean
    skincare?: boolean
    colors?: boolean
    outfitImageUrl?: boolean
    styleImageUrl?: boolean
    confidence?: boolean
    createdAt?: boolean
    products?: boolean | StyleSuggestion$productsArgs<ExtArgs>
    feedback?: boolean | StyleSuggestion$feedbackArgs<ExtArgs>
    _count?: boolean | StyleSuggestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["styleSuggestion"]>

  export type StyleSuggestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    occasion?: boolean
    bodyType?: boolean
    faceShape?: boolean
    skinTone?: boolean
    outfitDesc?: boolean
    hairstyle?: boolean
    accessories?: boolean
    skincare?: boolean
    colors?: boolean
    outfitImageUrl?: boolean
    styleImageUrl?: boolean
    confidence?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["styleSuggestion"]>

  export type StyleSuggestionSelectScalar = {
    id?: boolean
    userId?: boolean
    occasion?: boolean
    bodyType?: boolean
    faceShape?: boolean
    skinTone?: boolean
    outfitDesc?: boolean
    hairstyle?: boolean
    accessories?: boolean
    skincare?: boolean
    colors?: boolean
    outfitImageUrl?: boolean
    styleImageUrl?: boolean
    confidence?: boolean
    createdAt?: boolean
  }

  export type StyleSuggestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | StyleSuggestion$productsArgs<ExtArgs>
    feedback?: boolean | StyleSuggestion$feedbackArgs<ExtArgs>
    _count?: boolean | StyleSuggestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StyleSuggestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StyleSuggestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StyleSuggestion"
    objects: {
      products: Prisma.$ProductRecommendationPayload<ExtArgs>[]
      feedback: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      occasion: $Enums.Occasion
      bodyType: $Enums.BodyType | null
      faceShape: $Enums.FaceShape | null
      skinTone: $Enums.SkinTone | null
      outfitDesc: string
      hairstyle: string | null
      accessories: string | null
      skincare: string | null
      colors: string[]
      outfitImageUrl: string | null
      styleImageUrl: string | null
      confidence: number | null
      createdAt: Date
    }, ExtArgs["result"]["styleSuggestion"]>
    composites: {}
  }

  type StyleSuggestionGetPayload<S extends boolean | null | undefined | StyleSuggestionDefaultArgs> = $Result.GetResult<Prisma.$StyleSuggestionPayload, S>

  type StyleSuggestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StyleSuggestionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StyleSuggestionCountAggregateInputType | true
    }

  export interface StyleSuggestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StyleSuggestion'], meta: { name: 'StyleSuggestion' } }
    /**
     * Find zero or one StyleSuggestion that matches the filter.
     * @param {StyleSuggestionFindUniqueArgs} args - Arguments to find a StyleSuggestion
     * @example
     * // Get one StyleSuggestion
     * const styleSuggestion = await prisma.styleSuggestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StyleSuggestionFindUniqueArgs>(args: SelectSubset<T, StyleSuggestionFindUniqueArgs<ExtArgs>>): Prisma__StyleSuggestionClient<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StyleSuggestion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StyleSuggestionFindUniqueOrThrowArgs} args - Arguments to find a StyleSuggestion
     * @example
     * // Get one StyleSuggestion
     * const styleSuggestion = await prisma.styleSuggestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StyleSuggestionFindUniqueOrThrowArgs>(args: SelectSubset<T, StyleSuggestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StyleSuggestionClient<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StyleSuggestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleSuggestionFindFirstArgs} args - Arguments to find a StyleSuggestion
     * @example
     * // Get one StyleSuggestion
     * const styleSuggestion = await prisma.styleSuggestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StyleSuggestionFindFirstArgs>(args?: SelectSubset<T, StyleSuggestionFindFirstArgs<ExtArgs>>): Prisma__StyleSuggestionClient<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StyleSuggestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleSuggestionFindFirstOrThrowArgs} args - Arguments to find a StyleSuggestion
     * @example
     * // Get one StyleSuggestion
     * const styleSuggestion = await prisma.styleSuggestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StyleSuggestionFindFirstOrThrowArgs>(args?: SelectSubset<T, StyleSuggestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__StyleSuggestionClient<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StyleSuggestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleSuggestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StyleSuggestions
     * const styleSuggestions = await prisma.styleSuggestion.findMany()
     * 
     * // Get first 10 StyleSuggestions
     * const styleSuggestions = await prisma.styleSuggestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const styleSuggestionWithIdOnly = await prisma.styleSuggestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StyleSuggestionFindManyArgs>(args?: SelectSubset<T, StyleSuggestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StyleSuggestion.
     * @param {StyleSuggestionCreateArgs} args - Arguments to create a StyleSuggestion.
     * @example
     * // Create one StyleSuggestion
     * const StyleSuggestion = await prisma.styleSuggestion.create({
     *   data: {
     *     // ... data to create a StyleSuggestion
     *   }
     * })
     * 
     */
    create<T extends StyleSuggestionCreateArgs>(args: SelectSubset<T, StyleSuggestionCreateArgs<ExtArgs>>): Prisma__StyleSuggestionClient<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StyleSuggestions.
     * @param {StyleSuggestionCreateManyArgs} args - Arguments to create many StyleSuggestions.
     * @example
     * // Create many StyleSuggestions
     * const styleSuggestion = await prisma.styleSuggestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StyleSuggestionCreateManyArgs>(args?: SelectSubset<T, StyleSuggestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StyleSuggestions and returns the data saved in the database.
     * @param {StyleSuggestionCreateManyAndReturnArgs} args - Arguments to create many StyleSuggestions.
     * @example
     * // Create many StyleSuggestions
     * const styleSuggestion = await prisma.styleSuggestion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StyleSuggestions and only return the `id`
     * const styleSuggestionWithIdOnly = await prisma.styleSuggestion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StyleSuggestionCreateManyAndReturnArgs>(args?: SelectSubset<T, StyleSuggestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StyleSuggestion.
     * @param {StyleSuggestionDeleteArgs} args - Arguments to delete one StyleSuggestion.
     * @example
     * // Delete one StyleSuggestion
     * const StyleSuggestion = await prisma.styleSuggestion.delete({
     *   where: {
     *     // ... filter to delete one StyleSuggestion
     *   }
     * })
     * 
     */
    delete<T extends StyleSuggestionDeleteArgs>(args: SelectSubset<T, StyleSuggestionDeleteArgs<ExtArgs>>): Prisma__StyleSuggestionClient<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StyleSuggestion.
     * @param {StyleSuggestionUpdateArgs} args - Arguments to update one StyleSuggestion.
     * @example
     * // Update one StyleSuggestion
     * const styleSuggestion = await prisma.styleSuggestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StyleSuggestionUpdateArgs>(args: SelectSubset<T, StyleSuggestionUpdateArgs<ExtArgs>>): Prisma__StyleSuggestionClient<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StyleSuggestions.
     * @param {StyleSuggestionDeleteManyArgs} args - Arguments to filter StyleSuggestions to delete.
     * @example
     * // Delete a few StyleSuggestions
     * const { count } = await prisma.styleSuggestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StyleSuggestionDeleteManyArgs>(args?: SelectSubset<T, StyleSuggestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StyleSuggestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleSuggestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StyleSuggestions
     * const styleSuggestion = await prisma.styleSuggestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StyleSuggestionUpdateManyArgs>(args: SelectSubset<T, StyleSuggestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StyleSuggestion.
     * @param {StyleSuggestionUpsertArgs} args - Arguments to update or create a StyleSuggestion.
     * @example
     * // Update or create a StyleSuggestion
     * const styleSuggestion = await prisma.styleSuggestion.upsert({
     *   create: {
     *     // ... data to create a StyleSuggestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StyleSuggestion we want to update
     *   }
     * })
     */
    upsert<T extends StyleSuggestionUpsertArgs>(args: SelectSubset<T, StyleSuggestionUpsertArgs<ExtArgs>>): Prisma__StyleSuggestionClient<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StyleSuggestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleSuggestionCountArgs} args - Arguments to filter StyleSuggestions to count.
     * @example
     * // Count the number of StyleSuggestions
     * const count = await prisma.styleSuggestion.count({
     *   where: {
     *     // ... the filter for the StyleSuggestions we want to count
     *   }
     * })
    **/
    count<T extends StyleSuggestionCountArgs>(
      args?: Subset<T, StyleSuggestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StyleSuggestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StyleSuggestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleSuggestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StyleSuggestionAggregateArgs>(args: Subset<T, StyleSuggestionAggregateArgs>): Prisma.PrismaPromise<GetStyleSuggestionAggregateType<T>>

    /**
     * Group by StyleSuggestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleSuggestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StyleSuggestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StyleSuggestionGroupByArgs['orderBy'] }
        : { orderBy?: StyleSuggestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StyleSuggestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStyleSuggestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StyleSuggestion model
   */
  readonly fields: StyleSuggestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StyleSuggestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StyleSuggestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends StyleSuggestion$productsArgs<ExtArgs> = {}>(args?: Subset<T, StyleSuggestion$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductRecommendationPayload<ExtArgs>, T, "findMany"> | Null>
    feedback<T extends StyleSuggestion$feedbackArgs<ExtArgs> = {}>(args?: Subset<T, StyleSuggestion$feedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StyleSuggestion model
   */ 
  interface StyleSuggestionFieldRefs {
    readonly id: FieldRef<"StyleSuggestion", 'String'>
    readonly userId: FieldRef<"StyleSuggestion", 'String'>
    readonly occasion: FieldRef<"StyleSuggestion", 'Occasion'>
    readonly bodyType: FieldRef<"StyleSuggestion", 'BodyType'>
    readonly faceShape: FieldRef<"StyleSuggestion", 'FaceShape'>
    readonly skinTone: FieldRef<"StyleSuggestion", 'SkinTone'>
    readonly outfitDesc: FieldRef<"StyleSuggestion", 'String'>
    readonly hairstyle: FieldRef<"StyleSuggestion", 'String'>
    readonly accessories: FieldRef<"StyleSuggestion", 'String'>
    readonly skincare: FieldRef<"StyleSuggestion", 'String'>
    readonly colors: FieldRef<"StyleSuggestion", 'String[]'>
    readonly outfitImageUrl: FieldRef<"StyleSuggestion", 'String'>
    readonly styleImageUrl: FieldRef<"StyleSuggestion", 'String'>
    readonly confidence: FieldRef<"StyleSuggestion", 'Float'>
    readonly createdAt: FieldRef<"StyleSuggestion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StyleSuggestion findUnique
   */
  export type StyleSuggestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which StyleSuggestion to fetch.
     */
    where: StyleSuggestionWhereUniqueInput
  }

  /**
   * StyleSuggestion findUniqueOrThrow
   */
  export type StyleSuggestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which StyleSuggestion to fetch.
     */
    where: StyleSuggestionWhereUniqueInput
  }

  /**
   * StyleSuggestion findFirst
   */
  export type StyleSuggestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which StyleSuggestion to fetch.
     */
    where?: StyleSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleSuggestions to fetch.
     */
    orderBy?: StyleSuggestionOrderByWithRelationInput | StyleSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StyleSuggestions.
     */
    cursor?: StyleSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StyleSuggestions.
     */
    distinct?: StyleSuggestionScalarFieldEnum | StyleSuggestionScalarFieldEnum[]
  }

  /**
   * StyleSuggestion findFirstOrThrow
   */
  export type StyleSuggestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which StyleSuggestion to fetch.
     */
    where?: StyleSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleSuggestions to fetch.
     */
    orderBy?: StyleSuggestionOrderByWithRelationInput | StyleSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StyleSuggestions.
     */
    cursor?: StyleSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StyleSuggestions.
     */
    distinct?: StyleSuggestionScalarFieldEnum | StyleSuggestionScalarFieldEnum[]
  }

  /**
   * StyleSuggestion findMany
   */
  export type StyleSuggestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which StyleSuggestions to fetch.
     */
    where?: StyleSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleSuggestions to fetch.
     */
    orderBy?: StyleSuggestionOrderByWithRelationInput | StyleSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StyleSuggestions.
     */
    cursor?: StyleSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleSuggestions.
     */
    skip?: number
    distinct?: StyleSuggestionScalarFieldEnum | StyleSuggestionScalarFieldEnum[]
  }

  /**
   * StyleSuggestion create
   */
  export type StyleSuggestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleSuggestionInclude<ExtArgs> | null
    /**
     * The data needed to create a StyleSuggestion.
     */
    data: XOR<StyleSuggestionCreateInput, StyleSuggestionUncheckedCreateInput>
  }

  /**
   * StyleSuggestion createMany
   */
  export type StyleSuggestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StyleSuggestions.
     */
    data: StyleSuggestionCreateManyInput | StyleSuggestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StyleSuggestion createManyAndReturn
   */
  export type StyleSuggestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StyleSuggestions.
     */
    data: StyleSuggestionCreateManyInput | StyleSuggestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StyleSuggestion update
   */
  export type StyleSuggestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleSuggestionInclude<ExtArgs> | null
    /**
     * The data needed to update a StyleSuggestion.
     */
    data: XOR<StyleSuggestionUpdateInput, StyleSuggestionUncheckedUpdateInput>
    /**
     * Choose, which StyleSuggestion to update.
     */
    where: StyleSuggestionWhereUniqueInput
  }

  /**
   * StyleSuggestion updateMany
   */
  export type StyleSuggestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StyleSuggestions.
     */
    data: XOR<StyleSuggestionUpdateManyMutationInput, StyleSuggestionUncheckedUpdateManyInput>
    /**
     * Filter which StyleSuggestions to update
     */
    where?: StyleSuggestionWhereInput
  }

  /**
   * StyleSuggestion upsert
   */
  export type StyleSuggestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleSuggestionInclude<ExtArgs> | null
    /**
     * The filter to search for the StyleSuggestion to update in case it exists.
     */
    where: StyleSuggestionWhereUniqueInput
    /**
     * In case the StyleSuggestion found by the `where` argument doesn't exist, create a new StyleSuggestion with this data.
     */
    create: XOR<StyleSuggestionCreateInput, StyleSuggestionUncheckedCreateInput>
    /**
     * In case the StyleSuggestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StyleSuggestionUpdateInput, StyleSuggestionUncheckedUpdateInput>
  }

  /**
   * StyleSuggestion delete
   */
  export type StyleSuggestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleSuggestionInclude<ExtArgs> | null
    /**
     * Filter which StyleSuggestion to delete.
     */
    where: StyleSuggestionWhereUniqueInput
  }

  /**
   * StyleSuggestion deleteMany
   */
  export type StyleSuggestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StyleSuggestions to delete
     */
    where?: StyleSuggestionWhereInput
  }

  /**
   * StyleSuggestion.products
   */
  export type StyleSuggestion$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationInclude<ExtArgs> | null
    where?: ProductRecommendationWhereInput
    orderBy?: ProductRecommendationOrderByWithRelationInput | ProductRecommendationOrderByWithRelationInput[]
    cursor?: ProductRecommendationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductRecommendationScalarFieldEnum | ProductRecommendationScalarFieldEnum[]
  }

  /**
   * StyleSuggestion.feedback
   */
  export type StyleSuggestion$feedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * StyleSuggestion without action
   */
  export type StyleSuggestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleSuggestionInclude<ExtArgs> | null
  }


  /**
   * Model ProductRecommendation
   */

  export type AggregateProductRecommendation = {
    _count: ProductRecommendationCountAggregateOutputType | null
    _avg: ProductRecommendationAvgAggregateOutputType | null
    _sum: ProductRecommendationSumAggregateOutputType | null
    _min: ProductRecommendationMinAggregateOutputType | null
    _max: ProductRecommendationMaxAggregateOutputType | null
  }

  export type ProductRecommendationAvgAggregateOutputType = {
    price: number | null
    rating: number | null
    reviewCount: number | null
  }

  export type ProductRecommendationSumAggregateOutputType = {
    price: number | null
    rating: number | null
    reviewCount: number | null
  }

  export type ProductRecommendationMinAggregateOutputType = {
    id: string | null
    suggestionId: string | null
    productId: string | null
    name: string | null
    brand: string | null
    price: number | null
    currency: string | null
    imageUrl: string | null
    productUrl: string | null
    platform: $Enums.Platform | null
    category: $Enums.ProductCategory | null
    rating: number | null
    reviewCount: number | null
    inStock: boolean | null
    createdAt: Date | null
  }

  export type ProductRecommendationMaxAggregateOutputType = {
    id: string | null
    suggestionId: string | null
    productId: string | null
    name: string | null
    brand: string | null
    price: number | null
    currency: string | null
    imageUrl: string | null
    productUrl: string | null
    platform: $Enums.Platform | null
    category: $Enums.ProductCategory | null
    rating: number | null
    reviewCount: number | null
    inStock: boolean | null
    createdAt: Date | null
  }

  export type ProductRecommendationCountAggregateOutputType = {
    id: number
    suggestionId: number
    productId: number
    name: number
    brand: number
    price: number
    currency: number
    imageUrl: number
    productUrl: number
    platform: number
    category: number
    rating: number
    reviewCount: number
    inStock: number
    createdAt: number
    _all: number
  }


  export type ProductRecommendationAvgAggregateInputType = {
    price?: true
    rating?: true
    reviewCount?: true
  }

  export type ProductRecommendationSumAggregateInputType = {
    price?: true
    rating?: true
    reviewCount?: true
  }

  export type ProductRecommendationMinAggregateInputType = {
    id?: true
    suggestionId?: true
    productId?: true
    name?: true
    brand?: true
    price?: true
    currency?: true
    imageUrl?: true
    productUrl?: true
    platform?: true
    category?: true
    rating?: true
    reviewCount?: true
    inStock?: true
    createdAt?: true
  }

  export type ProductRecommendationMaxAggregateInputType = {
    id?: true
    suggestionId?: true
    productId?: true
    name?: true
    brand?: true
    price?: true
    currency?: true
    imageUrl?: true
    productUrl?: true
    platform?: true
    category?: true
    rating?: true
    reviewCount?: true
    inStock?: true
    createdAt?: true
  }

  export type ProductRecommendationCountAggregateInputType = {
    id?: true
    suggestionId?: true
    productId?: true
    name?: true
    brand?: true
    price?: true
    currency?: true
    imageUrl?: true
    productUrl?: true
    platform?: true
    category?: true
    rating?: true
    reviewCount?: true
    inStock?: true
    createdAt?: true
    _all?: true
  }

  export type ProductRecommendationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductRecommendation to aggregate.
     */
    where?: ProductRecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecommendations to fetch.
     */
    orderBy?: ProductRecommendationOrderByWithRelationInput | ProductRecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductRecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductRecommendations
    **/
    _count?: true | ProductRecommendationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductRecommendationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductRecommendationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductRecommendationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductRecommendationMaxAggregateInputType
  }

  export type GetProductRecommendationAggregateType<T extends ProductRecommendationAggregateArgs> = {
        [P in keyof T & keyof AggregateProductRecommendation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductRecommendation[P]>
      : GetScalarType<T[P], AggregateProductRecommendation[P]>
  }




  export type ProductRecommendationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductRecommendationWhereInput
    orderBy?: ProductRecommendationOrderByWithAggregationInput | ProductRecommendationOrderByWithAggregationInput[]
    by: ProductRecommendationScalarFieldEnum[] | ProductRecommendationScalarFieldEnum
    having?: ProductRecommendationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductRecommendationCountAggregateInputType | true
    _avg?: ProductRecommendationAvgAggregateInputType
    _sum?: ProductRecommendationSumAggregateInputType
    _min?: ProductRecommendationMinAggregateInputType
    _max?: ProductRecommendationMaxAggregateInputType
  }

  export type ProductRecommendationGroupByOutputType = {
    id: string
    suggestionId: string
    productId: string
    name: string
    brand: string
    price: number
    currency: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    category: $Enums.ProductCategory
    rating: number | null
    reviewCount: number | null
    inStock: boolean
    createdAt: Date
    _count: ProductRecommendationCountAggregateOutputType | null
    _avg: ProductRecommendationAvgAggregateOutputType | null
    _sum: ProductRecommendationSumAggregateOutputType | null
    _min: ProductRecommendationMinAggregateOutputType | null
    _max: ProductRecommendationMaxAggregateOutputType | null
  }

  type GetProductRecommendationGroupByPayload<T extends ProductRecommendationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductRecommendationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductRecommendationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductRecommendationGroupByOutputType[P]>
            : GetScalarType<T[P], ProductRecommendationGroupByOutputType[P]>
        }
      >
    >


  export type ProductRecommendationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    suggestionId?: boolean
    productId?: boolean
    name?: boolean
    brand?: boolean
    price?: boolean
    currency?: boolean
    imageUrl?: boolean
    productUrl?: boolean
    platform?: boolean
    category?: boolean
    rating?: boolean
    reviewCount?: boolean
    inStock?: boolean
    createdAt?: boolean
    suggestion?: boolean | StyleSuggestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productRecommendation"]>

  export type ProductRecommendationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    suggestionId?: boolean
    productId?: boolean
    name?: boolean
    brand?: boolean
    price?: boolean
    currency?: boolean
    imageUrl?: boolean
    productUrl?: boolean
    platform?: boolean
    category?: boolean
    rating?: boolean
    reviewCount?: boolean
    inStock?: boolean
    createdAt?: boolean
    suggestion?: boolean | StyleSuggestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productRecommendation"]>

  export type ProductRecommendationSelectScalar = {
    id?: boolean
    suggestionId?: boolean
    productId?: boolean
    name?: boolean
    brand?: boolean
    price?: boolean
    currency?: boolean
    imageUrl?: boolean
    productUrl?: boolean
    platform?: boolean
    category?: boolean
    rating?: boolean
    reviewCount?: boolean
    inStock?: boolean
    createdAt?: boolean
  }

  export type ProductRecommendationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    suggestion?: boolean | StyleSuggestionDefaultArgs<ExtArgs>
  }
  export type ProductRecommendationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    suggestion?: boolean | StyleSuggestionDefaultArgs<ExtArgs>
  }

  export type $ProductRecommendationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductRecommendation"
    objects: {
      suggestion: Prisma.$StyleSuggestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      suggestionId: string
      productId: string
      name: string
      brand: string
      price: number
      currency: string
      imageUrl: string
      productUrl: string
      platform: $Enums.Platform
      category: $Enums.ProductCategory
      rating: number | null
      reviewCount: number | null
      inStock: boolean
      createdAt: Date
    }, ExtArgs["result"]["productRecommendation"]>
    composites: {}
  }

  type ProductRecommendationGetPayload<S extends boolean | null | undefined | ProductRecommendationDefaultArgs> = $Result.GetResult<Prisma.$ProductRecommendationPayload, S>

  type ProductRecommendationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductRecommendationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductRecommendationCountAggregateInputType | true
    }

  export interface ProductRecommendationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductRecommendation'], meta: { name: 'ProductRecommendation' } }
    /**
     * Find zero or one ProductRecommendation that matches the filter.
     * @param {ProductRecommendationFindUniqueArgs} args - Arguments to find a ProductRecommendation
     * @example
     * // Get one ProductRecommendation
     * const productRecommendation = await prisma.productRecommendation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductRecommendationFindUniqueArgs>(args: SelectSubset<T, ProductRecommendationFindUniqueArgs<ExtArgs>>): Prisma__ProductRecommendationClient<$Result.GetResult<Prisma.$ProductRecommendationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProductRecommendation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductRecommendationFindUniqueOrThrowArgs} args - Arguments to find a ProductRecommendation
     * @example
     * // Get one ProductRecommendation
     * const productRecommendation = await prisma.productRecommendation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductRecommendationFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductRecommendationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductRecommendationClient<$Result.GetResult<Prisma.$ProductRecommendationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProductRecommendation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecommendationFindFirstArgs} args - Arguments to find a ProductRecommendation
     * @example
     * // Get one ProductRecommendation
     * const productRecommendation = await prisma.productRecommendation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductRecommendationFindFirstArgs>(args?: SelectSubset<T, ProductRecommendationFindFirstArgs<ExtArgs>>): Prisma__ProductRecommendationClient<$Result.GetResult<Prisma.$ProductRecommendationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProductRecommendation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecommendationFindFirstOrThrowArgs} args - Arguments to find a ProductRecommendation
     * @example
     * // Get one ProductRecommendation
     * const productRecommendation = await prisma.productRecommendation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductRecommendationFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductRecommendationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductRecommendationClient<$Result.GetResult<Prisma.$ProductRecommendationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProductRecommendations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecommendationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductRecommendations
     * const productRecommendations = await prisma.productRecommendation.findMany()
     * 
     * // Get first 10 ProductRecommendations
     * const productRecommendations = await prisma.productRecommendation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productRecommendationWithIdOnly = await prisma.productRecommendation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductRecommendationFindManyArgs>(args?: SelectSubset<T, ProductRecommendationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductRecommendationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProductRecommendation.
     * @param {ProductRecommendationCreateArgs} args - Arguments to create a ProductRecommendation.
     * @example
     * // Create one ProductRecommendation
     * const ProductRecommendation = await prisma.productRecommendation.create({
     *   data: {
     *     // ... data to create a ProductRecommendation
     *   }
     * })
     * 
     */
    create<T extends ProductRecommendationCreateArgs>(args: SelectSubset<T, ProductRecommendationCreateArgs<ExtArgs>>): Prisma__ProductRecommendationClient<$Result.GetResult<Prisma.$ProductRecommendationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProductRecommendations.
     * @param {ProductRecommendationCreateManyArgs} args - Arguments to create many ProductRecommendations.
     * @example
     * // Create many ProductRecommendations
     * const productRecommendation = await prisma.productRecommendation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductRecommendationCreateManyArgs>(args?: SelectSubset<T, ProductRecommendationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductRecommendations and returns the data saved in the database.
     * @param {ProductRecommendationCreateManyAndReturnArgs} args - Arguments to create many ProductRecommendations.
     * @example
     * // Create many ProductRecommendations
     * const productRecommendation = await prisma.productRecommendation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductRecommendations and only return the `id`
     * const productRecommendationWithIdOnly = await prisma.productRecommendation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductRecommendationCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductRecommendationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductRecommendationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProductRecommendation.
     * @param {ProductRecommendationDeleteArgs} args - Arguments to delete one ProductRecommendation.
     * @example
     * // Delete one ProductRecommendation
     * const ProductRecommendation = await prisma.productRecommendation.delete({
     *   where: {
     *     // ... filter to delete one ProductRecommendation
     *   }
     * })
     * 
     */
    delete<T extends ProductRecommendationDeleteArgs>(args: SelectSubset<T, ProductRecommendationDeleteArgs<ExtArgs>>): Prisma__ProductRecommendationClient<$Result.GetResult<Prisma.$ProductRecommendationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProductRecommendation.
     * @param {ProductRecommendationUpdateArgs} args - Arguments to update one ProductRecommendation.
     * @example
     * // Update one ProductRecommendation
     * const productRecommendation = await prisma.productRecommendation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductRecommendationUpdateArgs>(args: SelectSubset<T, ProductRecommendationUpdateArgs<ExtArgs>>): Prisma__ProductRecommendationClient<$Result.GetResult<Prisma.$ProductRecommendationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProductRecommendations.
     * @param {ProductRecommendationDeleteManyArgs} args - Arguments to filter ProductRecommendations to delete.
     * @example
     * // Delete a few ProductRecommendations
     * const { count } = await prisma.productRecommendation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductRecommendationDeleteManyArgs>(args?: SelectSubset<T, ProductRecommendationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductRecommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecommendationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductRecommendations
     * const productRecommendation = await prisma.productRecommendation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductRecommendationUpdateManyArgs>(args: SelectSubset<T, ProductRecommendationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductRecommendation.
     * @param {ProductRecommendationUpsertArgs} args - Arguments to update or create a ProductRecommendation.
     * @example
     * // Update or create a ProductRecommendation
     * const productRecommendation = await prisma.productRecommendation.upsert({
     *   create: {
     *     // ... data to create a ProductRecommendation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductRecommendation we want to update
     *   }
     * })
     */
    upsert<T extends ProductRecommendationUpsertArgs>(args: SelectSubset<T, ProductRecommendationUpsertArgs<ExtArgs>>): Prisma__ProductRecommendationClient<$Result.GetResult<Prisma.$ProductRecommendationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProductRecommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecommendationCountArgs} args - Arguments to filter ProductRecommendations to count.
     * @example
     * // Count the number of ProductRecommendations
     * const count = await prisma.productRecommendation.count({
     *   where: {
     *     // ... the filter for the ProductRecommendations we want to count
     *   }
     * })
    **/
    count<T extends ProductRecommendationCountArgs>(
      args?: Subset<T, ProductRecommendationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductRecommendationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductRecommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecommendationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductRecommendationAggregateArgs>(args: Subset<T, ProductRecommendationAggregateArgs>): Prisma.PrismaPromise<GetProductRecommendationAggregateType<T>>

    /**
     * Group by ProductRecommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecommendationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductRecommendationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductRecommendationGroupByArgs['orderBy'] }
        : { orderBy?: ProductRecommendationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductRecommendationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductRecommendationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductRecommendation model
   */
  readonly fields: ProductRecommendationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductRecommendation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductRecommendationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    suggestion<T extends StyleSuggestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StyleSuggestionDefaultArgs<ExtArgs>>): Prisma__StyleSuggestionClient<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductRecommendation model
   */ 
  interface ProductRecommendationFieldRefs {
    readonly id: FieldRef<"ProductRecommendation", 'String'>
    readonly suggestionId: FieldRef<"ProductRecommendation", 'String'>
    readonly productId: FieldRef<"ProductRecommendation", 'String'>
    readonly name: FieldRef<"ProductRecommendation", 'String'>
    readonly brand: FieldRef<"ProductRecommendation", 'String'>
    readonly price: FieldRef<"ProductRecommendation", 'Float'>
    readonly currency: FieldRef<"ProductRecommendation", 'String'>
    readonly imageUrl: FieldRef<"ProductRecommendation", 'String'>
    readonly productUrl: FieldRef<"ProductRecommendation", 'String'>
    readonly platform: FieldRef<"ProductRecommendation", 'Platform'>
    readonly category: FieldRef<"ProductRecommendation", 'ProductCategory'>
    readonly rating: FieldRef<"ProductRecommendation", 'Float'>
    readonly reviewCount: FieldRef<"ProductRecommendation", 'Int'>
    readonly inStock: FieldRef<"ProductRecommendation", 'Boolean'>
    readonly createdAt: FieldRef<"ProductRecommendation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductRecommendation findUnique
   */
  export type ProductRecommendationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecommendation to fetch.
     */
    where: ProductRecommendationWhereUniqueInput
  }

  /**
   * ProductRecommendation findUniqueOrThrow
   */
  export type ProductRecommendationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecommendation to fetch.
     */
    where: ProductRecommendationWhereUniqueInput
  }

  /**
   * ProductRecommendation findFirst
   */
  export type ProductRecommendationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecommendation to fetch.
     */
    where?: ProductRecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecommendations to fetch.
     */
    orderBy?: ProductRecommendationOrderByWithRelationInput | ProductRecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductRecommendations.
     */
    cursor?: ProductRecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductRecommendations.
     */
    distinct?: ProductRecommendationScalarFieldEnum | ProductRecommendationScalarFieldEnum[]
  }

  /**
   * ProductRecommendation findFirstOrThrow
   */
  export type ProductRecommendationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecommendation to fetch.
     */
    where?: ProductRecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecommendations to fetch.
     */
    orderBy?: ProductRecommendationOrderByWithRelationInput | ProductRecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductRecommendations.
     */
    cursor?: ProductRecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductRecommendations.
     */
    distinct?: ProductRecommendationScalarFieldEnum | ProductRecommendationScalarFieldEnum[]
  }

  /**
   * ProductRecommendation findMany
   */
  export type ProductRecommendationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecommendations to fetch.
     */
    where?: ProductRecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecommendations to fetch.
     */
    orderBy?: ProductRecommendationOrderByWithRelationInput | ProductRecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductRecommendations.
     */
    cursor?: ProductRecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecommendations.
     */
    skip?: number
    distinct?: ProductRecommendationScalarFieldEnum | ProductRecommendationScalarFieldEnum[]
  }

  /**
   * ProductRecommendation create
   */
  export type ProductRecommendationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductRecommendation.
     */
    data: XOR<ProductRecommendationCreateInput, ProductRecommendationUncheckedCreateInput>
  }

  /**
   * ProductRecommendation createMany
   */
  export type ProductRecommendationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductRecommendations.
     */
    data: ProductRecommendationCreateManyInput | ProductRecommendationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductRecommendation createManyAndReturn
   */
  export type ProductRecommendationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProductRecommendations.
     */
    data: ProductRecommendationCreateManyInput | ProductRecommendationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductRecommendation update
   */
  export type ProductRecommendationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductRecommendation.
     */
    data: XOR<ProductRecommendationUpdateInput, ProductRecommendationUncheckedUpdateInput>
    /**
     * Choose, which ProductRecommendation to update.
     */
    where: ProductRecommendationWhereUniqueInput
  }

  /**
   * ProductRecommendation updateMany
   */
  export type ProductRecommendationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductRecommendations.
     */
    data: XOR<ProductRecommendationUpdateManyMutationInput, ProductRecommendationUncheckedUpdateManyInput>
    /**
     * Filter which ProductRecommendations to update
     */
    where?: ProductRecommendationWhereInput
  }

  /**
   * ProductRecommendation upsert
   */
  export type ProductRecommendationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductRecommendation to update in case it exists.
     */
    where: ProductRecommendationWhereUniqueInput
    /**
     * In case the ProductRecommendation found by the `where` argument doesn't exist, create a new ProductRecommendation with this data.
     */
    create: XOR<ProductRecommendationCreateInput, ProductRecommendationUncheckedCreateInput>
    /**
     * In case the ProductRecommendation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductRecommendationUpdateInput, ProductRecommendationUncheckedUpdateInput>
  }

  /**
   * ProductRecommendation delete
   */
  export type ProductRecommendationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationInclude<ExtArgs> | null
    /**
     * Filter which ProductRecommendation to delete.
     */
    where: ProductRecommendationWhereUniqueInput
  }

  /**
   * ProductRecommendation deleteMany
   */
  export type ProductRecommendationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductRecommendations to delete
     */
    where?: ProductRecommendationWhereInput
  }

  /**
   * ProductRecommendation without action
   */
  export type ProductRecommendationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecommendation
     */
    select?: ProductRecommendationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductRecommendationInclude<ExtArgs> | null
  }


  /**
   * Model Favorite
   */

  export type AggregateFavorite = {
    _count: FavoriteCountAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  export type FavoriteMinAggregateOutputType = {
    id: string | null
    userId: string | null
    productId: string | null
    name: string | null
    brand: string | null
    imageUrl: string | null
    productUrl: string | null
    platform: $Enums.Platform | null
    createdAt: Date | null
  }

  export type FavoriteMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    productId: string | null
    name: string | null
    brand: string | null
    imageUrl: string | null
    productUrl: string | null
    platform: $Enums.Platform | null
    createdAt: Date | null
  }

  export type FavoriteCountAggregateOutputType = {
    id: number
    userId: number
    productId: number
    name: number
    brand: number
    imageUrl: number
    productUrl: number
    platform: number
    createdAt: number
    _all: number
  }


  export type FavoriteMinAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    name?: true
    brand?: true
    imageUrl?: true
    productUrl?: true
    platform?: true
    createdAt?: true
  }

  export type FavoriteMaxAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    name?: true
    brand?: true
    imageUrl?: true
    productUrl?: true
    platform?: true
    createdAt?: true
  }

  export type FavoriteCountAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    name?: true
    brand?: true
    imageUrl?: true
    productUrl?: true
    platform?: true
    createdAt?: true
    _all?: true
  }

  export type FavoriteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorite to aggregate.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favorites
    **/
    _count?: true | FavoriteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteMaxAggregateInputType
  }

  export type GetFavoriteAggregateType<T extends FavoriteAggregateArgs> = {
        [P in keyof T & keyof AggregateFavorite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavorite[P]>
      : GetScalarType<T[P], AggregateFavorite[P]>
  }




  export type FavoriteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithAggregationInput | FavoriteOrderByWithAggregationInput[]
    by: FavoriteScalarFieldEnum[] | FavoriteScalarFieldEnum
    having?: FavoriteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteCountAggregateInputType | true
    _min?: FavoriteMinAggregateInputType
    _max?: FavoriteMaxAggregateInputType
  }

  export type FavoriteGroupByOutputType = {
    id: string
    userId: string
    productId: string
    name: string
    brand: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    createdAt: Date
    _count: FavoriteCountAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  type GetFavoriteGroupByPayload<T extends FavoriteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    name?: boolean
    brand?: boolean
    imageUrl?: boolean
    productUrl?: boolean
    platform?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    name?: boolean
    brand?: boolean
    imageUrl?: boolean
    productUrl?: boolean
    platform?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectScalar = {
    id?: boolean
    userId?: boolean
    productId?: boolean
    name?: boolean
    brand?: boolean
    imageUrl?: boolean
    productUrl?: boolean
    platform?: boolean
    createdAt?: boolean
  }

  export type FavoriteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FavoriteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FavoritePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Favorite"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      productId: string
      name: string
      brand: string
      imageUrl: string
      productUrl: string
      platform: $Enums.Platform
      createdAt: Date
    }, ExtArgs["result"]["favorite"]>
    composites: {}
  }

  type FavoriteGetPayload<S extends boolean | null | undefined | FavoriteDefaultArgs> = $Result.GetResult<Prisma.$FavoritePayload, S>

  type FavoriteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoriteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoriteCountAggregateInputType | true
    }

  export interface FavoriteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Favorite'], meta: { name: 'Favorite' } }
    /**
     * Find zero or one Favorite that matches the filter.
     * @param {FavoriteFindUniqueArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteFindUniqueArgs>(args: SelectSubset<T, FavoriteFindUniqueArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Favorite that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FavoriteFindUniqueOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Favorite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteFindFirstArgs>(args?: SelectSubset<T, FavoriteFindFirstArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Favorite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Favorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favorites
     * const favorites = await prisma.favorite.findMany()
     * 
     * // Get first 10 Favorites
     * const favorites = await prisma.favorite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteWithIdOnly = await prisma.favorite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteFindManyArgs>(args?: SelectSubset<T, FavoriteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Favorite.
     * @param {FavoriteCreateArgs} args - Arguments to create a Favorite.
     * @example
     * // Create one Favorite
     * const Favorite = await prisma.favorite.create({
     *   data: {
     *     // ... data to create a Favorite
     *   }
     * })
     * 
     */
    create<T extends FavoriteCreateArgs>(args: SelectSubset<T, FavoriteCreateArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Favorites.
     * @param {FavoriteCreateManyArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteCreateManyArgs>(args?: SelectSubset<T, FavoriteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Favorites and returns the data saved in the database.
     * @param {FavoriteCreateManyAndReturnArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Favorites and only return the `id`
     * const favoriteWithIdOnly = await prisma.favorite.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Favorite.
     * @param {FavoriteDeleteArgs} args - Arguments to delete one Favorite.
     * @example
     * // Delete one Favorite
     * const Favorite = await prisma.favorite.delete({
     *   where: {
     *     // ... filter to delete one Favorite
     *   }
     * })
     * 
     */
    delete<T extends FavoriteDeleteArgs>(args: SelectSubset<T, FavoriteDeleteArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Favorite.
     * @param {FavoriteUpdateArgs} args - Arguments to update one Favorite.
     * @example
     * // Update one Favorite
     * const favorite = await prisma.favorite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteUpdateArgs>(args: SelectSubset<T, FavoriteUpdateArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Favorites.
     * @param {FavoriteDeleteManyArgs} args - Arguments to filter Favorites to delete.
     * @example
     * // Delete a few Favorites
     * const { count } = await prisma.favorite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteDeleteManyArgs>(args?: SelectSubset<T, FavoriteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favorites
     * const favorite = await prisma.favorite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteUpdateManyArgs>(args: SelectSubset<T, FavoriteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Favorite.
     * @param {FavoriteUpsertArgs} args - Arguments to update or create a Favorite.
     * @example
     * // Update or create a Favorite
     * const favorite = await prisma.favorite.upsert({
     *   create: {
     *     // ... data to create a Favorite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favorite we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteUpsertArgs>(args: SelectSubset<T, FavoriteUpsertArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteCountArgs} args - Arguments to filter Favorites to count.
     * @example
     * // Count the number of Favorites
     * const count = await prisma.favorite.count({
     *   where: {
     *     // ... the filter for the Favorites we want to count
     *   }
     * })
    **/
    count<T extends FavoriteCountArgs>(
      args?: Subset<T, FavoriteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteAggregateArgs>(args: Subset<T, FavoriteAggregateArgs>): Prisma.PrismaPromise<GetFavoriteAggregateType<T>>

    /**
     * Group by Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Favorite model
   */
  readonly fields: FavoriteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Favorite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Favorite model
   */ 
  interface FavoriteFieldRefs {
    readonly id: FieldRef<"Favorite", 'String'>
    readonly userId: FieldRef<"Favorite", 'String'>
    readonly productId: FieldRef<"Favorite", 'String'>
    readonly name: FieldRef<"Favorite", 'String'>
    readonly brand: FieldRef<"Favorite", 'String'>
    readonly imageUrl: FieldRef<"Favorite", 'String'>
    readonly productUrl: FieldRef<"Favorite", 'String'>
    readonly platform: FieldRef<"Favorite", 'Platform'>
    readonly createdAt: FieldRef<"Favorite", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Favorite findUnique
   */
  export type FavoriteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite findUniqueOrThrow
   */
  export type FavoriteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite findFirst
   */
  export type FavoriteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite findFirstOrThrow
   */
  export type FavoriteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite findMany
   */
  export type FavoriteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorites to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite create
   */
  export type FavoriteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to create a Favorite.
     */
    data: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
  }

  /**
   * Favorite createMany
   */
  export type FavoriteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Favorites.
     */
    data: FavoriteCreateManyInput | FavoriteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Favorite createManyAndReturn
   */
  export type FavoriteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Favorites.
     */
    data: FavoriteCreateManyInput | FavoriteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Favorite update
   */
  export type FavoriteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to update a Favorite.
     */
    data: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
    /**
     * Choose, which Favorite to update.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite updateMany
   */
  export type FavoriteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Favorites.
     */
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyInput>
    /**
     * Filter which Favorites to update
     */
    where?: FavoriteWhereInput
  }

  /**
   * Favorite upsert
   */
  export type FavoriteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The filter to search for the Favorite to update in case it exists.
     */
    where: FavoriteWhereUniqueInput
    /**
     * In case the Favorite found by the `where` argument doesn't exist, create a new Favorite with this data.
     */
    create: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
    /**
     * In case the Favorite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
  }

  /**
   * Favorite delete
   */
  export type FavoriteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter which Favorite to delete.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite deleteMany
   */
  export type FavoriteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorites to delete
     */
    where?: FavoriteWhereInput
  }

  /**
   * Favorite without action
   */
  export type FavoriteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: string | null
    userId: string | null
    suggestionId: string | null
    rating: number | null
    liked: boolean | null
    comment: string | null
    createdAt: Date | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    suggestionId: string | null
    rating: number | null
    liked: boolean | null
    comment: string | null
    createdAt: Date | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    userId: number
    suggestionId: number
    rating: number
    liked: number
    comment: number
    createdAt: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    userId?: true
    suggestionId?: true
    rating?: true
    liked?: true
    comment?: true
    createdAt?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    userId?: true
    suggestionId?: true
    rating?: true
    liked?: true
    comment?: true
    createdAt?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    userId?: true
    suggestionId?: true
    rating?: true
    liked?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: string
    userId: string
    suggestionId: string | null
    rating: number
    liked: boolean
    comment: string | null
    createdAt: Date
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    suggestionId?: boolean
    rating?: boolean
    liked?: boolean
    comment?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    suggestion?: boolean | Feedback$suggestionArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    suggestionId?: boolean
    rating?: boolean
    liked?: boolean
    comment?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    suggestion?: boolean | Feedback$suggestionArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    userId?: boolean
    suggestionId?: boolean
    rating?: boolean
    liked?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    suggestion?: boolean | Feedback$suggestionArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    suggestion?: boolean | Feedback$suggestionArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      suggestion: Prisma.$StyleSuggestionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      suggestionId: string | null
      rating: number
      liked: boolean
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    suggestion<T extends Feedback$suggestionArgs<ExtArgs> = {}>(args?: Subset<T, Feedback$suggestionArgs<ExtArgs>>): Prisma__StyleSuggestionClient<$Result.GetResult<Prisma.$StyleSuggestionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */ 
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'String'>
    readonly userId: FieldRef<"Feedback", 'String'>
    readonly suggestionId: FieldRef<"Feedback", 'String'>
    readonly rating: FieldRef<"Feedback", 'Int'>
    readonly liked: FieldRef<"Feedback", 'Boolean'>
    readonly comment: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback.suggestion
   */
  export type Feedback$suggestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleSuggestion
     */
    select?: StyleSuggestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleSuggestionInclude<ExtArgs> | null
    where?: StyleSuggestionWhereInput
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model UserPreference
   */

  export type AggregateUserPreference = {
    _count: UserPreferenceCountAggregateOutputType | null
    _min: UserPreferenceMinAggregateOutputType | null
    _max: UserPreferenceMaxAggregateOutputType | null
  }

  export type UserPreferenceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    key: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferenceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    key: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferenceCountAggregateOutputType = {
    id: number
    userId: number
    key: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserPreferenceMinAggregateInputType = {
    id?: true
    userId?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferenceMaxAggregateInputType = {
    id?: true
    userId?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferenceCountAggregateInputType = {
    id?: true
    userId?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreference to aggregate.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPreferences
    **/
    _count?: true | UserPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPreferenceMaxAggregateInputType
  }

  export type GetUserPreferenceAggregateType<T extends UserPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPreference[P]>
      : GetScalarType<T[P], AggregateUserPreference[P]>
  }




  export type UserPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferenceWhereInput
    orderBy?: UserPreferenceOrderByWithAggregationInput | UserPreferenceOrderByWithAggregationInput[]
    by: UserPreferenceScalarFieldEnum[] | UserPreferenceScalarFieldEnum
    having?: UserPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPreferenceCountAggregateInputType | true
    _min?: UserPreferenceMinAggregateInputType
    _max?: UserPreferenceMaxAggregateInputType
  }

  export type UserPreferenceGroupByOutputType = {
    id: string
    userId: string
    key: string
    value: string
    createdAt: Date
    updatedAt: Date
    _count: UserPreferenceCountAggregateOutputType | null
    _min: UserPreferenceMinAggregateOutputType | null
    _max: UserPreferenceMaxAggregateOutputType | null
  }

  type GetUserPreferenceGroupByPayload<T extends UserPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], UserPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type UserPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreference"]>

  export type UserPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreference"]>

  export type UserPreferenceSelectScalar = {
    id?: boolean
    userId?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPreferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPreference"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      key: string
      value: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userPreference"]>
    composites: {}
  }

  type UserPreferenceGetPayload<S extends boolean | null | undefined | UserPreferenceDefaultArgs> = $Result.GetResult<Prisma.$UserPreferencePayload, S>

  type UserPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPreferenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPreferenceCountAggregateInputType | true
    }

  export interface UserPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPreference'], meta: { name: 'UserPreference' } }
    /**
     * Find zero or one UserPreference that matches the filter.
     * @param {UserPreferenceFindUniqueArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPreferenceFindUniqueArgs>(args: SelectSubset<T, UserPreferenceFindUniqueArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPreference that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPreferenceFindUniqueOrThrowArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindFirstArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPreferenceFindFirstArgs>(args?: SelectSubset<T, UserPreferenceFindFirstArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindFirstOrThrowArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPreferences
     * const userPreferences = await prisma.userPreference.findMany()
     * 
     * // Get first 10 UserPreferences
     * const userPreferences = await prisma.userPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPreferenceWithIdOnly = await prisma.userPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPreferenceFindManyArgs>(args?: SelectSubset<T, UserPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPreference.
     * @param {UserPreferenceCreateArgs} args - Arguments to create a UserPreference.
     * @example
     * // Create one UserPreference
     * const UserPreference = await prisma.userPreference.create({
     *   data: {
     *     // ... data to create a UserPreference
     *   }
     * })
     * 
     */
    create<T extends UserPreferenceCreateArgs>(args: SelectSubset<T, UserPreferenceCreateArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserPreferences.
     * @param {UserPreferenceCreateManyArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreference = await prisma.userPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPreferenceCreateManyArgs>(args?: SelectSubset<T, UserPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPreferences and returns the data saved in the database.
     * @param {UserPreferenceCreateManyAndReturnArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreference = await prisma.userPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPreferences and only return the `id`
     * const userPreferenceWithIdOnly = await prisma.userPreference.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserPreference.
     * @param {UserPreferenceDeleteArgs} args - Arguments to delete one UserPreference.
     * @example
     * // Delete one UserPreference
     * const UserPreference = await prisma.userPreference.delete({
     *   where: {
     *     // ... filter to delete one UserPreference
     *   }
     * })
     * 
     */
    delete<T extends UserPreferenceDeleteArgs>(args: SelectSubset<T, UserPreferenceDeleteArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPreference.
     * @param {UserPreferenceUpdateArgs} args - Arguments to update one UserPreference.
     * @example
     * // Update one UserPreference
     * const userPreference = await prisma.userPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPreferenceUpdateArgs>(args: SelectSubset<T, UserPreferenceUpdateArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserPreferences.
     * @param {UserPreferenceDeleteManyArgs} args - Arguments to filter UserPreferences to delete.
     * @example
     * // Delete a few UserPreferences
     * const { count } = await prisma.userPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPreferenceDeleteManyArgs>(args?: SelectSubset<T, UserPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPreferences
     * const userPreference = await prisma.userPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPreferenceUpdateManyArgs>(args: SelectSubset<T, UserPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPreference.
     * @param {UserPreferenceUpsertArgs} args - Arguments to update or create a UserPreference.
     * @example
     * // Update or create a UserPreference
     * const userPreference = await prisma.userPreference.upsert({
     *   create: {
     *     // ... data to create a UserPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPreference we want to update
     *   }
     * })
     */
    upsert<T extends UserPreferenceUpsertArgs>(args: SelectSubset<T, UserPreferenceUpsertArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceCountArgs} args - Arguments to filter UserPreferences to count.
     * @example
     * // Count the number of UserPreferences
     * const count = await prisma.userPreference.count({
     *   where: {
     *     // ... the filter for the UserPreferences we want to count
     *   }
     * })
    **/
    count<T extends UserPreferenceCountArgs>(
      args?: Subset<T, UserPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPreferenceAggregateArgs>(args: Subset<T, UserPreferenceAggregateArgs>): Prisma.PrismaPromise<GetUserPreferenceAggregateType<T>>

    /**
     * Group by UserPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: UserPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPreference model
   */
  readonly fields: UserPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPreference model
   */ 
  interface UserPreferenceFieldRefs {
    readonly id: FieldRef<"UserPreference", 'String'>
    readonly userId: FieldRef<"UserPreference", 'String'>
    readonly key: FieldRef<"UserPreference", 'String'>
    readonly value: FieldRef<"UserPreference", 'String'>
    readonly createdAt: FieldRef<"UserPreference", 'DateTime'>
    readonly updatedAt: FieldRef<"UserPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserPreference findUnique
   */
  export type UserPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference findUniqueOrThrow
   */
  export type UserPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference findFirst
   */
  export type UserPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference findFirstOrThrow
   */
  export type UserPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference findMany
   */
  export type UserPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference create
   */
  export type UserPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPreference.
     */
    data: XOR<UserPreferenceCreateInput, UserPreferenceUncheckedCreateInput>
  }

  /**
   * UserPreference createMany
   */
  export type UserPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferenceCreateManyInput | UserPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPreference createManyAndReturn
   */
  export type UserPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferenceCreateManyInput | UserPreferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPreference update
   */
  export type UserPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPreference.
     */
    data: XOR<UserPreferenceUpdateInput, UserPreferenceUncheckedUpdateInput>
    /**
     * Choose, which UserPreference to update.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference updateMany
   */
  export type UserPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPreferences.
     */
    data: XOR<UserPreferenceUpdateManyMutationInput, UserPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which UserPreferences to update
     */
    where?: UserPreferenceWhereInput
  }

  /**
   * UserPreference upsert
   */
  export type UserPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPreference to update in case it exists.
     */
    where: UserPreferenceWhereUniqueInput
    /**
     * In case the UserPreference found by the `where` argument doesn't exist, create a new UserPreference with this data.
     */
    create: XOR<UserPreferenceCreateInput, UserPreferenceUncheckedCreateInput>
    /**
     * In case the UserPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPreferenceUpdateInput, UserPreferenceUncheckedUpdateInput>
  }

  /**
   * UserPreference delete
   */
  export type UserPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter which UserPreference to delete.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference deleteMany
   */
  export type UserPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to delete
     */
    where?: UserPreferenceWhereInput
  }

  /**
   * UserPreference without action
   */
  export type UserPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
  }


  /**
   * Model SeasonalTrend
   */

  export type AggregateSeasonalTrend = {
    _count: SeasonalTrendCountAggregateOutputType | null
    _avg: SeasonalTrendAvgAggregateOutputType | null
    _sum: SeasonalTrendSumAggregateOutputType | null
    _min: SeasonalTrendMinAggregateOutputType | null
    _max: SeasonalTrendMaxAggregateOutputType | null
  }

  export type SeasonalTrendAvgAggregateOutputType = {
    popularity: number | null
    priority: number | null
  }

  export type SeasonalTrendSumAggregateOutputType = {
    popularity: number | null
    priority: number | null
  }

  export type SeasonalTrendMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    season: string | null
    popularity: number | null
    imageUrl: string | null
    isActive: boolean | null
    priority: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SeasonalTrendMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    season: string | null
    popularity: number | null
    imageUrl: string | null
    isActive: boolean | null
    priority: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SeasonalTrendCountAggregateOutputType = {
    id: number
    title: number
    description: number
    season: number
    popularity: number
    imageUrl: number
    colors: number
    keyPieces: number
    tags: number
    isActive: number
    priority: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SeasonalTrendAvgAggregateInputType = {
    popularity?: true
    priority?: true
  }

  export type SeasonalTrendSumAggregateInputType = {
    popularity?: true
    priority?: true
  }

  export type SeasonalTrendMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    season?: true
    popularity?: true
    imageUrl?: true
    isActive?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SeasonalTrendMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    season?: true
    popularity?: true
    imageUrl?: true
    isActive?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SeasonalTrendCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    season?: true
    popularity?: true
    imageUrl?: true
    colors?: true
    keyPieces?: true
    tags?: true
    isActive?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SeasonalTrendAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeasonalTrend to aggregate.
     */
    where?: SeasonalTrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeasonalTrends to fetch.
     */
    orderBy?: SeasonalTrendOrderByWithRelationInput | SeasonalTrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeasonalTrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeasonalTrends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeasonalTrends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeasonalTrends
    **/
    _count?: true | SeasonalTrendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeasonalTrendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeasonalTrendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeasonalTrendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeasonalTrendMaxAggregateInputType
  }

  export type GetSeasonalTrendAggregateType<T extends SeasonalTrendAggregateArgs> = {
        [P in keyof T & keyof AggregateSeasonalTrend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeasonalTrend[P]>
      : GetScalarType<T[P], AggregateSeasonalTrend[P]>
  }




  export type SeasonalTrendGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeasonalTrendWhereInput
    orderBy?: SeasonalTrendOrderByWithAggregationInput | SeasonalTrendOrderByWithAggregationInput[]
    by: SeasonalTrendScalarFieldEnum[] | SeasonalTrendScalarFieldEnum
    having?: SeasonalTrendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeasonalTrendCountAggregateInputType | true
    _avg?: SeasonalTrendAvgAggregateInputType
    _sum?: SeasonalTrendSumAggregateInputType
    _min?: SeasonalTrendMinAggregateInputType
    _max?: SeasonalTrendMaxAggregateInputType
  }

  export type SeasonalTrendGroupByOutputType = {
    id: string
    title: string
    description: string
    season: string
    popularity: number
    imageUrl: string
    colors: string[]
    keyPieces: string[]
    tags: string[]
    isActive: boolean
    priority: number
    createdAt: Date
    updatedAt: Date
    _count: SeasonalTrendCountAggregateOutputType | null
    _avg: SeasonalTrendAvgAggregateOutputType | null
    _sum: SeasonalTrendSumAggregateOutputType | null
    _min: SeasonalTrendMinAggregateOutputType | null
    _max: SeasonalTrendMaxAggregateOutputType | null
  }

  type GetSeasonalTrendGroupByPayload<T extends SeasonalTrendGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeasonalTrendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeasonalTrendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeasonalTrendGroupByOutputType[P]>
            : GetScalarType<T[P], SeasonalTrendGroupByOutputType[P]>
        }
      >
    >


  export type SeasonalTrendSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    season?: boolean
    popularity?: boolean
    imageUrl?: boolean
    colors?: boolean
    keyPieces?: boolean
    tags?: boolean
    isActive?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    products?: boolean | SeasonalTrend$productsArgs<ExtArgs>
    _count?: boolean | SeasonalTrendCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seasonalTrend"]>

  export type SeasonalTrendSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    season?: boolean
    popularity?: boolean
    imageUrl?: boolean
    colors?: boolean
    keyPieces?: boolean
    tags?: boolean
    isActive?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["seasonalTrend"]>

  export type SeasonalTrendSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    season?: boolean
    popularity?: boolean
    imageUrl?: boolean
    colors?: boolean
    keyPieces?: boolean
    tags?: boolean
    isActive?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SeasonalTrendInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | SeasonalTrend$productsArgs<ExtArgs>
    _count?: boolean | SeasonalTrendCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SeasonalTrendIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SeasonalTrendPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SeasonalTrend"
    objects: {
      products: Prisma.$TrendProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      season: string
      popularity: number
      imageUrl: string
      colors: string[]
      keyPieces: string[]
      tags: string[]
      isActive: boolean
      priority: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["seasonalTrend"]>
    composites: {}
  }

  type SeasonalTrendGetPayload<S extends boolean | null | undefined | SeasonalTrendDefaultArgs> = $Result.GetResult<Prisma.$SeasonalTrendPayload, S>

  type SeasonalTrendCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeasonalTrendFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeasonalTrendCountAggregateInputType | true
    }

  export interface SeasonalTrendDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SeasonalTrend'], meta: { name: 'SeasonalTrend' } }
    /**
     * Find zero or one SeasonalTrend that matches the filter.
     * @param {SeasonalTrendFindUniqueArgs} args - Arguments to find a SeasonalTrend
     * @example
     * // Get one SeasonalTrend
     * const seasonalTrend = await prisma.seasonalTrend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeasonalTrendFindUniqueArgs>(args: SelectSubset<T, SeasonalTrendFindUniqueArgs<ExtArgs>>): Prisma__SeasonalTrendClient<$Result.GetResult<Prisma.$SeasonalTrendPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SeasonalTrend that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeasonalTrendFindUniqueOrThrowArgs} args - Arguments to find a SeasonalTrend
     * @example
     * // Get one SeasonalTrend
     * const seasonalTrend = await prisma.seasonalTrend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeasonalTrendFindUniqueOrThrowArgs>(args: SelectSubset<T, SeasonalTrendFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeasonalTrendClient<$Result.GetResult<Prisma.$SeasonalTrendPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SeasonalTrend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonalTrendFindFirstArgs} args - Arguments to find a SeasonalTrend
     * @example
     * // Get one SeasonalTrend
     * const seasonalTrend = await prisma.seasonalTrend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeasonalTrendFindFirstArgs>(args?: SelectSubset<T, SeasonalTrendFindFirstArgs<ExtArgs>>): Prisma__SeasonalTrendClient<$Result.GetResult<Prisma.$SeasonalTrendPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SeasonalTrend that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonalTrendFindFirstOrThrowArgs} args - Arguments to find a SeasonalTrend
     * @example
     * // Get one SeasonalTrend
     * const seasonalTrend = await prisma.seasonalTrend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeasonalTrendFindFirstOrThrowArgs>(args?: SelectSubset<T, SeasonalTrendFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeasonalTrendClient<$Result.GetResult<Prisma.$SeasonalTrendPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SeasonalTrends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonalTrendFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeasonalTrends
     * const seasonalTrends = await prisma.seasonalTrend.findMany()
     * 
     * // Get first 10 SeasonalTrends
     * const seasonalTrends = await prisma.seasonalTrend.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seasonalTrendWithIdOnly = await prisma.seasonalTrend.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SeasonalTrendFindManyArgs>(args?: SelectSubset<T, SeasonalTrendFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeasonalTrendPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SeasonalTrend.
     * @param {SeasonalTrendCreateArgs} args - Arguments to create a SeasonalTrend.
     * @example
     * // Create one SeasonalTrend
     * const SeasonalTrend = await prisma.seasonalTrend.create({
     *   data: {
     *     // ... data to create a SeasonalTrend
     *   }
     * })
     * 
     */
    create<T extends SeasonalTrendCreateArgs>(args: SelectSubset<T, SeasonalTrendCreateArgs<ExtArgs>>): Prisma__SeasonalTrendClient<$Result.GetResult<Prisma.$SeasonalTrendPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SeasonalTrends.
     * @param {SeasonalTrendCreateManyArgs} args - Arguments to create many SeasonalTrends.
     * @example
     * // Create many SeasonalTrends
     * const seasonalTrend = await prisma.seasonalTrend.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeasonalTrendCreateManyArgs>(args?: SelectSubset<T, SeasonalTrendCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SeasonalTrends and returns the data saved in the database.
     * @param {SeasonalTrendCreateManyAndReturnArgs} args - Arguments to create many SeasonalTrends.
     * @example
     * // Create many SeasonalTrends
     * const seasonalTrend = await prisma.seasonalTrend.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SeasonalTrends and only return the `id`
     * const seasonalTrendWithIdOnly = await prisma.seasonalTrend.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeasonalTrendCreateManyAndReturnArgs>(args?: SelectSubset<T, SeasonalTrendCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeasonalTrendPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SeasonalTrend.
     * @param {SeasonalTrendDeleteArgs} args - Arguments to delete one SeasonalTrend.
     * @example
     * // Delete one SeasonalTrend
     * const SeasonalTrend = await prisma.seasonalTrend.delete({
     *   where: {
     *     // ... filter to delete one SeasonalTrend
     *   }
     * })
     * 
     */
    delete<T extends SeasonalTrendDeleteArgs>(args: SelectSubset<T, SeasonalTrendDeleteArgs<ExtArgs>>): Prisma__SeasonalTrendClient<$Result.GetResult<Prisma.$SeasonalTrendPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SeasonalTrend.
     * @param {SeasonalTrendUpdateArgs} args - Arguments to update one SeasonalTrend.
     * @example
     * // Update one SeasonalTrend
     * const seasonalTrend = await prisma.seasonalTrend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeasonalTrendUpdateArgs>(args: SelectSubset<T, SeasonalTrendUpdateArgs<ExtArgs>>): Prisma__SeasonalTrendClient<$Result.GetResult<Prisma.$SeasonalTrendPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SeasonalTrends.
     * @param {SeasonalTrendDeleteManyArgs} args - Arguments to filter SeasonalTrends to delete.
     * @example
     * // Delete a few SeasonalTrends
     * const { count } = await prisma.seasonalTrend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeasonalTrendDeleteManyArgs>(args?: SelectSubset<T, SeasonalTrendDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeasonalTrends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonalTrendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeasonalTrends
     * const seasonalTrend = await prisma.seasonalTrend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeasonalTrendUpdateManyArgs>(args: SelectSubset<T, SeasonalTrendUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SeasonalTrend.
     * @param {SeasonalTrendUpsertArgs} args - Arguments to update or create a SeasonalTrend.
     * @example
     * // Update or create a SeasonalTrend
     * const seasonalTrend = await prisma.seasonalTrend.upsert({
     *   create: {
     *     // ... data to create a SeasonalTrend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeasonalTrend we want to update
     *   }
     * })
     */
    upsert<T extends SeasonalTrendUpsertArgs>(args: SelectSubset<T, SeasonalTrendUpsertArgs<ExtArgs>>): Prisma__SeasonalTrendClient<$Result.GetResult<Prisma.$SeasonalTrendPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SeasonalTrends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonalTrendCountArgs} args - Arguments to filter SeasonalTrends to count.
     * @example
     * // Count the number of SeasonalTrends
     * const count = await prisma.seasonalTrend.count({
     *   where: {
     *     // ... the filter for the SeasonalTrends we want to count
     *   }
     * })
    **/
    count<T extends SeasonalTrendCountArgs>(
      args?: Subset<T, SeasonalTrendCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeasonalTrendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeasonalTrend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonalTrendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeasonalTrendAggregateArgs>(args: Subset<T, SeasonalTrendAggregateArgs>): Prisma.PrismaPromise<GetSeasonalTrendAggregateType<T>>

    /**
     * Group by SeasonalTrend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonalTrendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeasonalTrendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeasonalTrendGroupByArgs['orderBy'] }
        : { orderBy?: SeasonalTrendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeasonalTrendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeasonalTrendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SeasonalTrend model
   */
  readonly fields: SeasonalTrendFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SeasonalTrend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeasonalTrendClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends SeasonalTrend$productsArgs<ExtArgs> = {}>(args?: Subset<T, SeasonalTrend$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendProductPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SeasonalTrend model
   */ 
  interface SeasonalTrendFieldRefs {
    readonly id: FieldRef<"SeasonalTrend", 'String'>
    readonly title: FieldRef<"SeasonalTrend", 'String'>
    readonly description: FieldRef<"SeasonalTrend", 'String'>
    readonly season: FieldRef<"SeasonalTrend", 'String'>
    readonly popularity: FieldRef<"SeasonalTrend", 'Int'>
    readonly imageUrl: FieldRef<"SeasonalTrend", 'String'>
    readonly colors: FieldRef<"SeasonalTrend", 'String[]'>
    readonly keyPieces: FieldRef<"SeasonalTrend", 'String[]'>
    readonly tags: FieldRef<"SeasonalTrend", 'String[]'>
    readonly isActive: FieldRef<"SeasonalTrend", 'Boolean'>
    readonly priority: FieldRef<"SeasonalTrend", 'Int'>
    readonly createdAt: FieldRef<"SeasonalTrend", 'DateTime'>
    readonly updatedAt: FieldRef<"SeasonalTrend", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SeasonalTrend findUnique
   */
  export type SeasonalTrendFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrend
     */
    select?: SeasonalTrendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonalTrendInclude<ExtArgs> | null
    /**
     * Filter, which SeasonalTrend to fetch.
     */
    where: SeasonalTrendWhereUniqueInput
  }

  /**
   * SeasonalTrend findUniqueOrThrow
   */
  export type SeasonalTrendFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrend
     */
    select?: SeasonalTrendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonalTrendInclude<ExtArgs> | null
    /**
     * Filter, which SeasonalTrend to fetch.
     */
    where: SeasonalTrendWhereUniqueInput
  }

  /**
   * SeasonalTrend findFirst
   */
  export type SeasonalTrendFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrend
     */
    select?: SeasonalTrendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonalTrendInclude<ExtArgs> | null
    /**
     * Filter, which SeasonalTrend to fetch.
     */
    where?: SeasonalTrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeasonalTrends to fetch.
     */
    orderBy?: SeasonalTrendOrderByWithRelationInput | SeasonalTrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeasonalTrends.
     */
    cursor?: SeasonalTrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeasonalTrends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeasonalTrends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeasonalTrends.
     */
    distinct?: SeasonalTrendScalarFieldEnum | SeasonalTrendScalarFieldEnum[]
  }

  /**
   * SeasonalTrend findFirstOrThrow
   */
  export type SeasonalTrendFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrend
     */
    select?: SeasonalTrendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonalTrendInclude<ExtArgs> | null
    /**
     * Filter, which SeasonalTrend to fetch.
     */
    where?: SeasonalTrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeasonalTrends to fetch.
     */
    orderBy?: SeasonalTrendOrderByWithRelationInput | SeasonalTrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeasonalTrends.
     */
    cursor?: SeasonalTrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeasonalTrends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeasonalTrends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeasonalTrends.
     */
    distinct?: SeasonalTrendScalarFieldEnum | SeasonalTrendScalarFieldEnum[]
  }

  /**
   * SeasonalTrend findMany
   */
  export type SeasonalTrendFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrend
     */
    select?: SeasonalTrendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonalTrendInclude<ExtArgs> | null
    /**
     * Filter, which SeasonalTrends to fetch.
     */
    where?: SeasonalTrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeasonalTrends to fetch.
     */
    orderBy?: SeasonalTrendOrderByWithRelationInput | SeasonalTrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeasonalTrends.
     */
    cursor?: SeasonalTrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeasonalTrends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeasonalTrends.
     */
    skip?: number
    distinct?: SeasonalTrendScalarFieldEnum | SeasonalTrendScalarFieldEnum[]
  }

  /**
   * SeasonalTrend create
   */
  export type SeasonalTrendCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrend
     */
    select?: SeasonalTrendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonalTrendInclude<ExtArgs> | null
    /**
     * The data needed to create a SeasonalTrend.
     */
    data: XOR<SeasonalTrendCreateInput, SeasonalTrendUncheckedCreateInput>
  }

  /**
   * SeasonalTrend createMany
   */
  export type SeasonalTrendCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SeasonalTrends.
     */
    data: SeasonalTrendCreateManyInput | SeasonalTrendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeasonalTrend createManyAndReturn
   */
  export type SeasonalTrendCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrend
     */
    select?: SeasonalTrendSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SeasonalTrends.
     */
    data: SeasonalTrendCreateManyInput | SeasonalTrendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeasonalTrend update
   */
  export type SeasonalTrendUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrend
     */
    select?: SeasonalTrendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonalTrendInclude<ExtArgs> | null
    /**
     * The data needed to update a SeasonalTrend.
     */
    data: XOR<SeasonalTrendUpdateInput, SeasonalTrendUncheckedUpdateInput>
    /**
     * Choose, which SeasonalTrend to update.
     */
    where: SeasonalTrendWhereUniqueInput
  }

  /**
   * SeasonalTrend updateMany
   */
  export type SeasonalTrendUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SeasonalTrends.
     */
    data: XOR<SeasonalTrendUpdateManyMutationInput, SeasonalTrendUncheckedUpdateManyInput>
    /**
     * Filter which SeasonalTrends to update
     */
    where?: SeasonalTrendWhereInput
  }

  /**
   * SeasonalTrend upsert
   */
  export type SeasonalTrendUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrend
     */
    select?: SeasonalTrendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonalTrendInclude<ExtArgs> | null
    /**
     * The filter to search for the SeasonalTrend to update in case it exists.
     */
    where: SeasonalTrendWhereUniqueInput
    /**
     * In case the SeasonalTrend found by the `where` argument doesn't exist, create a new SeasonalTrend with this data.
     */
    create: XOR<SeasonalTrendCreateInput, SeasonalTrendUncheckedCreateInput>
    /**
     * In case the SeasonalTrend was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeasonalTrendUpdateInput, SeasonalTrendUncheckedUpdateInput>
  }

  /**
   * SeasonalTrend delete
   */
  export type SeasonalTrendDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrend
     */
    select?: SeasonalTrendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonalTrendInclude<ExtArgs> | null
    /**
     * Filter which SeasonalTrend to delete.
     */
    where: SeasonalTrendWhereUniqueInput
  }

  /**
   * SeasonalTrend deleteMany
   */
  export type SeasonalTrendDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeasonalTrends to delete
     */
    where?: SeasonalTrendWhereInput
  }

  /**
   * SeasonalTrend.products
   */
  export type SeasonalTrend$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductInclude<ExtArgs> | null
    where?: TrendProductWhereInput
    orderBy?: TrendProductOrderByWithRelationInput | TrendProductOrderByWithRelationInput[]
    cursor?: TrendProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrendProductScalarFieldEnum | TrendProductScalarFieldEnum[]
  }

  /**
   * SeasonalTrend without action
   */
  export type SeasonalTrendDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonalTrend
     */
    select?: SeasonalTrendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonalTrendInclude<ExtArgs> | null
  }


  /**
   * Model TrendProduct
   */

  export type AggregateTrendProduct = {
    _count: TrendProductCountAggregateOutputType | null
    _avg: TrendProductAvgAggregateOutputType | null
    _sum: TrendProductSumAggregateOutputType | null
    _min: TrendProductMinAggregateOutputType | null
    _max: TrendProductMaxAggregateOutputType | null
  }

  export type TrendProductAvgAggregateOutputType = {
    price: number | null
    originalPrice: number | null
    rating: number | null
  }

  export type TrendProductSumAggregateOutputType = {
    price: number | null
    originalPrice: number | null
    rating: number | null
  }

  export type TrendProductMinAggregateOutputType = {
    id: string | null
    trendId: string | null
    productId: string | null
    name: string | null
    brand: string | null
    price: number | null
    originalPrice: number | null
    currency: string | null
    imageUrl: string | null
    productUrl: string | null
    category: $Enums.ProductCategory | null
    rating: number | null
    inStock: boolean | null
    featured: boolean | null
    createdAt: Date | null
  }

  export type TrendProductMaxAggregateOutputType = {
    id: string | null
    trendId: string | null
    productId: string | null
    name: string | null
    brand: string | null
    price: number | null
    originalPrice: number | null
    currency: string | null
    imageUrl: string | null
    productUrl: string | null
    category: $Enums.ProductCategory | null
    rating: number | null
    inStock: boolean | null
    featured: boolean | null
    createdAt: Date | null
  }

  export type TrendProductCountAggregateOutputType = {
    id: number
    trendId: number
    productId: number
    name: number
    brand: number
    price: number
    originalPrice: number
    currency: number
    imageUrl: number
    productUrl: number
    category: number
    rating: number
    inStock: number
    featured: number
    createdAt: number
    _all: number
  }


  export type TrendProductAvgAggregateInputType = {
    price?: true
    originalPrice?: true
    rating?: true
  }

  export type TrendProductSumAggregateInputType = {
    price?: true
    originalPrice?: true
    rating?: true
  }

  export type TrendProductMinAggregateInputType = {
    id?: true
    trendId?: true
    productId?: true
    name?: true
    brand?: true
    price?: true
    originalPrice?: true
    currency?: true
    imageUrl?: true
    productUrl?: true
    category?: true
    rating?: true
    inStock?: true
    featured?: true
    createdAt?: true
  }

  export type TrendProductMaxAggregateInputType = {
    id?: true
    trendId?: true
    productId?: true
    name?: true
    brand?: true
    price?: true
    originalPrice?: true
    currency?: true
    imageUrl?: true
    productUrl?: true
    category?: true
    rating?: true
    inStock?: true
    featured?: true
    createdAt?: true
  }

  export type TrendProductCountAggregateInputType = {
    id?: true
    trendId?: true
    productId?: true
    name?: true
    brand?: true
    price?: true
    originalPrice?: true
    currency?: true
    imageUrl?: true
    productUrl?: true
    category?: true
    rating?: true
    inStock?: true
    featured?: true
    createdAt?: true
    _all?: true
  }

  export type TrendProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrendProduct to aggregate.
     */
    where?: TrendProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendProducts to fetch.
     */
    orderBy?: TrendProductOrderByWithRelationInput | TrendProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrendProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrendProducts
    **/
    _count?: true | TrendProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrendProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrendProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrendProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrendProductMaxAggregateInputType
  }

  export type GetTrendProductAggregateType<T extends TrendProductAggregateArgs> = {
        [P in keyof T & keyof AggregateTrendProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrendProduct[P]>
      : GetScalarType<T[P], AggregateTrendProduct[P]>
  }




  export type TrendProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrendProductWhereInput
    orderBy?: TrendProductOrderByWithAggregationInput | TrendProductOrderByWithAggregationInput[]
    by: TrendProductScalarFieldEnum[] | TrendProductScalarFieldEnum
    having?: TrendProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrendProductCountAggregateInputType | true
    _avg?: TrendProductAvgAggregateInputType
    _sum?: TrendProductSumAggregateInputType
    _min?: TrendProductMinAggregateInputType
    _max?: TrendProductMaxAggregateInputType
  }

  export type TrendProductGroupByOutputType = {
    id: string
    trendId: string
    productId: string
    name: string
    brand: string
    price: number
    originalPrice: number | null
    currency: string
    imageUrl: string
    productUrl: string
    category: $Enums.ProductCategory
    rating: number | null
    inStock: boolean
    featured: boolean
    createdAt: Date
    _count: TrendProductCountAggregateOutputType | null
    _avg: TrendProductAvgAggregateOutputType | null
    _sum: TrendProductSumAggregateOutputType | null
    _min: TrendProductMinAggregateOutputType | null
    _max: TrendProductMaxAggregateOutputType | null
  }

  type GetTrendProductGroupByPayload<T extends TrendProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrendProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrendProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrendProductGroupByOutputType[P]>
            : GetScalarType<T[P], TrendProductGroupByOutputType[P]>
        }
      >
    >


  export type TrendProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    trendId?: boolean
    productId?: boolean
    name?: boolean
    brand?: boolean
    price?: boolean
    originalPrice?: boolean
    currency?: boolean
    imageUrl?: boolean
    productUrl?: boolean
    category?: boolean
    rating?: boolean
    inStock?: boolean
    featured?: boolean
    createdAt?: boolean
    trend?: boolean | SeasonalTrendDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trendProduct"]>

  export type TrendProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    trendId?: boolean
    productId?: boolean
    name?: boolean
    brand?: boolean
    price?: boolean
    originalPrice?: boolean
    currency?: boolean
    imageUrl?: boolean
    productUrl?: boolean
    category?: boolean
    rating?: boolean
    inStock?: boolean
    featured?: boolean
    createdAt?: boolean
    trend?: boolean | SeasonalTrendDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trendProduct"]>

  export type TrendProductSelectScalar = {
    id?: boolean
    trendId?: boolean
    productId?: boolean
    name?: boolean
    brand?: boolean
    price?: boolean
    originalPrice?: boolean
    currency?: boolean
    imageUrl?: boolean
    productUrl?: boolean
    category?: boolean
    rating?: boolean
    inStock?: boolean
    featured?: boolean
    createdAt?: boolean
  }

  export type TrendProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trend?: boolean | SeasonalTrendDefaultArgs<ExtArgs>
  }
  export type TrendProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trend?: boolean | SeasonalTrendDefaultArgs<ExtArgs>
  }

  export type $TrendProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrendProduct"
    objects: {
      trend: Prisma.$SeasonalTrendPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      trendId: string
      productId: string
      name: string
      brand: string
      price: number
      originalPrice: number | null
      currency: string
      imageUrl: string
      productUrl: string
      category: $Enums.ProductCategory
      rating: number | null
      inStock: boolean
      featured: boolean
      createdAt: Date
    }, ExtArgs["result"]["trendProduct"]>
    composites: {}
  }

  type TrendProductGetPayload<S extends boolean | null | undefined | TrendProductDefaultArgs> = $Result.GetResult<Prisma.$TrendProductPayload, S>

  type TrendProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TrendProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TrendProductCountAggregateInputType | true
    }

  export interface TrendProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrendProduct'], meta: { name: 'TrendProduct' } }
    /**
     * Find zero or one TrendProduct that matches the filter.
     * @param {TrendProductFindUniqueArgs} args - Arguments to find a TrendProduct
     * @example
     * // Get one TrendProduct
     * const trendProduct = await prisma.trendProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrendProductFindUniqueArgs>(args: SelectSubset<T, TrendProductFindUniqueArgs<ExtArgs>>): Prisma__TrendProductClient<$Result.GetResult<Prisma.$TrendProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TrendProduct that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TrendProductFindUniqueOrThrowArgs} args - Arguments to find a TrendProduct
     * @example
     * // Get one TrendProduct
     * const trendProduct = await prisma.trendProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrendProductFindUniqueOrThrowArgs>(args: SelectSubset<T, TrendProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrendProductClient<$Result.GetResult<Prisma.$TrendProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TrendProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendProductFindFirstArgs} args - Arguments to find a TrendProduct
     * @example
     * // Get one TrendProduct
     * const trendProduct = await prisma.trendProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrendProductFindFirstArgs>(args?: SelectSubset<T, TrendProductFindFirstArgs<ExtArgs>>): Prisma__TrendProductClient<$Result.GetResult<Prisma.$TrendProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TrendProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendProductFindFirstOrThrowArgs} args - Arguments to find a TrendProduct
     * @example
     * // Get one TrendProduct
     * const trendProduct = await prisma.trendProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrendProductFindFirstOrThrowArgs>(args?: SelectSubset<T, TrendProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrendProductClient<$Result.GetResult<Prisma.$TrendProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TrendProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrendProducts
     * const trendProducts = await prisma.trendProduct.findMany()
     * 
     * // Get first 10 TrendProducts
     * const trendProducts = await prisma.trendProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trendProductWithIdOnly = await prisma.trendProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrendProductFindManyArgs>(args?: SelectSubset<T, TrendProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TrendProduct.
     * @param {TrendProductCreateArgs} args - Arguments to create a TrendProduct.
     * @example
     * // Create one TrendProduct
     * const TrendProduct = await prisma.trendProduct.create({
     *   data: {
     *     // ... data to create a TrendProduct
     *   }
     * })
     * 
     */
    create<T extends TrendProductCreateArgs>(args: SelectSubset<T, TrendProductCreateArgs<ExtArgs>>): Prisma__TrendProductClient<$Result.GetResult<Prisma.$TrendProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TrendProducts.
     * @param {TrendProductCreateManyArgs} args - Arguments to create many TrendProducts.
     * @example
     * // Create many TrendProducts
     * const trendProduct = await prisma.trendProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrendProductCreateManyArgs>(args?: SelectSubset<T, TrendProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrendProducts and returns the data saved in the database.
     * @param {TrendProductCreateManyAndReturnArgs} args - Arguments to create many TrendProducts.
     * @example
     * // Create many TrendProducts
     * const trendProduct = await prisma.trendProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrendProducts and only return the `id`
     * const trendProductWithIdOnly = await prisma.trendProduct.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrendProductCreateManyAndReturnArgs>(args?: SelectSubset<T, TrendProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendProductPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TrendProduct.
     * @param {TrendProductDeleteArgs} args - Arguments to delete one TrendProduct.
     * @example
     * // Delete one TrendProduct
     * const TrendProduct = await prisma.trendProduct.delete({
     *   where: {
     *     // ... filter to delete one TrendProduct
     *   }
     * })
     * 
     */
    delete<T extends TrendProductDeleteArgs>(args: SelectSubset<T, TrendProductDeleteArgs<ExtArgs>>): Prisma__TrendProductClient<$Result.GetResult<Prisma.$TrendProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TrendProduct.
     * @param {TrendProductUpdateArgs} args - Arguments to update one TrendProduct.
     * @example
     * // Update one TrendProduct
     * const trendProduct = await prisma.trendProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrendProductUpdateArgs>(args: SelectSubset<T, TrendProductUpdateArgs<ExtArgs>>): Prisma__TrendProductClient<$Result.GetResult<Prisma.$TrendProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TrendProducts.
     * @param {TrendProductDeleteManyArgs} args - Arguments to filter TrendProducts to delete.
     * @example
     * // Delete a few TrendProducts
     * const { count } = await prisma.trendProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrendProductDeleteManyArgs>(args?: SelectSubset<T, TrendProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrendProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrendProducts
     * const trendProduct = await prisma.trendProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrendProductUpdateManyArgs>(args: SelectSubset<T, TrendProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TrendProduct.
     * @param {TrendProductUpsertArgs} args - Arguments to update or create a TrendProduct.
     * @example
     * // Update or create a TrendProduct
     * const trendProduct = await prisma.trendProduct.upsert({
     *   create: {
     *     // ... data to create a TrendProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrendProduct we want to update
     *   }
     * })
     */
    upsert<T extends TrendProductUpsertArgs>(args: SelectSubset<T, TrendProductUpsertArgs<ExtArgs>>): Prisma__TrendProductClient<$Result.GetResult<Prisma.$TrendProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TrendProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendProductCountArgs} args - Arguments to filter TrendProducts to count.
     * @example
     * // Count the number of TrendProducts
     * const count = await prisma.trendProduct.count({
     *   where: {
     *     // ... the filter for the TrendProducts we want to count
     *   }
     * })
    **/
    count<T extends TrendProductCountArgs>(
      args?: Subset<T, TrendProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrendProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrendProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrendProductAggregateArgs>(args: Subset<T, TrendProductAggregateArgs>): Prisma.PrismaPromise<GetTrendProductAggregateType<T>>

    /**
     * Group by TrendProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrendProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrendProductGroupByArgs['orderBy'] }
        : { orderBy?: TrendProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrendProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrendProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrendProduct model
   */
  readonly fields: TrendProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrendProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrendProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trend<T extends SeasonalTrendDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeasonalTrendDefaultArgs<ExtArgs>>): Prisma__SeasonalTrendClient<$Result.GetResult<Prisma.$SeasonalTrendPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrendProduct model
   */ 
  interface TrendProductFieldRefs {
    readonly id: FieldRef<"TrendProduct", 'String'>
    readonly trendId: FieldRef<"TrendProduct", 'String'>
    readonly productId: FieldRef<"TrendProduct", 'String'>
    readonly name: FieldRef<"TrendProduct", 'String'>
    readonly brand: FieldRef<"TrendProduct", 'String'>
    readonly price: FieldRef<"TrendProduct", 'Float'>
    readonly originalPrice: FieldRef<"TrendProduct", 'Float'>
    readonly currency: FieldRef<"TrendProduct", 'String'>
    readonly imageUrl: FieldRef<"TrendProduct", 'String'>
    readonly productUrl: FieldRef<"TrendProduct", 'String'>
    readonly category: FieldRef<"TrendProduct", 'ProductCategory'>
    readonly rating: FieldRef<"TrendProduct", 'Float'>
    readonly inStock: FieldRef<"TrendProduct", 'Boolean'>
    readonly featured: FieldRef<"TrendProduct", 'Boolean'>
    readonly createdAt: FieldRef<"TrendProduct", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TrendProduct findUnique
   */
  export type TrendProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductInclude<ExtArgs> | null
    /**
     * Filter, which TrendProduct to fetch.
     */
    where: TrendProductWhereUniqueInput
  }

  /**
   * TrendProduct findUniqueOrThrow
   */
  export type TrendProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductInclude<ExtArgs> | null
    /**
     * Filter, which TrendProduct to fetch.
     */
    where: TrendProductWhereUniqueInput
  }

  /**
   * TrendProduct findFirst
   */
  export type TrendProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductInclude<ExtArgs> | null
    /**
     * Filter, which TrendProduct to fetch.
     */
    where?: TrendProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendProducts to fetch.
     */
    orderBy?: TrendProductOrderByWithRelationInput | TrendProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrendProducts.
     */
    cursor?: TrendProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrendProducts.
     */
    distinct?: TrendProductScalarFieldEnum | TrendProductScalarFieldEnum[]
  }

  /**
   * TrendProduct findFirstOrThrow
   */
  export type TrendProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductInclude<ExtArgs> | null
    /**
     * Filter, which TrendProduct to fetch.
     */
    where?: TrendProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendProducts to fetch.
     */
    orderBy?: TrendProductOrderByWithRelationInput | TrendProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrendProducts.
     */
    cursor?: TrendProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrendProducts.
     */
    distinct?: TrendProductScalarFieldEnum | TrendProductScalarFieldEnum[]
  }

  /**
   * TrendProduct findMany
   */
  export type TrendProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductInclude<ExtArgs> | null
    /**
     * Filter, which TrendProducts to fetch.
     */
    where?: TrendProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendProducts to fetch.
     */
    orderBy?: TrendProductOrderByWithRelationInput | TrendProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrendProducts.
     */
    cursor?: TrendProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendProducts.
     */
    skip?: number
    distinct?: TrendProductScalarFieldEnum | TrendProductScalarFieldEnum[]
  }

  /**
   * TrendProduct create
   */
  export type TrendProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductInclude<ExtArgs> | null
    /**
     * The data needed to create a TrendProduct.
     */
    data: XOR<TrendProductCreateInput, TrendProductUncheckedCreateInput>
  }

  /**
   * TrendProduct createMany
   */
  export type TrendProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrendProducts.
     */
    data: TrendProductCreateManyInput | TrendProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrendProduct createManyAndReturn
   */
  export type TrendProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TrendProducts.
     */
    data: TrendProductCreateManyInput | TrendProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrendProduct update
   */
  export type TrendProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductInclude<ExtArgs> | null
    /**
     * The data needed to update a TrendProduct.
     */
    data: XOR<TrendProductUpdateInput, TrendProductUncheckedUpdateInput>
    /**
     * Choose, which TrendProduct to update.
     */
    where: TrendProductWhereUniqueInput
  }

  /**
   * TrendProduct updateMany
   */
  export type TrendProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrendProducts.
     */
    data: XOR<TrendProductUpdateManyMutationInput, TrendProductUncheckedUpdateManyInput>
    /**
     * Filter which TrendProducts to update
     */
    where?: TrendProductWhereInput
  }

  /**
   * TrendProduct upsert
   */
  export type TrendProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductInclude<ExtArgs> | null
    /**
     * The filter to search for the TrendProduct to update in case it exists.
     */
    where: TrendProductWhereUniqueInput
    /**
     * In case the TrendProduct found by the `where` argument doesn't exist, create a new TrendProduct with this data.
     */
    create: XOR<TrendProductCreateInput, TrendProductUncheckedCreateInput>
    /**
     * In case the TrendProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrendProductUpdateInput, TrendProductUncheckedUpdateInput>
  }

  /**
   * TrendProduct delete
   */
  export type TrendProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductInclude<ExtArgs> | null
    /**
     * Filter which TrendProduct to delete.
     */
    where: TrendProductWhereUniqueInput
  }

  /**
   * TrendProduct deleteMany
   */
  export type TrendProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrendProducts to delete
     */
    where?: TrendProductWhereInput
  }

  /**
   * TrendProduct without action
   */
  export type TrendProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendProduct
     */
    select?: TrendProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrendProductInclude<ExtArgs> | null
  }


  /**
   * Model PhotoAnalysis
   */

  export type AggregatePhotoAnalysis = {
    _count: PhotoAnalysisCountAggregateOutputType | null
    _avg: PhotoAnalysisAvgAggregateOutputType | null
    _sum: PhotoAnalysisSumAggregateOutputType | null
    _min: PhotoAnalysisMinAggregateOutputType | null
    _max: PhotoAnalysisMaxAggregateOutputType | null
  }

  export type PhotoAnalysisAvgAggregateOutputType = {
    confidence: number | null
  }

  export type PhotoAnalysisSumAggregateOutputType = {
    confidence: number | null
  }

  export type PhotoAnalysisMinAggregateOutputType = {
    id: string | null
    userId: string | null
    photoUrl: string | null
    analysisType: $Enums.AnalysisType | null
    detectedValue: string | null
    confidence: number | null
    metadata: string | null
    createdAt: Date | null
  }

  export type PhotoAnalysisMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    photoUrl: string | null
    analysisType: $Enums.AnalysisType | null
    detectedValue: string | null
    confidence: number | null
    metadata: string | null
    createdAt: Date | null
  }

  export type PhotoAnalysisCountAggregateOutputType = {
    id: number
    userId: number
    photoUrl: number
    analysisType: number
    detectedValue: number
    confidence: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type PhotoAnalysisAvgAggregateInputType = {
    confidence?: true
  }

  export type PhotoAnalysisSumAggregateInputType = {
    confidence?: true
  }

  export type PhotoAnalysisMinAggregateInputType = {
    id?: true
    userId?: true
    photoUrl?: true
    analysisType?: true
    detectedValue?: true
    confidence?: true
    metadata?: true
    createdAt?: true
  }

  export type PhotoAnalysisMaxAggregateInputType = {
    id?: true
    userId?: true
    photoUrl?: true
    analysisType?: true
    detectedValue?: true
    confidence?: true
    metadata?: true
    createdAt?: true
  }

  export type PhotoAnalysisCountAggregateInputType = {
    id?: true
    userId?: true
    photoUrl?: true
    analysisType?: true
    detectedValue?: true
    confidence?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type PhotoAnalysisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhotoAnalysis to aggregate.
     */
    where?: PhotoAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhotoAnalyses to fetch.
     */
    orderBy?: PhotoAnalysisOrderByWithRelationInput | PhotoAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhotoAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhotoAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhotoAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PhotoAnalyses
    **/
    _count?: true | PhotoAnalysisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhotoAnalysisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhotoAnalysisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhotoAnalysisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhotoAnalysisMaxAggregateInputType
  }

  export type GetPhotoAnalysisAggregateType<T extends PhotoAnalysisAggregateArgs> = {
        [P in keyof T & keyof AggregatePhotoAnalysis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhotoAnalysis[P]>
      : GetScalarType<T[P], AggregatePhotoAnalysis[P]>
  }




  export type PhotoAnalysisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoAnalysisWhereInput
    orderBy?: PhotoAnalysisOrderByWithAggregationInput | PhotoAnalysisOrderByWithAggregationInput[]
    by: PhotoAnalysisScalarFieldEnum[] | PhotoAnalysisScalarFieldEnum
    having?: PhotoAnalysisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhotoAnalysisCountAggregateInputType | true
    _avg?: PhotoAnalysisAvgAggregateInputType
    _sum?: PhotoAnalysisSumAggregateInputType
    _min?: PhotoAnalysisMinAggregateInputType
    _max?: PhotoAnalysisMaxAggregateInputType
  }

  export type PhotoAnalysisGroupByOutputType = {
    id: string
    userId: string
    photoUrl: string
    analysisType: $Enums.AnalysisType
    detectedValue: string | null
    confidence: number | null
    metadata: string | null
    createdAt: Date
    _count: PhotoAnalysisCountAggregateOutputType | null
    _avg: PhotoAnalysisAvgAggregateOutputType | null
    _sum: PhotoAnalysisSumAggregateOutputType | null
    _min: PhotoAnalysisMinAggregateOutputType | null
    _max: PhotoAnalysisMaxAggregateOutputType | null
  }

  type GetPhotoAnalysisGroupByPayload<T extends PhotoAnalysisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhotoAnalysisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhotoAnalysisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhotoAnalysisGroupByOutputType[P]>
            : GetScalarType<T[P], PhotoAnalysisGroupByOutputType[P]>
        }
      >
    >


  export type PhotoAnalysisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    photoUrl?: boolean
    analysisType?: boolean
    detectedValue?: boolean
    confidence?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["photoAnalysis"]>

  export type PhotoAnalysisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    photoUrl?: boolean
    analysisType?: boolean
    detectedValue?: boolean
    confidence?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["photoAnalysis"]>

  export type PhotoAnalysisSelectScalar = {
    id?: boolean
    userId?: boolean
    photoUrl?: boolean
    analysisType?: boolean
    detectedValue?: boolean
    confidence?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type PhotoAnalysisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PhotoAnalysisIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PhotoAnalysisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PhotoAnalysis"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      photoUrl: string
      analysisType: $Enums.AnalysisType
      detectedValue: string | null
      confidence: number | null
      metadata: string | null
      createdAt: Date
    }, ExtArgs["result"]["photoAnalysis"]>
    composites: {}
  }

  type PhotoAnalysisGetPayload<S extends boolean | null | undefined | PhotoAnalysisDefaultArgs> = $Result.GetResult<Prisma.$PhotoAnalysisPayload, S>

  type PhotoAnalysisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PhotoAnalysisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PhotoAnalysisCountAggregateInputType | true
    }

  export interface PhotoAnalysisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PhotoAnalysis'], meta: { name: 'PhotoAnalysis' } }
    /**
     * Find zero or one PhotoAnalysis that matches the filter.
     * @param {PhotoAnalysisFindUniqueArgs} args - Arguments to find a PhotoAnalysis
     * @example
     * // Get one PhotoAnalysis
     * const photoAnalysis = await prisma.photoAnalysis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PhotoAnalysisFindUniqueArgs>(args: SelectSubset<T, PhotoAnalysisFindUniqueArgs<ExtArgs>>): Prisma__PhotoAnalysisClient<$Result.GetResult<Prisma.$PhotoAnalysisPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PhotoAnalysis that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PhotoAnalysisFindUniqueOrThrowArgs} args - Arguments to find a PhotoAnalysis
     * @example
     * // Get one PhotoAnalysis
     * const photoAnalysis = await prisma.photoAnalysis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PhotoAnalysisFindUniqueOrThrowArgs>(args: SelectSubset<T, PhotoAnalysisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PhotoAnalysisClient<$Result.GetResult<Prisma.$PhotoAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PhotoAnalysis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoAnalysisFindFirstArgs} args - Arguments to find a PhotoAnalysis
     * @example
     * // Get one PhotoAnalysis
     * const photoAnalysis = await prisma.photoAnalysis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PhotoAnalysisFindFirstArgs>(args?: SelectSubset<T, PhotoAnalysisFindFirstArgs<ExtArgs>>): Prisma__PhotoAnalysisClient<$Result.GetResult<Prisma.$PhotoAnalysisPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PhotoAnalysis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoAnalysisFindFirstOrThrowArgs} args - Arguments to find a PhotoAnalysis
     * @example
     * // Get one PhotoAnalysis
     * const photoAnalysis = await prisma.photoAnalysis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PhotoAnalysisFindFirstOrThrowArgs>(args?: SelectSubset<T, PhotoAnalysisFindFirstOrThrowArgs<ExtArgs>>): Prisma__PhotoAnalysisClient<$Result.GetResult<Prisma.$PhotoAnalysisPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PhotoAnalyses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoAnalysisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PhotoAnalyses
     * const photoAnalyses = await prisma.photoAnalysis.findMany()
     * 
     * // Get first 10 PhotoAnalyses
     * const photoAnalyses = await prisma.photoAnalysis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const photoAnalysisWithIdOnly = await prisma.photoAnalysis.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PhotoAnalysisFindManyArgs>(args?: SelectSubset<T, PhotoAnalysisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoAnalysisPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PhotoAnalysis.
     * @param {PhotoAnalysisCreateArgs} args - Arguments to create a PhotoAnalysis.
     * @example
     * // Create one PhotoAnalysis
     * const PhotoAnalysis = await prisma.photoAnalysis.create({
     *   data: {
     *     // ... data to create a PhotoAnalysis
     *   }
     * })
     * 
     */
    create<T extends PhotoAnalysisCreateArgs>(args: SelectSubset<T, PhotoAnalysisCreateArgs<ExtArgs>>): Prisma__PhotoAnalysisClient<$Result.GetResult<Prisma.$PhotoAnalysisPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PhotoAnalyses.
     * @param {PhotoAnalysisCreateManyArgs} args - Arguments to create many PhotoAnalyses.
     * @example
     * // Create many PhotoAnalyses
     * const photoAnalysis = await prisma.photoAnalysis.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PhotoAnalysisCreateManyArgs>(args?: SelectSubset<T, PhotoAnalysisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PhotoAnalyses and returns the data saved in the database.
     * @param {PhotoAnalysisCreateManyAndReturnArgs} args - Arguments to create many PhotoAnalyses.
     * @example
     * // Create many PhotoAnalyses
     * const photoAnalysis = await prisma.photoAnalysis.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PhotoAnalyses and only return the `id`
     * const photoAnalysisWithIdOnly = await prisma.photoAnalysis.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PhotoAnalysisCreateManyAndReturnArgs>(args?: SelectSubset<T, PhotoAnalysisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoAnalysisPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PhotoAnalysis.
     * @param {PhotoAnalysisDeleteArgs} args - Arguments to delete one PhotoAnalysis.
     * @example
     * // Delete one PhotoAnalysis
     * const PhotoAnalysis = await prisma.photoAnalysis.delete({
     *   where: {
     *     // ... filter to delete one PhotoAnalysis
     *   }
     * })
     * 
     */
    delete<T extends PhotoAnalysisDeleteArgs>(args: SelectSubset<T, PhotoAnalysisDeleteArgs<ExtArgs>>): Prisma__PhotoAnalysisClient<$Result.GetResult<Prisma.$PhotoAnalysisPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PhotoAnalysis.
     * @param {PhotoAnalysisUpdateArgs} args - Arguments to update one PhotoAnalysis.
     * @example
     * // Update one PhotoAnalysis
     * const photoAnalysis = await prisma.photoAnalysis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PhotoAnalysisUpdateArgs>(args: SelectSubset<T, PhotoAnalysisUpdateArgs<ExtArgs>>): Prisma__PhotoAnalysisClient<$Result.GetResult<Prisma.$PhotoAnalysisPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PhotoAnalyses.
     * @param {PhotoAnalysisDeleteManyArgs} args - Arguments to filter PhotoAnalyses to delete.
     * @example
     * // Delete a few PhotoAnalyses
     * const { count } = await prisma.photoAnalysis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PhotoAnalysisDeleteManyArgs>(args?: SelectSubset<T, PhotoAnalysisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PhotoAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoAnalysisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PhotoAnalyses
     * const photoAnalysis = await prisma.photoAnalysis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PhotoAnalysisUpdateManyArgs>(args: SelectSubset<T, PhotoAnalysisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PhotoAnalysis.
     * @param {PhotoAnalysisUpsertArgs} args - Arguments to update or create a PhotoAnalysis.
     * @example
     * // Update or create a PhotoAnalysis
     * const photoAnalysis = await prisma.photoAnalysis.upsert({
     *   create: {
     *     // ... data to create a PhotoAnalysis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PhotoAnalysis we want to update
     *   }
     * })
     */
    upsert<T extends PhotoAnalysisUpsertArgs>(args: SelectSubset<T, PhotoAnalysisUpsertArgs<ExtArgs>>): Prisma__PhotoAnalysisClient<$Result.GetResult<Prisma.$PhotoAnalysisPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PhotoAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoAnalysisCountArgs} args - Arguments to filter PhotoAnalyses to count.
     * @example
     * // Count the number of PhotoAnalyses
     * const count = await prisma.photoAnalysis.count({
     *   where: {
     *     // ... the filter for the PhotoAnalyses we want to count
     *   }
     * })
    **/
    count<T extends PhotoAnalysisCountArgs>(
      args?: Subset<T, PhotoAnalysisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhotoAnalysisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PhotoAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoAnalysisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhotoAnalysisAggregateArgs>(args: Subset<T, PhotoAnalysisAggregateArgs>): Prisma.PrismaPromise<GetPhotoAnalysisAggregateType<T>>

    /**
     * Group by PhotoAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoAnalysisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhotoAnalysisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhotoAnalysisGroupByArgs['orderBy'] }
        : { orderBy?: PhotoAnalysisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhotoAnalysisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhotoAnalysisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PhotoAnalysis model
   */
  readonly fields: PhotoAnalysisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PhotoAnalysis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhotoAnalysisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PhotoAnalysis model
   */ 
  interface PhotoAnalysisFieldRefs {
    readonly id: FieldRef<"PhotoAnalysis", 'String'>
    readonly userId: FieldRef<"PhotoAnalysis", 'String'>
    readonly photoUrl: FieldRef<"PhotoAnalysis", 'String'>
    readonly analysisType: FieldRef<"PhotoAnalysis", 'AnalysisType'>
    readonly detectedValue: FieldRef<"PhotoAnalysis", 'String'>
    readonly confidence: FieldRef<"PhotoAnalysis", 'Float'>
    readonly metadata: FieldRef<"PhotoAnalysis", 'String'>
    readonly createdAt: FieldRef<"PhotoAnalysis", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PhotoAnalysis findUnique
   */
  export type PhotoAnalysisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which PhotoAnalysis to fetch.
     */
    where: PhotoAnalysisWhereUniqueInput
  }

  /**
   * PhotoAnalysis findUniqueOrThrow
   */
  export type PhotoAnalysisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which PhotoAnalysis to fetch.
     */
    where: PhotoAnalysisWhereUniqueInput
  }

  /**
   * PhotoAnalysis findFirst
   */
  export type PhotoAnalysisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which PhotoAnalysis to fetch.
     */
    where?: PhotoAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhotoAnalyses to fetch.
     */
    orderBy?: PhotoAnalysisOrderByWithRelationInput | PhotoAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhotoAnalyses.
     */
    cursor?: PhotoAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhotoAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhotoAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhotoAnalyses.
     */
    distinct?: PhotoAnalysisScalarFieldEnum | PhotoAnalysisScalarFieldEnum[]
  }

  /**
   * PhotoAnalysis findFirstOrThrow
   */
  export type PhotoAnalysisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which PhotoAnalysis to fetch.
     */
    where?: PhotoAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhotoAnalyses to fetch.
     */
    orderBy?: PhotoAnalysisOrderByWithRelationInput | PhotoAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhotoAnalyses.
     */
    cursor?: PhotoAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhotoAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhotoAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhotoAnalyses.
     */
    distinct?: PhotoAnalysisScalarFieldEnum | PhotoAnalysisScalarFieldEnum[]
  }

  /**
   * PhotoAnalysis findMany
   */
  export type PhotoAnalysisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which PhotoAnalyses to fetch.
     */
    where?: PhotoAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhotoAnalyses to fetch.
     */
    orderBy?: PhotoAnalysisOrderByWithRelationInput | PhotoAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PhotoAnalyses.
     */
    cursor?: PhotoAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhotoAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhotoAnalyses.
     */
    skip?: number
    distinct?: PhotoAnalysisScalarFieldEnum | PhotoAnalysisScalarFieldEnum[]
  }

  /**
   * PhotoAnalysis create
   */
  export type PhotoAnalysisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to create a PhotoAnalysis.
     */
    data: XOR<PhotoAnalysisCreateInput, PhotoAnalysisUncheckedCreateInput>
  }

  /**
   * PhotoAnalysis createMany
   */
  export type PhotoAnalysisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PhotoAnalyses.
     */
    data: PhotoAnalysisCreateManyInput | PhotoAnalysisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PhotoAnalysis createManyAndReturn
   */
  export type PhotoAnalysisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PhotoAnalyses.
     */
    data: PhotoAnalysisCreateManyInput | PhotoAnalysisCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PhotoAnalysis update
   */
  export type PhotoAnalysisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to update a PhotoAnalysis.
     */
    data: XOR<PhotoAnalysisUpdateInput, PhotoAnalysisUncheckedUpdateInput>
    /**
     * Choose, which PhotoAnalysis to update.
     */
    where: PhotoAnalysisWhereUniqueInput
  }

  /**
   * PhotoAnalysis updateMany
   */
  export type PhotoAnalysisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PhotoAnalyses.
     */
    data: XOR<PhotoAnalysisUpdateManyMutationInput, PhotoAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which PhotoAnalyses to update
     */
    where?: PhotoAnalysisWhereInput
  }

  /**
   * PhotoAnalysis upsert
   */
  export type PhotoAnalysisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisInclude<ExtArgs> | null
    /**
     * The filter to search for the PhotoAnalysis to update in case it exists.
     */
    where: PhotoAnalysisWhereUniqueInput
    /**
     * In case the PhotoAnalysis found by the `where` argument doesn't exist, create a new PhotoAnalysis with this data.
     */
    create: XOR<PhotoAnalysisCreateInput, PhotoAnalysisUncheckedCreateInput>
    /**
     * In case the PhotoAnalysis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhotoAnalysisUpdateInput, PhotoAnalysisUncheckedUpdateInput>
  }

  /**
   * PhotoAnalysis delete
   */
  export type PhotoAnalysisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisInclude<ExtArgs> | null
    /**
     * Filter which PhotoAnalysis to delete.
     */
    where: PhotoAnalysisWhereUniqueInput
  }

  /**
   * PhotoAnalysis deleteMany
   */
  export type PhotoAnalysisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhotoAnalyses to delete
     */
    where?: PhotoAnalysisWhereInput
  }

  /**
   * PhotoAnalysis without action
   */
  export type PhotoAnalysisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhotoAnalysis
     */
    select?: PhotoAnalysisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoAnalysisInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    avatar: 'avatar',
    googleId: 'googleId',
    appleId: 'appleId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    gender: 'gender',
    height: 'height',
    weight: 'weight',
    bodyType: 'bodyType',
    faceShape: 'faceShape',
    skinTone: 'skinTone',
    styleType: 'styleType',
    budgetRange: 'budgetRange',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const UserPhotoScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    url: 'url',
    type: 'type',
    isActive: 'isActive',
    publicId: 'publicId',
    createdAt: 'createdAt'
  };

  export type UserPhotoScalarFieldEnum = (typeof UserPhotoScalarFieldEnum)[keyof typeof UserPhotoScalarFieldEnum]


  export const StyleSuggestionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    occasion: 'occasion',
    bodyType: 'bodyType',
    faceShape: 'faceShape',
    skinTone: 'skinTone',
    outfitDesc: 'outfitDesc',
    hairstyle: 'hairstyle',
    accessories: 'accessories',
    skincare: 'skincare',
    colors: 'colors',
    outfitImageUrl: 'outfitImageUrl',
    styleImageUrl: 'styleImageUrl',
    confidence: 'confidence',
    createdAt: 'createdAt'
  };

  export type StyleSuggestionScalarFieldEnum = (typeof StyleSuggestionScalarFieldEnum)[keyof typeof StyleSuggestionScalarFieldEnum]


  export const ProductRecommendationScalarFieldEnum: {
    id: 'id',
    suggestionId: 'suggestionId',
    productId: 'productId',
    name: 'name',
    brand: 'brand',
    price: 'price',
    currency: 'currency',
    imageUrl: 'imageUrl',
    productUrl: 'productUrl',
    platform: 'platform',
    category: 'category',
    rating: 'rating',
    reviewCount: 'reviewCount',
    inStock: 'inStock',
    createdAt: 'createdAt'
  };

  export type ProductRecommendationScalarFieldEnum = (typeof ProductRecommendationScalarFieldEnum)[keyof typeof ProductRecommendationScalarFieldEnum]


  export const FavoriteScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    productId: 'productId',
    name: 'name',
    brand: 'brand',
    imageUrl: 'imageUrl',
    productUrl: 'productUrl',
    platform: 'platform',
    createdAt: 'createdAt'
  };

  export type FavoriteScalarFieldEnum = (typeof FavoriteScalarFieldEnum)[keyof typeof FavoriteScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    suggestionId: 'suggestionId',
    rating: 'rating',
    liked: 'liked',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const UserPreferenceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    key: 'key',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserPreferenceScalarFieldEnum = (typeof UserPreferenceScalarFieldEnum)[keyof typeof UserPreferenceScalarFieldEnum]


  export const SeasonalTrendScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    season: 'season',
    popularity: 'popularity',
    imageUrl: 'imageUrl',
    colors: 'colors',
    keyPieces: 'keyPieces',
    tags: 'tags',
    isActive: 'isActive',
    priority: 'priority',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SeasonalTrendScalarFieldEnum = (typeof SeasonalTrendScalarFieldEnum)[keyof typeof SeasonalTrendScalarFieldEnum]


  export const TrendProductScalarFieldEnum: {
    id: 'id',
    trendId: 'trendId',
    productId: 'productId',
    name: 'name',
    brand: 'brand',
    price: 'price',
    originalPrice: 'originalPrice',
    currency: 'currency',
    imageUrl: 'imageUrl',
    productUrl: 'productUrl',
    category: 'category',
    rating: 'rating',
    inStock: 'inStock',
    featured: 'featured',
    createdAt: 'createdAt'
  };

  export type TrendProductScalarFieldEnum = (typeof TrendProductScalarFieldEnum)[keyof typeof TrendProductScalarFieldEnum]


  export const PhotoAnalysisScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    photoUrl: 'photoUrl',
    analysisType: 'analysisType',
    detectedValue: 'detectedValue',
    confidence: 'confidence',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type PhotoAnalysisScalarFieldEnum = (typeof PhotoAnalysisScalarFieldEnum)[keyof typeof PhotoAnalysisScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'BodyType'
   */
  export type EnumBodyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BodyType'>
    


  /**
   * Reference to a field of type 'BodyType[]'
   */
  export type ListEnumBodyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BodyType[]'>
    


  /**
   * Reference to a field of type 'FaceShape'
   */
  export type EnumFaceShapeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FaceShape'>
    


  /**
   * Reference to a field of type 'FaceShape[]'
   */
  export type ListEnumFaceShapeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FaceShape[]'>
    


  /**
   * Reference to a field of type 'SkinTone'
   */
  export type EnumSkinToneFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkinTone'>
    


  /**
   * Reference to a field of type 'SkinTone[]'
   */
  export type ListEnumSkinToneFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkinTone[]'>
    


  /**
   * Reference to a field of type 'StyleType[]'
   */
  export type ListEnumStyleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StyleType[]'>
    


  /**
   * Reference to a field of type 'StyleType'
   */
  export type EnumStyleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StyleType'>
    


  /**
   * Reference to a field of type 'BudgetRange'
   */
  export type EnumBudgetRangeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BudgetRange'>
    


  /**
   * Reference to a field of type 'BudgetRange[]'
   */
  export type ListEnumBudgetRangeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BudgetRange[]'>
    


  /**
   * Reference to a field of type 'PhotoType'
   */
  export type EnumPhotoTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhotoType'>
    


  /**
   * Reference to a field of type 'PhotoType[]'
   */
  export type ListEnumPhotoTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhotoType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Occasion'
   */
  export type EnumOccasionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Occasion'>
    


  /**
   * Reference to a field of type 'Occasion[]'
   */
  export type ListEnumOccasionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Occasion[]'>
    


  /**
   * Reference to a field of type 'Platform'
   */
  export type EnumPlatformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Platform'>
    


  /**
   * Reference to a field of type 'Platform[]'
   */
  export type ListEnumPlatformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Platform[]'>
    


  /**
   * Reference to a field of type 'ProductCategory'
   */
  export type EnumProductCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductCategory'>
    


  /**
   * Reference to a field of type 'ProductCategory[]'
   */
  export type ListEnumProductCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductCategory[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'AnalysisType'
   */
  export type EnumAnalysisTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnalysisType'>
    


  /**
   * Reference to a field of type 'AnalysisType[]'
   */
  export type ListEnumAnalysisTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnalysisType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    googleId?: StringNullableFilter<"User"> | string | null
    appleId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<UserProfileNullableRelationFilter, UserProfileWhereInput> | null
    photos?: UserPhotoListRelationFilter
    preferences?: UserPreferenceListRelationFilter
    favorites?: FavoriteListRelationFilter
    feedback?: FeedbackListRelationFilter
    photoAnalyses?: PhotoAnalysisListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    appleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: UserProfileOrderByWithRelationInput
    photos?: UserPhotoOrderByRelationAggregateInput
    preferences?: UserPreferenceOrderByRelationAggregateInput
    favorites?: FavoriteOrderByRelationAggregateInput
    feedback?: FeedbackOrderByRelationAggregateInput
    photoAnalyses?: PhotoAnalysisOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    googleId?: string
    appleId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<UserProfileNullableRelationFilter, UserProfileWhereInput> | null
    photos?: UserPhotoListRelationFilter
    preferences?: UserPreferenceListRelationFilter
    favorites?: FavoriteListRelationFilter
    feedback?: FeedbackListRelationFilter
    photoAnalyses?: PhotoAnalysisListRelationFilter
  }, "id" | "email" | "googleId" | "appleId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    appleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    googleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    appleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserProfileWhereInput = {
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    id?: StringFilter<"UserProfile"> | string
    userId?: StringFilter<"UserProfile"> | string
    gender?: EnumGenderFilter<"UserProfile"> | $Enums.Gender
    height?: FloatNullableFilter<"UserProfile"> | number | null
    weight?: FloatNullableFilter<"UserProfile"> | number | null
    bodyType?: EnumBodyTypeNullableFilter<"UserProfile"> | $Enums.BodyType | null
    faceShape?: EnumFaceShapeNullableFilter<"UserProfile"> | $Enums.FaceShape | null
    skinTone?: EnumSkinToneNullableFilter<"UserProfile"> | $Enums.SkinTone | null
    styleType?: EnumStyleTypeNullableListFilter<"UserProfile">
    budgetRange?: EnumBudgetRangeNullableFilter<"UserProfile"> | $Enums.BudgetRange | null
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    gender?: SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    bodyType?: SortOrderInput | SortOrder
    faceShape?: SortOrderInput | SortOrder
    skinTone?: SortOrderInput | SortOrder
    styleType?: SortOrder
    budgetRange?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    gender?: EnumGenderFilter<"UserProfile"> | $Enums.Gender
    height?: FloatNullableFilter<"UserProfile"> | number | null
    weight?: FloatNullableFilter<"UserProfile"> | number | null
    bodyType?: EnumBodyTypeNullableFilter<"UserProfile"> | $Enums.BodyType | null
    faceShape?: EnumFaceShapeNullableFilter<"UserProfile"> | $Enums.FaceShape | null
    skinTone?: EnumSkinToneNullableFilter<"UserProfile"> | $Enums.SkinTone | null
    styleType?: EnumStyleTypeNullableListFilter<"UserProfile">
    budgetRange?: EnumBudgetRangeNullableFilter<"UserProfile"> | $Enums.BudgetRange | null
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    gender?: SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    bodyType?: SortOrderInput | SortOrder
    faceShape?: SortOrderInput | SortOrder
    skinTone?: SortOrderInput | SortOrder
    styleType?: SortOrder
    budgetRange?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _avg?: UserProfileAvgOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
    _sum?: UserProfileSumOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    OR?: UserProfileScalarWhereWithAggregatesInput[]
    NOT?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserProfile"> | string
    userId?: StringWithAggregatesFilter<"UserProfile"> | string
    gender?: EnumGenderWithAggregatesFilter<"UserProfile"> | $Enums.Gender
    height?: FloatNullableWithAggregatesFilter<"UserProfile"> | number | null
    weight?: FloatNullableWithAggregatesFilter<"UserProfile"> | number | null
    bodyType?: EnumBodyTypeNullableWithAggregatesFilter<"UserProfile"> | $Enums.BodyType | null
    faceShape?: EnumFaceShapeNullableWithAggregatesFilter<"UserProfile"> | $Enums.FaceShape | null
    skinTone?: EnumSkinToneNullableWithAggregatesFilter<"UserProfile"> | $Enums.SkinTone | null
    styleType?: EnumStyleTypeNullableListFilter<"UserProfile">
    budgetRange?: EnumBudgetRangeNullableWithAggregatesFilter<"UserProfile"> | $Enums.BudgetRange | null
    createdAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
  }

  export type UserPhotoWhereInput = {
    AND?: UserPhotoWhereInput | UserPhotoWhereInput[]
    OR?: UserPhotoWhereInput[]
    NOT?: UserPhotoWhereInput | UserPhotoWhereInput[]
    id?: StringFilter<"UserPhoto"> | string
    userId?: StringFilter<"UserPhoto"> | string
    url?: StringFilter<"UserPhoto"> | string
    type?: EnumPhotoTypeFilter<"UserPhoto"> | $Enums.PhotoType
    isActive?: BoolFilter<"UserPhoto"> | boolean
    publicId?: StringFilter<"UserPhoto"> | string
    createdAt?: DateTimeFilter<"UserPhoto"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPhotoOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    url?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    publicId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPhotoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserPhotoWhereInput | UserPhotoWhereInput[]
    OR?: UserPhotoWhereInput[]
    NOT?: UserPhotoWhereInput | UserPhotoWhereInput[]
    userId?: StringFilter<"UserPhoto"> | string
    url?: StringFilter<"UserPhoto"> | string
    type?: EnumPhotoTypeFilter<"UserPhoto"> | $Enums.PhotoType
    isActive?: BoolFilter<"UserPhoto"> | boolean
    publicId?: StringFilter<"UserPhoto"> | string
    createdAt?: DateTimeFilter<"UserPhoto"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserPhotoOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    url?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    publicId?: SortOrder
    createdAt?: SortOrder
    _count?: UserPhotoCountOrderByAggregateInput
    _max?: UserPhotoMaxOrderByAggregateInput
    _min?: UserPhotoMinOrderByAggregateInput
  }

  export type UserPhotoScalarWhereWithAggregatesInput = {
    AND?: UserPhotoScalarWhereWithAggregatesInput | UserPhotoScalarWhereWithAggregatesInput[]
    OR?: UserPhotoScalarWhereWithAggregatesInput[]
    NOT?: UserPhotoScalarWhereWithAggregatesInput | UserPhotoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPhoto"> | string
    userId?: StringWithAggregatesFilter<"UserPhoto"> | string
    url?: StringWithAggregatesFilter<"UserPhoto"> | string
    type?: EnumPhotoTypeWithAggregatesFilter<"UserPhoto"> | $Enums.PhotoType
    isActive?: BoolWithAggregatesFilter<"UserPhoto"> | boolean
    publicId?: StringWithAggregatesFilter<"UserPhoto"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserPhoto"> | Date | string
  }

  export type StyleSuggestionWhereInput = {
    AND?: StyleSuggestionWhereInput | StyleSuggestionWhereInput[]
    OR?: StyleSuggestionWhereInput[]
    NOT?: StyleSuggestionWhereInput | StyleSuggestionWhereInput[]
    id?: StringFilter<"StyleSuggestion"> | string
    userId?: StringFilter<"StyleSuggestion"> | string
    occasion?: EnumOccasionFilter<"StyleSuggestion"> | $Enums.Occasion
    bodyType?: EnumBodyTypeNullableFilter<"StyleSuggestion"> | $Enums.BodyType | null
    faceShape?: EnumFaceShapeNullableFilter<"StyleSuggestion"> | $Enums.FaceShape | null
    skinTone?: EnumSkinToneNullableFilter<"StyleSuggestion"> | $Enums.SkinTone | null
    outfitDesc?: StringFilter<"StyleSuggestion"> | string
    hairstyle?: StringNullableFilter<"StyleSuggestion"> | string | null
    accessories?: StringNullableFilter<"StyleSuggestion"> | string | null
    skincare?: StringNullableFilter<"StyleSuggestion"> | string | null
    colors?: StringNullableListFilter<"StyleSuggestion">
    outfitImageUrl?: StringNullableFilter<"StyleSuggestion"> | string | null
    styleImageUrl?: StringNullableFilter<"StyleSuggestion"> | string | null
    confidence?: FloatNullableFilter<"StyleSuggestion"> | number | null
    createdAt?: DateTimeFilter<"StyleSuggestion"> | Date | string
    products?: ProductRecommendationListRelationFilter
    feedback?: FeedbackListRelationFilter
  }

  export type StyleSuggestionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    occasion?: SortOrder
    bodyType?: SortOrderInput | SortOrder
    faceShape?: SortOrderInput | SortOrder
    skinTone?: SortOrderInput | SortOrder
    outfitDesc?: SortOrder
    hairstyle?: SortOrderInput | SortOrder
    accessories?: SortOrderInput | SortOrder
    skincare?: SortOrderInput | SortOrder
    colors?: SortOrder
    outfitImageUrl?: SortOrderInput | SortOrder
    styleImageUrl?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    products?: ProductRecommendationOrderByRelationAggregateInput
    feedback?: FeedbackOrderByRelationAggregateInput
  }

  export type StyleSuggestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StyleSuggestionWhereInput | StyleSuggestionWhereInput[]
    OR?: StyleSuggestionWhereInput[]
    NOT?: StyleSuggestionWhereInput | StyleSuggestionWhereInput[]
    userId?: StringFilter<"StyleSuggestion"> | string
    occasion?: EnumOccasionFilter<"StyleSuggestion"> | $Enums.Occasion
    bodyType?: EnumBodyTypeNullableFilter<"StyleSuggestion"> | $Enums.BodyType | null
    faceShape?: EnumFaceShapeNullableFilter<"StyleSuggestion"> | $Enums.FaceShape | null
    skinTone?: EnumSkinToneNullableFilter<"StyleSuggestion"> | $Enums.SkinTone | null
    outfitDesc?: StringFilter<"StyleSuggestion"> | string
    hairstyle?: StringNullableFilter<"StyleSuggestion"> | string | null
    accessories?: StringNullableFilter<"StyleSuggestion"> | string | null
    skincare?: StringNullableFilter<"StyleSuggestion"> | string | null
    colors?: StringNullableListFilter<"StyleSuggestion">
    outfitImageUrl?: StringNullableFilter<"StyleSuggestion"> | string | null
    styleImageUrl?: StringNullableFilter<"StyleSuggestion"> | string | null
    confidence?: FloatNullableFilter<"StyleSuggestion"> | number | null
    createdAt?: DateTimeFilter<"StyleSuggestion"> | Date | string
    products?: ProductRecommendationListRelationFilter
    feedback?: FeedbackListRelationFilter
  }, "id">

  export type StyleSuggestionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    occasion?: SortOrder
    bodyType?: SortOrderInput | SortOrder
    faceShape?: SortOrderInput | SortOrder
    skinTone?: SortOrderInput | SortOrder
    outfitDesc?: SortOrder
    hairstyle?: SortOrderInput | SortOrder
    accessories?: SortOrderInput | SortOrder
    skincare?: SortOrderInput | SortOrder
    colors?: SortOrder
    outfitImageUrl?: SortOrderInput | SortOrder
    styleImageUrl?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StyleSuggestionCountOrderByAggregateInput
    _avg?: StyleSuggestionAvgOrderByAggregateInput
    _max?: StyleSuggestionMaxOrderByAggregateInput
    _min?: StyleSuggestionMinOrderByAggregateInput
    _sum?: StyleSuggestionSumOrderByAggregateInput
  }

  export type StyleSuggestionScalarWhereWithAggregatesInput = {
    AND?: StyleSuggestionScalarWhereWithAggregatesInput | StyleSuggestionScalarWhereWithAggregatesInput[]
    OR?: StyleSuggestionScalarWhereWithAggregatesInput[]
    NOT?: StyleSuggestionScalarWhereWithAggregatesInput | StyleSuggestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StyleSuggestion"> | string
    userId?: StringWithAggregatesFilter<"StyleSuggestion"> | string
    occasion?: EnumOccasionWithAggregatesFilter<"StyleSuggestion"> | $Enums.Occasion
    bodyType?: EnumBodyTypeNullableWithAggregatesFilter<"StyleSuggestion"> | $Enums.BodyType | null
    faceShape?: EnumFaceShapeNullableWithAggregatesFilter<"StyleSuggestion"> | $Enums.FaceShape | null
    skinTone?: EnumSkinToneNullableWithAggregatesFilter<"StyleSuggestion"> | $Enums.SkinTone | null
    outfitDesc?: StringWithAggregatesFilter<"StyleSuggestion"> | string
    hairstyle?: StringNullableWithAggregatesFilter<"StyleSuggestion"> | string | null
    accessories?: StringNullableWithAggregatesFilter<"StyleSuggestion"> | string | null
    skincare?: StringNullableWithAggregatesFilter<"StyleSuggestion"> | string | null
    colors?: StringNullableListFilter<"StyleSuggestion">
    outfitImageUrl?: StringNullableWithAggregatesFilter<"StyleSuggestion"> | string | null
    styleImageUrl?: StringNullableWithAggregatesFilter<"StyleSuggestion"> | string | null
    confidence?: FloatNullableWithAggregatesFilter<"StyleSuggestion"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"StyleSuggestion"> | Date | string
  }

  export type ProductRecommendationWhereInput = {
    AND?: ProductRecommendationWhereInput | ProductRecommendationWhereInput[]
    OR?: ProductRecommendationWhereInput[]
    NOT?: ProductRecommendationWhereInput | ProductRecommendationWhereInput[]
    id?: StringFilter<"ProductRecommendation"> | string
    suggestionId?: StringFilter<"ProductRecommendation"> | string
    productId?: StringFilter<"ProductRecommendation"> | string
    name?: StringFilter<"ProductRecommendation"> | string
    brand?: StringFilter<"ProductRecommendation"> | string
    price?: FloatFilter<"ProductRecommendation"> | number
    currency?: StringFilter<"ProductRecommendation"> | string
    imageUrl?: StringFilter<"ProductRecommendation"> | string
    productUrl?: StringFilter<"ProductRecommendation"> | string
    platform?: EnumPlatformFilter<"ProductRecommendation"> | $Enums.Platform
    category?: EnumProductCategoryFilter<"ProductRecommendation"> | $Enums.ProductCategory
    rating?: FloatNullableFilter<"ProductRecommendation"> | number | null
    reviewCount?: IntNullableFilter<"ProductRecommendation"> | number | null
    inStock?: BoolFilter<"ProductRecommendation"> | boolean
    createdAt?: DateTimeFilter<"ProductRecommendation"> | Date | string
    suggestion?: XOR<StyleSuggestionRelationFilter, StyleSuggestionWhereInput>
  }

  export type ProductRecommendationOrderByWithRelationInput = {
    id?: SortOrder
    suggestionId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    platform?: SortOrder
    category?: SortOrder
    rating?: SortOrderInput | SortOrder
    reviewCount?: SortOrderInput | SortOrder
    inStock?: SortOrder
    createdAt?: SortOrder
    suggestion?: StyleSuggestionOrderByWithRelationInput
  }

  export type ProductRecommendationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductRecommendationWhereInput | ProductRecommendationWhereInput[]
    OR?: ProductRecommendationWhereInput[]
    NOT?: ProductRecommendationWhereInput | ProductRecommendationWhereInput[]
    suggestionId?: StringFilter<"ProductRecommendation"> | string
    productId?: StringFilter<"ProductRecommendation"> | string
    name?: StringFilter<"ProductRecommendation"> | string
    brand?: StringFilter<"ProductRecommendation"> | string
    price?: FloatFilter<"ProductRecommendation"> | number
    currency?: StringFilter<"ProductRecommendation"> | string
    imageUrl?: StringFilter<"ProductRecommendation"> | string
    productUrl?: StringFilter<"ProductRecommendation"> | string
    platform?: EnumPlatformFilter<"ProductRecommendation"> | $Enums.Platform
    category?: EnumProductCategoryFilter<"ProductRecommendation"> | $Enums.ProductCategory
    rating?: FloatNullableFilter<"ProductRecommendation"> | number | null
    reviewCount?: IntNullableFilter<"ProductRecommendation"> | number | null
    inStock?: BoolFilter<"ProductRecommendation"> | boolean
    createdAt?: DateTimeFilter<"ProductRecommendation"> | Date | string
    suggestion?: XOR<StyleSuggestionRelationFilter, StyleSuggestionWhereInput>
  }, "id">

  export type ProductRecommendationOrderByWithAggregationInput = {
    id?: SortOrder
    suggestionId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    platform?: SortOrder
    category?: SortOrder
    rating?: SortOrderInput | SortOrder
    reviewCount?: SortOrderInput | SortOrder
    inStock?: SortOrder
    createdAt?: SortOrder
    _count?: ProductRecommendationCountOrderByAggregateInput
    _avg?: ProductRecommendationAvgOrderByAggregateInput
    _max?: ProductRecommendationMaxOrderByAggregateInput
    _min?: ProductRecommendationMinOrderByAggregateInput
    _sum?: ProductRecommendationSumOrderByAggregateInput
  }

  export type ProductRecommendationScalarWhereWithAggregatesInput = {
    AND?: ProductRecommendationScalarWhereWithAggregatesInput | ProductRecommendationScalarWhereWithAggregatesInput[]
    OR?: ProductRecommendationScalarWhereWithAggregatesInput[]
    NOT?: ProductRecommendationScalarWhereWithAggregatesInput | ProductRecommendationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductRecommendation"> | string
    suggestionId?: StringWithAggregatesFilter<"ProductRecommendation"> | string
    productId?: StringWithAggregatesFilter<"ProductRecommendation"> | string
    name?: StringWithAggregatesFilter<"ProductRecommendation"> | string
    brand?: StringWithAggregatesFilter<"ProductRecommendation"> | string
    price?: FloatWithAggregatesFilter<"ProductRecommendation"> | number
    currency?: StringWithAggregatesFilter<"ProductRecommendation"> | string
    imageUrl?: StringWithAggregatesFilter<"ProductRecommendation"> | string
    productUrl?: StringWithAggregatesFilter<"ProductRecommendation"> | string
    platform?: EnumPlatformWithAggregatesFilter<"ProductRecommendation"> | $Enums.Platform
    category?: EnumProductCategoryWithAggregatesFilter<"ProductRecommendation"> | $Enums.ProductCategory
    rating?: FloatNullableWithAggregatesFilter<"ProductRecommendation"> | number | null
    reviewCount?: IntNullableWithAggregatesFilter<"ProductRecommendation"> | number | null
    inStock?: BoolWithAggregatesFilter<"ProductRecommendation"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ProductRecommendation"> | Date | string
  }

  export type FavoriteWhereInput = {
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    id?: StringFilter<"Favorite"> | string
    userId?: StringFilter<"Favorite"> | string
    productId?: StringFilter<"Favorite"> | string
    name?: StringFilter<"Favorite"> | string
    brand?: StringFilter<"Favorite"> | string
    imageUrl?: StringFilter<"Favorite"> | string
    productUrl?: StringFilter<"Favorite"> | string
    platform?: EnumPlatformFilter<"Favorite"> | $Enums.Platform
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FavoriteOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FavoriteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_productId_platform?: FavoriteUserIdProductIdPlatformCompoundUniqueInput
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    userId?: StringFilter<"Favorite"> | string
    productId?: StringFilter<"Favorite"> | string
    name?: StringFilter<"Favorite"> | string
    brand?: StringFilter<"Favorite"> | string
    imageUrl?: StringFilter<"Favorite"> | string
    productUrl?: StringFilter<"Favorite"> | string
    platform?: EnumPlatformFilter<"Favorite"> | $Enums.Platform
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_productId_platform">

  export type FavoriteOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
    _count?: FavoriteCountOrderByAggregateInput
    _max?: FavoriteMaxOrderByAggregateInput
    _min?: FavoriteMinOrderByAggregateInput
  }

  export type FavoriteScalarWhereWithAggregatesInput = {
    AND?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    OR?: FavoriteScalarWhereWithAggregatesInput[]
    NOT?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Favorite"> | string
    userId?: StringWithAggregatesFilter<"Favorite"> | string
    productId?: StringWithAggregatesFilter<"Favorite"> | string
    name?: StringWithAggregatesFilter<"Favorite"> | string
    brand?: StringWithAggregatesFilter<"Favorite"> | string
    imageUrl?: StringWithAggregatesFilter<"Favorite"> | string
    productUrl?: StringWithAggregatesFilter<"Favorite"> | string
    platform?: EnumPlatformWithAggregatesFilter<"Favorite"> | $Enums.Platform
    createdAt?: DateTimeWithAggregatesFilter<"Favorite"> | Date | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: StringFilter<"Feedback"> | string
    userId?: StringFilter<"Feedback"> | string
    suggestionId?: StringNullableFilter<"Feedback"> | string | null
    rating?: IntFilter<"Feedback"> | number
    liked?: BoolFilter<"Feedback"> | boolean
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    suggestion?: XOR<StyleSuggestionNullableRelationFilter, StyleSuggestionWhereInput> | null
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    suggestionId?: SortOrderInput | SortOrder
    rating?: SortOrder
    liked?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    suggestion?: StyleSuggestionOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    userId?: StringFilter<"Feedback"> | string
    suggestionId?: StringNullableFilter<"Feedback"> | string | null
    rating?: IntFilter<"Feedback"> | number
    liked?: BoolFilter<"Feedback"> | boolean
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    suggestion?: XOR<StyleSuggestionNullableRelationFilter, StyleSuggestionWhereInput> | null
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    suggestionId?: SortOrderInput | SortOrder
    rating?: SortOrder
    liked?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Feedback"> | string
    userId?: StringWithAggregatesFilter<"Feedback"> | string
    suggestionId?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    rating?: IntWithAggregatesFilter<"Feedback"> | number
    liked?: BoolWithAggregatesFilter<"Feedback"> | boolean
    comment?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
  }

  export type UserPreferenceWhereInput = {
    AND?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    OR?: UserPreferenceWhereInput[]
    NOT?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    id?: StringFilter<"UserPreference"> | string
    userId?: StringFilter<"UserPreference"> | string
    key?: StringFilter<"UserPreference"> | string
    value?: StringFilter<"UserPreference"> | string
    createdAt?: DateTimeFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreference"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_key?: UserPreferenceUserIdKeyCompoundUniqueInput
    AND?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    OR?: UserPreferenceWhereInput[]
    NOT?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    userId?: StringFilter<"UserPreference"> | string
    key?: StringFilter<"UserPreference"> | string
    value?: StringFilter<"UserPreference"> | string
    createdAt?: DateTimeFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreference"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_key">

  export type UserPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserPreferenceCountOrderByAggregateInput
    _max?: UserPreferenceMaxOrderByAggregateInput
    _min?: UserPreferenceMinOrderByAggregateInput
  }

  export type UserPreferenceScalarWhereWithAggregatesInput = {
    AND?: UserPreferenceScalarWhereWithAggregatesInput | UserPreferenceScalarWhereWithAggregatesInput[]
    OR?: UserPreferenceScalarWhereWithAggregatesInput[]
    NOT?: UserPreferenceScalarWhereWithAggregatesInput | UserPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPreference"> | string
    userId?: StringWithAggregatesFilter<"UserPreference"> | string
    key?: StringWithAggregatesFilter<"UserPreference"> | string
    value?: StringWithAggregatesFilter<"UserPreference"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserPreference"> | Date | string
  }

  export type SeasonalTrendWhereInput = {
    AND?: SeasonalTrendWhereInput | SeasonalTrendWhereInput[]
    OR?: SeasonalTrendWhereInput[]
    NOT?: SeasonalTrendWhereInput | SeasonalTrendWhereInput[]
    id?: StringFilter<"SeasonalTrend"> | string
    title?: StringFilter<"SeasonalTrend"> | string
    description?: StringFilter<"SeasonalTrend"> | string
    season?: StringFilter<"SeasonalTrend"> | string
    popularity?: IntFilter<"SeasonalTrend"> | number
    imageUrl?: StringFilter<"SeasonalTrend"> | string
    colors?: StringNullableListFilter<"SeasonalTrend">
    keyPieces?: StringNullableListFilter<"SeasonalTrend">
    tags?: StringNullableListFilter<"SeasonalTrend">
    isActive?: BoolFilter<"SeasonalTrend"> | boolean
    priority?: IntFilter<"SeasonalTrend"> | number
    createdAt?: DateTimeFilter<"SeasonalTrend"> | Date | string
    updatedAt?: DateTimeFilter<"SeasonalTrend"> | Date | string
    products?: TrendProductListRelationFilter
  }

  export type SeasonalTrendOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    season?: SortOrder
    popularity?: SortOrder
    imageUrl?: SortOrder
    colors?: SortOrder
    keyPieces?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    products?: TrendProductOrderByRelationAggregateInput
  }

  export type SeasonalTrendWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SeasonalTrendWhereInput | SeasonalTrendWhereInput[]
    OR?: SeasonalTrendWhereInput[]
    NOT?: SeasonalTrendWhereInput | SeasonalTrendWhereInput[]
    title?: StringFilter<"SeasonalTrend"> | string
    description?: StringFilter<"SeasonalTrend"> | string
    season?: StringFilter<"SeasonalTrend"> | string
    popularity?: IntFilter<"SeasonalTrend"> | number
    imageUrl?: StringFilter<"SeasonalTrend"> | string
    colors?: StringNullableListFilter<"SeasonalTrend">
    keyPieces?: StringNullableListFilter<"SeasonalTrend">
    tags?: StringNullableListFilter<"SeasonalTrend">
    isActive?: BoolFilter<"SeasonalTrend"> | boolean
    priority?: IntFilter<"SeasonalTrend"> | number
    createdAt?: DateTimeFilter<"SeasonalTrend"> | Date | string
    updatedAt?: DateTimeFilter<"SeasonalTrend"> | Date | string
    products?: TrendProductListRelationFilter
  }, "id">

  export type SeasonalTrendOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    season?: SortOrder
    popularity?: SortOrder
    imageUrl?: SortOrder
    colors?: SortOrder
    keyPieces?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SeasonalTrendCountOrderByAggregateInput
    _avg?: SeasonalTrendAvgOrderByAggregateInput
    _max?: SeasonalTrendMaxOrderByAggregateInput
    _min?: SeasonalTrendMinOrderByAggregateInput
    _sum?: SeasonalTrendSumOrderByAggregateInput
  }

  export type SeasonalTrendScalarWhereWithAggregatesInput = {
    AND?: SeasonalTrendScalarWhereWithAggregatesInput | SeasonalTrendScalarWhereWithAggregatesInput[]
    OR?: SeasonalTrendScalarWhereWithAggregatesInput[]
    NOT?: SeasonalTrendScalarWhereWithAggregatesInput | SeasonalTrendScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SeasonalTrend"> | string
    title?: StringWithAggregatesFilter<"SeasonalTrend"> | string
    description?: StringWithAggregatesFilter<"SeasonalTrend"> | string
    season?: StringWithAggregatesFilter<"SeasonalTrend"> | string
    popularity?: IntWithAggregatesFilter<"SeasonalTrend"> | number
    imageUrl?: StringWithAggregatesFilter<"SeasonalTrend"> | string
    colors?: StringNullableListFilter<"SeasonalTrend">
    keyPieces?: StringNullableListFilter<"SeasonalTrend">
    tags?: StringNullableListFilter<"SeasonalTrend">
    isActive?: BoolWithAggregatesFilter<"SeasonalTrend"> | boolean
    priority?: IntWithAggregatesFilter<"SeasonalTrend"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SeasonalTrend"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SeasonalTrend"> | Date | string
  }

  export type TrendProductWhereInput = {
    AND?: TrendProductWhereInput | TrendProductWhereInput[]
    OR?: TrendProductWhereInput[]
    NOT?: TrendProductWhereInput | TrendProductWhereInput[]
    id?: StringFilter<"TrendProduct"> | string
    trendId?: StringFilter<"TrendProduct"> | string
    productId?: StringFilter<"TrendProduct"> | string
    name?: StringFilter<"TrendProduct"> | string
    brand?: StringFilter<"TrendProduct"> | string
    price?: FloatFilter<"TrendProduct"> | number
    originalPrice?: FloatNullableFilter<"TrendProduct"> | number | null
    currency?: StringFilter<"TrendProduct"> | string
    imageUrl?: StringFilter<"TrendProduct"> | string
    productUrl?: StringFilter<"TrendProduct"> | string
    category?: EnumProductCategoryFilter<"TrendProduct"> | $Enums.ProductCategory
    rating?: FloatNullableFilter<"TrendProduct"> | number | null
    inStock?: BoolFilter<"TrendProduct"> | boolean
    featured?: BoolFilter<"TrendProduct"> | boolean
    createdAt?: DateTimeFilter<"TrendProduct"> | Date | string
    trend?: XOR<SeasonalTrendRelationFilter, SeasonalTrendWhereInput>
  }

  export type TrendProductOrderByWithRelationInput = {
    id?: SortOrder
    trendId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    originalPrice?: SortOrderInput | SortOrder
    currency?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    category?: SortOrder
    rating?: SortOrderInput | SortOrder
    inStock?: SortOrder
    featured?: SortOrder
    createdAt?: SortOrder
    trend?: SeasonalTrendOrderByWithRelationInput
  }

  export type TrendProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TrendProductWhereInput | TrendProductWhereInput[]
    OR?: TrendProductWhereInput[]
    NOT?: TrendProductWhereInput | TrendProductWhereInput[]
    trendId?: StringFilter<"TrendProduct"> | string
    productId?: StringFilter<"TrendProduct"> | string
    name?: StringFilter<"TrendProduct"> | string
    brand?: StringFilter<"TrendProduct"> | string
    price?: FloatFilter<"TrendProduct"> | number
    originalPrice?: FloatNullableFilter<"TrendProduct"> | number | null
    currency?: StringFilter<"TrendProduct"> | string
    imageUrl?: StringFilter<"TrendProduct"> | string
    productUrl?: StringFilter<"TrendProduct"> | string
    category?: EnumProductCategoryFilter<"TrendProduct"> | $Enums.ProductCategory
    rating?: FloatNullableFilter<"TrendProduct"> | number | null
    inStock?: BoolFilter<"TrendProduct"> | boolean
    featured?: BoolFilter<"TrendProduct"> | boolean
    createdAt?: DateTimeFilter<"TrendProduct"> | Date | string
    trend?: XOR<SeasonalTrendRelationFilter, SeasonalTrendWhereInput>
  }, "id">

  export type TrendProductOrderByWithAggregationInput = {
    id?: SortOrder
    trendId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    originalPrice?: SortOrderInput | SortOrder
    currency?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    category?: SortOrder
    rating?: SortOrderInput | SortOrder
    inStock?: SortOrder
    featured?: SortOrder
    createdAt?: SortOrder
    _count?: TrendProductCountOrderByAggregateInput
    _avg?: TrendProductAvgOrderByAggregateInput
    _max?: TrendProductMaxOrderByAggregateInput
    _min?: TrendProductMinOrderByAggregateInput
    _sum?: TrendProductSumOrderByAggregateInput
  }

  export type TrendProductScalarWhereWithAggregatesInput = {
    AND?: TrendProductScalarWhereWithAggregatesInput | TrendProductScalarWhereWithAggregatesInput[]
    OR?: TrendProductScalarWhereWithAggregatesInput[]
    NOT?: TrendProductScalarWhereWithAggregatesInput | TrendProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TrendProduct"> | string
    trendId?: StringWithAggregatesFilter<"TrendProduct"> | string
    productId?: StringWithAggregatesFilter<"TrendProduct"> | string
    name?: StringWithAggregatesFilter<"TrendProduct"> | string
    brand?: StringWithAggregatesFilter<"TrendProduct"> | string
    price?: FloatWithAggregatesFilter<"TrendProduct"> | number
    originalPrice?: FloatNullableWithAggregatesFilter<"TrendProduct"> | number | null
    currency?: StringWithAggregatesFilter<"TrendProduct"> | string
    imageUrl?: StringWithAggregatesFilter<"TrendProduct"> | string
    productUrl?: StringWithAggregatesFilter<"TrendProduct"> | string
    category?: EnumProductCategoryWithAggregatesFilter<"TrendProduct"> | $Enums.ProductCategory
    rating?: FloatNullableWithAggregatesFilter<"TrendProduct"> | number | null
    inStock?: BoolWithAggregatesFilter<"TrendProduct"> | boolean
    featured?: BoolWithAggregatesFilter<"TrendProduct"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TrendProduct"> | Date | string
  }

  export type PhotoAnalysisWhereInput = {
    AND?: PhotoAnalysisWhereInput | PhotoAnalysisWhereInput[]
    OR?: PhotoAnalysisWhereInput[]
    NOT?: PhotoAnalysisWhereInput | PhotoAnalysisWhereInput[]
    id?: StringFilter<"PhotoAnalysis"> | string
    userId?: StringFilter<"PhotoAnalysis"> | string
    photoUrl?: StringFilter<"PhotoAnalysis"> | string
    analysisType?: EnumAnalysisTypeFilter<"PhotoAnalysis"> | $Enums.AnalysisType
    detectedValue?: StringNullableFilter<"PhotoAnalysis"> | string | null
    confidence?: FloatNullableFilter<"PhotoAnalysis"> | number | null
    metadata?: StringNullableFilter<"PhotoAnalysis"> | string | null
    createdAt?: DateTimeFilter<"PhotoAnalysis"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PhotoAnalysisOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    photoUrl?: SortOrder
    analysisType?: SortOrder
    detectedValue?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PhotoAnalysisWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PhotoAnalysisWhereInput | PhotoAnalysisWhereInput[]
    OR?: PhotoAnalysisWhereInput[]
    NOT?: PhotoAnalysisWhereInput | PhotoAnalysisWhereInput[]
    userId?: StringFilter<"PhotoAnalysis"> | string
    photoUrl?: StringFilter<"PhotoAnalysis"> | string
    analysisType?: EnumAnalysisTypeFilter<"PhotoAnalysis"> | $Enums.AnalysisType
    detectedValue?: StringNullableFilter<"PhotoAnalysis"> | string | null
    confidence?: FloatNullableFilter<"PhotoAnalysis"> | number | null
    metadata?: StringNullableFilter<"PhotoAnalysis"> | string | null
    createdAt?: DateTimeFilter<"PhotoAnalysis"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PhotoAnalysisOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    photoUrl?: SortOrder
    analysisType?: SortOrder
    detectedValue?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PhotoAnalysisCountOrderByAggregateInput
    _avg?: PhotoAnalysisAvgOrderByAggregateInput
    _max?: PhotoAnalysisMaxOrderByAggregateInput
    _min?: PhotoAnalysisMinOrderByAggregateInput
    _sum?: PhotoAnalysisSumOrderByAggregateInput
  }

  export type PhotoAnalysisScalarWhereWithAggregatesInput = {
    AND?: PhotoAnalysisScalarWhereWithAggregatesInput | PhotoAnalysisScalarWhereWithAggregatesInput[]
    OR?: PhotoAnalysisScalarWhereWithAggregatesInput[]
    NOT?: PhotoAnalysisScalarWhereWithAggregatesInput | PhotoAnalysisScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PhotoAnalysis"> | string
    userId?: StringWithAggregatesFilter<"PhotoAnalysis"> | string
    photoUrl?: StringWithAggregatesFilter<"PhotoAnalysis"> | string
    analysisType?: EnumAnalysisTypeWithAggregatesFilter<"PhotoAnalysis"> | $Enums.AnalysisType
    detectedValue?: StringNullableWithAggregatesFilter<"PhotoAnalysis"> | string | null
    confidence?: FloatNullableWithAggregatesFilter<"PhotoAnalysis"> | number | null
    metadata?: StringNullableWithAggregatesFilter<"PhotoAnalysis"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PhotoAnalysis"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    photos?: UserPhotoCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    photos?: UserPhotoUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    photos?: UserPhotoUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    photos?: UserPhotoUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateInput = {
    id?: string
    gender: $Enums.Gender
    height?: number | null
    weight?: number | null
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    styleType?: UserProfileCreatestyleTypeInput | $Enums.StyleType[]
    budgetRange?: $Enums.BudgetRange | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type UserProfileUncheckedCreateInput = {
    id?: string
    userId: string
    gender: $Enums.Gender
    height?: number | null
    weight?: number | null
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    styleType?: UserProfileCreatestyleTypeInput | $Enums.StyleType[]
    budgetRange?: $Enums.BudgetRange | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    styleType?: UserProfileUpdatestyleTypeInput | $Enums.StyleType[]
    budgetRange?: NullableEnumBudgetRangeFieldUpdateOperationsInput | $Enums.BudgetRange | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    styleType?: UserProfileUpdatestyleTypeInput | $Enums.StyleType[]
    budgetRange?: NullableEnumBudgetRangeFieldUpdateOperationsInput | $Enums.BudgetRange | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateManyInput = {
    id?: string
    userId: string
    gender: $Enums.Gender
    height?: number | null
    weight?: number | null
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    styleType?: UserProfileCreatestyleTypeInput | $Enums.StyleType[]
    budgetRange?: $Enums.BudgetRange | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    styleType?: UserProfileUpdatestyleTypeInput | $Enums.StyleType[]
    budgetRange?: NullableEnumBudgetRangeFieldUpdateOperationsInput | $Enums.BudgetRange | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    styleType?: UserProfileUpdatestyleTypeInput | $Enums.StyleType[]
    budgetRange?: NullableEnumBudgetRangeFieldUpdateOperationsInput | $Enums.BudgetRange | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPhotoCreateInput = {
    id?: string
    url: string
    type: $Enums.PhotoType
    isActive?: boolean
    publicId: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPhotosInput
  }

  export type UserPhotoUncheckedCreateInput = {
    id?: string
    userId: string
    url: string
    type: $Enums.PhotoType
    isActive?: boolean
    publicId: string
    createdAt?: Date | string
  }

  export type UserPhotoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    publicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPhotosNestedInput
  }

  export type UserPhotoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    publicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPhotoCreateManyInput = {
    id?: string
    userId: string
    url: string
    type: $Enums.PhotoType
    isActive?: boolean
    publicId: string
    createdAt?: Date | string
  }

  export type UserPhotoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    publicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPhotoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    publicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StyleSuggestionCreateInput = {
    id?: string
    userId: string
    occasion: $Enums.Occasion
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    outfitDesc: string
    hairstyle?: string | null
    accessories?: string | null
    skincare?: string | null
    colors?: StyleSuggestionCreatecolorsInput | string[]
    outfitImageUrl?: string | null
    styleImageUrl?: string | null
    confidence?: number | null
    createdAt?: Date | string
    products?: ProductRecommendationCreateNestedManyWithoutSuggestionInput
    feedback?: FeedbackCreateNestedManyWithoutSuggestionInput
  }

  export type StyleSuggestionUncheckedCreateInput = {
    id?: string
    userId: string
    occasion: $Enums.Occasion
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    outfitDesc: string
    hairstyle?: string | null
    accessories?: string | null
    skincare?: string | null
    colors?: StyleSuggestionCreatecolorsInput | string[]
    outfitImageUrl?: string | null
    styleImageUrl?: string | null
    confidence?: number | null
    createdAt?: Date | string
    products?: ProductRecommendationUncheckedCreateNestedManyWithoutSuggestionInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutSuggestionInput
  }

  export type StyleSuggestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    occasion?: EnumOccasionFieldUpdateOperationsInput | $Enums.Occasion
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    outfitDesc?: StringFieldUpdateOperationsInput | string
    hairstyle?: NullableStringFieldUpdateOperationsInput | string | null
    accessories?: NullableStringFieldUpdateOperationsInput | string | null
    skincare?: NullableStringFieldUpdateOperationsInput | string | null
    colors?: StyleSuggestionUpdatecolorsInput | string[]
    outfitImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    styleImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductRecommendationUpdateManyWithoutSuggestionNestedInput
    feedback?: FeedbackUpdateManyWithoutSuggestionNestedInput
  }

  export type StyleSuggestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    occasion?: EnumOccasionFieldUpdateOperationsInput | $Enums.Occasion
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    outfitDesc?: StringFieldUpdateOperationsInput | string
    hairstyle?: NullableStringFieldUpdateOperationsInput | string | null
    accessories?: NullableStringFieldUpdateOperationsInput | string | null
    skincare?: NullableStringFieldUpdateOperationsInput | string | null
    colors?: StyleSuggestionUpdatecolorsInput | string[]
    outfitImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    styleImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductRecommendationUncheckedUpdateManyWithoutSuggestionNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutSuggestionNestedInput
  }

  export type StyleSuggestionCreateManyInput = {
    id?: string
    userId: string
    occasion: $Enums.Occasion
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    outfitDesc: string
    hairstyle?: string | null
    accessories?: string | null
    skincare?: string | null
    colors?: StyleSuggestionCreatecolorsInput | string[]
    outfitImageUrl?: string | null
    styleImageUrl?: string | null
    confidence?: number | null
    createdAt?: Date | string
  }

  export type StyleSuggestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    occasion?: EnumOccasionFieldUpdateOperationsInput | $Enums.Occasion
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    outfitDesc?: StringFieldUpdateOperationsInput | string
    hairstyle?: NullableStringFieldUpdateOperationsInput | string | null
    accessories?: NullableStringFieldUpdateOperationsInput | string | null
    skincare?: NullableStringFieldUpdateOperationsInput | string | null
    colors?: StyleSuggestionUpdatecolorsInput | string[]
    outfitImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    styleImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StyleSuggestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    occasion?: EnumOccasionFieldUpdateOperationsInput | $Enums.Occasion
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    outfitDesc?: StringFieldUpdateOperationsInput | string
    hairstyle?: NullableStringFieldUpdateOperationsInput | string | null
    accessories?: NullableStringFieldUpdateOperationsInput | string | null
    skincare?: NullableStringFieldUpdateOperationsInput | string | null
    colors?: StyleSuggestionUpdatecolorsInput | string[]
    outfitImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    styleImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductRecommendationCreateInput = {
    id?: string
    productId: string
    name: string
    brand: string
    price: number
    currency?: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    category: $Enums.ProductCategory
    rating?: number | null
    reviewCount?: number | null
    inStock?: boolean
    createdAt?: Date | string
    suggestion: StyleSuggestionCreateNestedOneWithoutProductsInput
  }

  export type ProductRecommendationUncheckedCreateInput = {
    id?: string
    suggestionId: string
    productId: string
    name: string
    brand: string
    price: number
    currency?: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    category: $Enums.ProductCategory
    rating?: number | null
    reviewCount?: number | null
    inStock?: boolean
    createdAt?: Date | string
  }

  export type ProductRecommendationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    reviewCount?: NullableIntFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suggestion?: StyleSuggestionUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductRecommendationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    suggestionId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    reviewCount?: NullableIntFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductRecommendationCreateManyInput = {
    id?: string
    suggestionId: string
    productId: string
    name: string
    brand: string
    price: number
    currency?: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    category: $Enums.ProductCategory
    rating?: number | null
    reviewCount?: number | null
    inStock?: boolean
    createdAt?: Date | string
  }

  export type ProductRecommendationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    reviewCount?: NullableIntFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductRecommendationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    suggestionId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    reviewCount?: NullableIntFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteCreateInput = {
    id?: string
    productId: string
    name: string
    brand: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoritesInput
  }

  export type FavoriteUncheckedCreateInput = {
    id?: string
    userId: string
    productId: string
    name: string
    brand: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    createdAt?: Date | string
  }

  export type FavoriteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoriteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteCreateManyInput = {
    id?: string
    userId: string
    productId: string
    name: string
    brand: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    createdAt?: Date | string
  }

  export type FavoriteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateInput = {
    id?: string
    rating: number
    liked: boolean
    comment?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFeedbackInput
    suggestion?: StyleSuggestionCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: string
    userId: string
    suggestionId?: string | null
    rating: number
    liked: boolean
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbackNestedInput
    suggestion?: StyleSuggestionUpdateOneWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    suggestionId?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyInput = {
    id?: string
    userId: string
    suggestionId?: string | null
    rating: number
    liked: boolean
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    suggestionId?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceCreateInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPreferencesInput
  }

  export type UserPreferenceUncheckedCreateInput = {
    id?: string
    userId: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type UserPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceCreateManyInput = {
    id?: string
    userId: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeasonalTrendCreateInput = {
    id?: string
    title: string
    description: string
    season: string
    popularity: number
    imageUrl: string
    colors?: SeasonalTrendCreatecolorsInput | string[]
    keyPieces?: SeasonalTrendCreatekeyPiecesInput | string[]
    tags?: SeasonalTrendCreatetagsInput | string[]
    isActive?: boolean
    priority?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: TrendProductCreateNestedManyWithoutTrendInput
  }

  export type SeasonalTrendUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    season: string
    popularity: number
    imageUrl: string
    colors?: SeasonalTrendCreatecolorsInput | string[]
    keyPieces?: SeasonalTrendCreatekeyPiecesInput | string[]
    tags?: SeasonalTrendCreatetagsInput | string[]
    isActive?: boolean
    priority?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: TrendProductUncheckedCreateNestedManyWithoutTrendInput
  }

  export type SeasonalTrendUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    popularity?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    colors?: SeasonalTrendUpdatecolorsInput | string[]
    keyPieces?: SeasonalTrendUpdatekeyPiecesInput | string[]
    tags?: SeasonalTrendUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: TrendProductUpdateManyWithoutTrendNestedInput
  }

  export type SeasonalTrendUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    popularity?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    colors?: SeasonalTrendUpdatecolorsInput | string[]
    keyPieces?: SeasonalTrendUpdatekeyPiecesInput | string[]
    tags?: SeasonalTrendUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: TrendProductUncheckedUpdateManyWithoutTrendNestedInput
  }

  export type SeasonalTrendCreateManyInput = {
    id?: string
    title: string
    description: string
    season: string
    popularity: number
    imageUrl: string
    colors?: SeasonalTrendCreatecolorsInput | string[]
    keyPieces?: SeasonalTrendCreatekeyPiecesInput | string[]
    tags?: SeasonalTrendCreatetagsInput | string[]
    isActive?: boolean
    priority?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SeasonalTrendUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    popularity?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    colors?: SeasonalTrendUpdatecolorsInput | string[]
    keyPieces?: SeasonalTrendUpdatekeyPiecesInput | string[]
    tags?: SeasonalTrendUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeasonalTrendUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    popularity?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    colors?: SeasonalTrendUpdatecolorsInput | string[]
    keyPieces?: SeasonalTrendUpdatekeyPiecesInput | string[]
    tags?: SeasonalTrendUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendProductCreateInput = {
    id?: string
    productId: string
    name: string
    brand: string
    price: number
    originalPrice?: number | null
    currency?: string
    imageUrl: string
    productUrl: string
    category: $Enums.ProductCategory
    rating?: number | null
    inStock?: boolean
    featured?: boolean
    createdAt?: Date | string
    trend: SeasonalTrendCreateNestedOneWithoutProductsInput
  }

  export type TrendProductUncheckedCreateInput = {
    id?: string
    trendId: string
    productId: string
    name: string
    brand: string
    price: number
    originalPrice?: number | null
    currency?: string
    imageUrl: string
    productUrl: string
    category: $Enums.ProductCategory
    rating?: number | null
    inStock?: boolean
    featured?: boolean
    createdAt?: Date | string
  }

  export type TrendProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    originalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trend?: SeasonalTrendUpdateOneRequiredWithoutProductsNestedInput
  }

  export type TrendProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    trendId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    originalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendProductCreateManyInput = {
    id?: string
    trendId: string
    productId: string
    name: string
    brand: string
    price: number
    originalPrice?: number | null
    currency?: string
    imageUrl: string
    productUrl: string
    category: $Enums.ProductCategory
    rating?: number | null
    inStock?: boolean
    featured?: boolean
    createdAt?: Date | string
  }

  export type TrendProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    originalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    trendId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    originalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoAnalysisCreateInput = {
    id?: string
    photoUrl: string
    analysisType: $Enums.AnalysisType
    detectedValue?: string | null
    confidence?: number | null
    metadata?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPhotoAnalysesInput
  }

  export type PhotoAnalysisUncheckedCreateInput = {
    id?: string
    userId: string
    photoUrl: string
    analysisType: $Enums.AnalysisType
    detectedValue?: string | null
    confidence?: number | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type PhotoAnalysisUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    analysisType?: EnumAnalysisTypeFieldUpdateOperationsInput | $Enums.AnalysisType
    detectedValue?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPhotoAnalysesNestedInput
  }

  export type PhotoAnalysisUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    analysisType?: EnumAnalysisTypeFieldUpdateOperationsInput | $Enums.AnalysisType
    detectedValue?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoAnalysisCreateManyInput = {
    id?: string
    userId: string
    photoUrl: string
    analysisType: $Enums.AnalysisType
    detectedValue?: string | null
    confidence?: number | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type PhotoAnalysisUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    analysisType?: EnumAnalysisTypeFieldUpdateOperationsInput | $Enums.AnalysisType
    detectedValue?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoAnalysisUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    analysisType?: EnumAnalysisTypeFieldUpdateOperationsInput | $Enums.AnalysisType
    detectedValue?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserProfileNullableRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type UserPhotoListRelationFilter = {
    every?: UserPhotoWhereInput
    some?: UserPhotoWhereInput
    none?: UserPhotoWhereInput
  }

  export type UserPreferenceListRelationFilter = {
    every?: UserPreferenceWhereInput
    some?: UserPreferenceWhereInput
    none?: UserPreferenceWhereInput
  }

  export type FavoriteListRelationFilter = {
    every?: FavoriteWhereInput
    some?: FavoriteWhereInput
    none?: FavoriteWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type PhotoAnalysisListRelationFilter = {
    every?: PhotoAnalysisWhereInput
    some?: PhotoAnalysisWhereInput
    none?: PhotoAnalysisWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserPhotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPreferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PhotoAnalysisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    googleId?: SortOrder
    appleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    googleId?: SortOrder
    appleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    googleId?: SortOrder
    appleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumBodyTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BodyType | EnumBodyTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BodyType[] | ListEnumBodyTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BodyType[] | ListEnumBodyTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBodyTypeNullableFilter<$PrismaModel> | $Enums.BodyType | null
  }

  export type EnumFaceShapeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.FaceShape | EnumFaceShapeFieldRefInput<$PrismaModel> | null
    in?: $Enums.FaceShape[] | ListEnumFaceShapeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.FaceShape[] | ListEnumFaceShapeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFaceShapeNullableFilter<$PrismaModel> | $Enums.FaceShape | null
  }

  export type EnumSkinToneNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.SkinTone | EnumSkinToneFieldRefInput<$PrismaModel> | null
    in?: $Enums.SkinTone[] | ListEnumSkinToneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SkinTone[] | ListEnumSkinToneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSkinToneNullableFilter<$PrismaModel> | $Enums.SkinTone | null
  }

  export type EnumStyleTypeNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.StyleType[] | ListEnumStyleTypeFieldRefInput<$PrismaModel> | null
    has?: $Enums.StyleType | EnumStyleTypeFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.StyleType[] | ListEnumStyleTypeFieldRefInput<$PrismaModel>
    hasSome?: $Enums.StyleType[] | ListEnumStyleTypeFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumBudgetRangeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetRange | EnumBudgetRangeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BudgetRange[] | ListEnumBudgetRangeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BudgetRange[] | ListEnumBudgetRangeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBudgetRangeNullableFilter<$PrismaModel> | $Enums.BudgetRange | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gender?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    bodyType?: SortOrder
    faceShape?: SortOrder
    skinTone?: SortOrder
    styleType?: SortOrder
    budgetRange?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileAvgOrderByAggregateInput = {
    height?: SortOrder
    weight?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gender?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    bodyType?: SortOrder
    faceShape?: SortOrder
    skinTone?: SortOrder
    budgetRange?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gender?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    bodyType?: SortOrder
    faceShape?: SortOrder
    skinTone?: SortOrder
    budgetRange?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileSumOrderByAggregateInput = {
    height?: SortOrder
    weight?: SortOrder
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumBodyTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BodyType | EnumBodyTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BodyType[] | ListEnumBodyTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BodyType[] | ListEnumBodyTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBodyTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BodyType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBodyTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBodyTypeNullableFilter<$PrismaModel>
  }

  export type EnumFaceShapeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FaceShape | EnumFaceShapeFieldRefInput<$PrismaModel> | null
    in?: $Enums.FaceShape[] | ListEnumFaceShapeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.FaceShape[] | ListEnumFaceShapeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFaceShapeNullableWithAggregatesFilter<$PrismaModel> | $Enums.FaceShape | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumFaceShapeNullableFilter<$PrismaModel>
    _max?: NestedEnumFaceShapeNullableFilter<$PrismaModel>
  }

  export type EnumSkinToneNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SkinTone | EnumSkinToneFieldRefInput<$PrismaModel> | null
    in?: $Enums.SkinTone[] | ListEnumSkinToneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SkinTone[] | ListEnumSkinToneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSkinToneNullableWithAggregatesFilter<$PrismaModel> | $Enums.SkinTone | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSkinToneNullableFilter<$PrismaModel>
    _max?: NestedEnumSkinToneNullableFilter<$PrismaModel>
  }

  export type EnumBudgetRangeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetRange | EnumBudgetRangeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BudgetRange[] | ListEnumBudgetRangeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BudgetRange[] | ListEnumBudgetRangeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBudgetRangeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BudgetRange | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBudgetRangeNullableFilter<$PrismaModel>
    _max?: NestedEnumBudgetRangeNullableFilter<$PrismaModel>
  }

  export type EnumPhotoTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoType | EnumPhotoTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoTypeFilter<$PrismaModel> | $Enums.PhotoType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserPhotoCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    url?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    publicId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserPhotoMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    url?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    publicId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserPhotoMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    url?: SortOrder
    type?: SortOrder
    isActive?: SortOrder
    publicId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumPhotoTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoType | EnumPhotoTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoTypeWithAggregatesFilter<$PrismaModel> | $Enums.PhotoType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhotoTypeFilter<$PrismaModel>
    _max?: NestedEnumPhotoTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumOccasionFilter<$PrismaModel = never> = {
    equals?: $Enums.Occasion | EnumOccasionFieldRefInput<$PrismaModel>
    in?: $Enums.Occasion[] | ListEnumOccasionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Occasion[] | ListEnumOccasionFieldRefInput<$PrismaModel>
    not?: NestedEnumOccasionFilter<$PrismaModel> | $Enums.Occasion
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ProductRecommendationListRelationFilter = {
    every?: ProductRecommendationWhereInput
    some?: ProductRecommendationWhereInput
    none?: ProductRecommendationWhereInput
  }

  export type ProductRecommendationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StyleSuggestionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    occasion?: SortOrder
    bodyType?: SortOrder
    faceShape?: SortOrder
    skinTone?: SortOrder
    outfitDesc?: SortOrder
    hairstyle?: SortOrder
    accessories?: SortOrder
    skincare?: SortOrder
    colors?: SortOrder
    outfitImageUrl?: SortOrder
    styleImageUrl?: SortOrder
    confidence?: SortOrder
    createdAt?: SortOrder
  }

  export type StyleSuggestionAvgOrderByAggregateInput = {
    confidence?: SortOrder
  }

  export type StyleSuggestionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    occasion?: SortOrder
    bodyType?: SortOrder
    faceShape?: SortOrder
    skinTone?: SortOrder
    outfitDesc?: SortOrder
    hairstyle?: SortOrder
    accessories?: SortOrder
    skincare?: SortOrder
    outfitImageUrl?: SortOrder
    styleImageUrl?: SortOrder
    confidence?: SortOrder
    createdAt?: SortOrder
  }

  export type StyleSuggestionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    occasion?: SortOrder
    bodyType?: SortOrder
    faceShape?: SortOrder
    skinTone?: SortOrder
    outfitDesc?: SortOrder
    hairstyle?: SortOrder
    accessories?: SortOrder
    skincare?: SortOrder
    outfitImageUrl?: SortOrder
    styleImageUrl?: SortOrder
    confidence?: SortOrder
    createdAt?: SortOrder
  }

  export type StyleSuggestionSumOrderByAggregateInput = {
    confidence?: SortOrder
  }

  export type EnumOccasionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Occasion | EnumOccasionFieldRefInput<$PrismaModel>
    in?: $Enums.Occasion[] | ListEnumOccasionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Occasion[] | ListEnumOccasionFieldRefInput<$PrismaModel>
    not?: NestedEnumOccasionWithAggregatesFilter<$PrismaModel> | $Enums.Occasion
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOccasionFilter<$PrismaModel>
    _max?: NestedEnumOccasionFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumPlatformFilter<$PrismaModel = never> = {
    equals?: $Enums.Platform | EnumPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlatformFilter<$PrismaModel> | $Enums.Platform
  }

  export type EnumProductCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductCategory | EnumProductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProductCategoryFilter<$PrismaModel> | $Enums.ProductCategory
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StyleSuggestionRelationFilter = {
    is?: StyleSuggestionWhereInput
    isNot?: StyleSuggestionWhereInput
  }

  export type ProductRecommendationCountOrderByAggregateInput = {
    id?: SortOrder
    suggestionId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    platform?: SortOrder
    category?: SortOrder
    rating?: SortOrder
    reviewCount?: SortOrder
    inStock?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductRecommendationAvgOrderByAggregateInput = {
    price?: SortOrder
    rating?: SortOrder
    reviewCount?: SortOrder
  }

  export type ProductRecommendationMaxOrderByAggregateInput = {
    id?: SortOrder
    suggestionId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    platform?: SortOrder
    category?: SortOrder
    rating?: SortOrder
    reviewCount?: SortOrder
    inStock?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductRecommendationMinOrderByAggregateInput = {
    id?: SortOrder
    suggestionId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    platform?: SortOrder
    category?: SortOrder
    rating?: SortOrder
    reviewCount?: SortOrder
    inStock?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductRecommendationSumOrderByAggregateInput = {
    price?: SortOrder
    rating?: SortOrder
    reviewCount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumPlatformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Platform | EnumPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlatformWithAggregatesFilter<$PrismaModel> | $Enums.Platform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlatformFilter<$PrismaModel>
    _max?: NestedEnumPlatformFilter<$PrismaModel>
  }

  export type EnumProductCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductCategory | EnumProductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProductCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ProductCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductCategoryFilter<$PrismaModel>
    _max?: NestedEnumProductCategoryFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FavoriteUserIdProductIdPlatformCompoundUniqueInput = {
    userId: string
    productId: string
    platform: $Enums.Platform
  }

  export type FavoriteCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StyleSuggestionNullableRelationFilter = {
    is?: StyleSuggestionWhereInput | null
    isNot?: StyleSuggestionWhereInput | null
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    suggestionId?: SortOrder
    rating?: SortOrder
    liked?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    suggestionId?: SortOrder
    rating?: SortOrder
    liked?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    suggestionId?: SortOrder
    rating?: SortOrder
    liked?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserPreferenceUserIdKeyCompoundUniqueInput = {
    userId: string
    key: string
  }

  export type UserPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrendProductListRelationFilter = {
    every?: TrendProductWhereInput
    some?: TrendProductWhereInput
    none?: TrendProductWhereInput
  }

  export type TrendProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeasonalTrendCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    season?: SortOrder
    popularity?: SortOrder
    imageUrl?: SortOrder
    colors?: SortOrder
    keyPieces?: SortOrder
    tags?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SeasonalTrendAvgOrderByAggregateInput = {
    popularity?: SortOrder
    priority?: SortOrder
  }

  export type SeasonalTrendMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    season?: SortOrder
    popularity?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SeasonalTrendMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    season?: SortOrder
    popularity?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SeasonalTrendSumOrderByAggregateInput = {
    popularity?: SortOrder
    priority?: SortOrder
  }

  export type SeasonalTrendRelationFilter = {
    is?: SeasonalTrendWhereInput
    isNot?: SeasonalTrendWhereInput
  }

  export type TrendProductCountOrderByAggregateInput = {
    id?: SortOrder
    trendId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    originalPrice?: SortOrder
    currency?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    category?: SortOrder
    rating?: SortOrder
    inStock?: SortOrder
    featured?: SortOrder
    createdAt?: SortOrder
  }

  export type TrendProductAvgOrderByAggregateInput = {
    price?: SortOrder
    originalPrice?: SortOrder
    rating?: SortOrder
  }

  export type TrendProductMaxOrderByAggregateInput = {
    id?: SortOrder
    trendId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    originalPrice?: SortOrder
    currency?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    category?: SortOrder
    rating?: SortOrder
    inStock?: SortOrder
    featured?: SortOrder
    createdAt?: SortOrder
  }

  export type TrendProductMinOrderByAggregateInput = {
    id?: SortOrder
    trendId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    originalPrice?: SortOrder
    currency?: SortOrder
    imageUrl?: SortOrder
    productUrl?: SortOrder
    category?: SortOrder
    rating?: SortOrder
    inStock?: SortOrder
    featured?: SortOrder
    createdAt?: SortOrder
  }

  export type TrendProductSumOrderByAggregateInput = {
    price?: SortOrder
    originalPrice?: SortOrder
    rating?: SortOrder
  }

  export type EnumAnalysisTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AnalysisType | EnumAnalysisTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnalysisType[] | ListEnumAnalysisTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnalysisType[] | ListEnumAnalysisTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAnalysisTypeFilter<$PrismaModel> | $Enums.AnalysisType
  }

  export type PhotoAnalysisCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    photoUrl?: SortOrder
    analysisType?: SortOrder
    detectedValue?: SortOrder
    confidence?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type PhotoAnalysisAvgOrderByAggregateInput = {
    confidence?: SortOrder
  }

  export type PhotoAnalysisMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    photoUrl?: SortOrder
    analysisType?: SortOrder
    detectedValue?: SortOrder
    confidence?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type PhotoAnalysisMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    photoUrl?: SortOrder
    analysisType?: SortOrder
    detectedValue?: SortOrder
    confidence?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type PhotoAnalysisSumOrderByAggregateInput = {
    confidence?: SortOrder
  }

  export type EnumAnalysisTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnalysisType | EnumAnalysisTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnalysisType[] | ListEnumAnalysisTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnalysisType[] | ListEnumAnalysisTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAnalysisTypeWithAggregatesFilter<$PrismaModel> | $Enums.AnalysisType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnalysisTypeFilter<$PrismaModel>
    _max?: NestedEnumAnalysisTypeFilter<$PrismaModel>
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type UserPhotoCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPhotoCreateWithoutUserInput, UserPhotoUncheckedCreateWithoutUserInput> | UserPhotoCreateWithoutUserInput[] | UserPhotoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPhotoCreateOrConnectWithoutUserInput | UserPhotoCreateOrConnectWithoutUserInput[]
    createMany?: UserPhotoCreateManyUserInputEnvelope
    connect?: UserPhotoWhereUniqueInput | UserPhotoWhereUniqueInput[]
  }

  export type UserPreferenceCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput> | UserPreferenceCreateWithoutUserInput[] | UserPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput | UserPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: UserPreferenceCreateManyUserInputEnvelope
    connect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
  }

  export type FavoriteCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type PhotoAnalysisCreateNestedManyWithoutUserInput = {
    create?: XOR<PhotoAnalysisCreateWithoutUserInput, PhotoAnalysisUncheckedCreateWithoutUserInput> | PhotoAnalysisCreateWithoutUserInput[] | PhotoAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PhotoAnalysisCreateOrConnectWithoutUserInput | PhotoAnalysisCreateOrConnectWithoutUserInput[]
    createMany?: PhotoAnalysisCreateManyUserInputEnvelope
    connect?: PhotoAnalysisWhereUniqueInput | PhotoAnalysisWhereUniqueInput[]
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type UserPhotoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPhotoCreateWithoutUserInput, UserPhotoUncheckedCreateWithoutUserInput> | UserPhotoCreateWithoutUserInput[] | UserPhotoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPhotoCreateOrConnectWithoutUserInput | UserPhotoCreateOrConnectWithoutUserInput[]
    createMany?: UserPhotoCreateManyUserInputEnvelope
    connect?: UserPhotoWhereUniqueInput | UserPhotoWhereUniqueInput[]
  }

  export type UserPreferenceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput> | UserPreferenceCreateWithoutUserInput[] | UserPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput | UserPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: UserPreferenceCreateManyUserInputEnvelope
    connect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
  }

  export type FavoriteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type PhotoAnalysisUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PhotoAnalysisCreateWithoutUserInput, PhotoAnalysisUncheckedCreateWithoutUserInput> | PhotoAnalysisCreateWithoutUserInput[] | PhotoAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PhotoAnalysisCreateOrConnectWithoutUserInput | PhotoAnalysisCreateOrConnectWithoutUserInput[]
    createMany?: PhotoAnalysisCreateManyUserInputEnvelope
    connect?: PhotoAnalysisWhereUniqueInput | PhotoAnalysisWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserPhotoUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPhotoCreateWithoutUserInput, UserPhotoUncheckedCreateWithoutUserInput> | UserPhotoCreateWithoutUserInput[] | UserPhotoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPhotoCreateOrConnectWithoutUserInput | UserPhotoCreateOrConnectWithoutUserInput[]
    upsert?: UserPhotoUpsertWithWhereUniqueWithoutUserInput | UserPhotoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPhotoCreateManyUserInputEnvelope
    set?: UserPhotoWhereUniqueInput | UserPhotoWhereUniqueInput[]
    disconnect?: UserPhotoWhereUniqueInput | UserPhotoWhereUniqueInput[]
    delete?: UserPhotoWhereUniqueInput | UserPhotoWhereUniqueInput[]
    connect?: UserPhotoWhereUniqueInput | UserPhotoWhereUniqueInput[]
    update?: UserPhotoUpdateWithWhereUniqueWithoutUserInput | UserPhotoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPhotoUpdateManyWithWhereWithoutUserInput | UserPhotoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPhotoScalarWhereInput | UserPhotoScalarWhereInput[]
  }

  export type UserPreferenceUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput> | UserPreferenceCreateWithoutUserInput[] | UserPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput | UserPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: UserPreferenceUpsertWithWhereUniqueWithoutUserInput | UserPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPreferenceCreateManyUserInputEnvelope
    set?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    disconnect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    delete?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    connect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    update?: UserPreferenceUpdateWithWhereUniqueWithoutUserInput | UserPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPreferenceUpdateManyWithWhereWithoutUserInput | UserPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPreferenceScalarWhereInput | UserPreferenceScalarWhereInput[]
  }

  export type FavoriteUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type PhotoAnalysisUpdateManyWithoutUserNestedInput = {
    create?: XOR<PhotoAnalysisCreateWithoutUserInput, PhotoAnalysisUncheckedCreateWithoutUserInput> | PhotoAnalysisCreateWithoutUserInput[] | PhotoAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PhotoAnalysisCreateOrConnectWithoutUserInput | PhotoAnalysisCreateOrConnectWithoutUserInput[]
    upsert?: PhotoAnalysisUpsertWithWhereUniqueWithoutUserInput | PhotoAnalysisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PhotoAnalysisCreateManyUserInputEnvelope
    set?: PhotoAnalysisWhereUniqueInput | PhotoAnalysisWhereUniqueInput[]
    disconnect?: PhotoAnalysisWhereUniqueInput | PhotoAnalysisWhereUniqueInput[]
    delete?: PhotoAnalysisWhereUniqueInput | PhotoAnalysisWhereUniqueInput[]
    connect?: PhotoAnalysisWhereUniqueInput | PhotoAnalysisWhereUniqueInput[]
    update?: PhotoAnalysisUpdateWithWhereUniqueWithoutUserInput | PhotoAnalysisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PhotoAnalysisUpdateManyWithWhereWithoutUserInput | PhotoAnalysisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PhotoAnalysisScalarWhereInput | PhotoAnalysisScalarWhereInput[]
  }

  export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserPhotoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPhotoCreateWithoutUserInput, UserPhotoUncheckedCreateWithoutUserInput> | UserPhotoCreateWithoutUserInput[] | UserPhotoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPhotoCreateOrConnectWithoutUserInput | UserPhotoCreateOrConnectWithoutUserInput[]
    upsert?: UserPhotoUpsertWithWhereUniqueWithoutUserInput | UserPhotoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPhotoCreateManyUserInputEnvelope
    set?: UserPhotoWhereUniqueInput | UserPhotoWhereUniqueInput[]
    disconnect?: UserPhotoWhereUniqueInput | UserPhotoWhereUniqueInput[]
    delete?: UserPhotoWhereUniqueInput | UserPhotoWhereUniqueInput[]
    connect?: UserPhotoWhereUniqueInput | UserPhotoWhereUniqueInput[]
    update?: UserPhotoUpdateWithWhereUniqueWithoutUserInput | UserPhotoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPhotoUpdateManyWithWhereWithoutUserInput | UserPhotoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPhotoScalarWhereInput | UserPhotoScalarWhereInput[]
  }

  export type UserPreferenceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput> | UserPreferenceCreateWithoutUserInput[] | UserPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput | UserPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: UserPreferenceUpsertWithWhereUniqueWithoutUserInput | UserPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPreferenceCreateManyUserInputEnvelope
    set?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    disconnect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    delete?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    connect?: UserPreferenceWhereUniqueInput | UserPreferenceWhereUniqueInput[]
    update?: UserPreferenceUpdateWithWhereUniqueWithoutUserInput | UserPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPreferenceUpdateManyWithWhereWithoutUserInput | UserPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPreferenceScalarWhereInput | UserPreferenceScalarWhereInput[]
  }

  export type FavoriteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type PhotoAnalysisUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PhotoAnalysisCreateWithoutUserInput, PhotoAnalysisUncheckedCreateWithoutUserInput> | PhotoAnalysisCreateWithoutUserInput[] | PhotoAnalysisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PhotoAnalysisCreateOrConnectWithoutUserInput | PhotoAnalysisCreateOrConnectWithoutUserInput[]
    upsert?: PhotoAnalysisUpsertWithWhereUniqueWithoutUserInput | PhotoAnalysisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PhotoAnalysisCreateManyUserInputEnvelope
    set?: PhotoAnalysisWhereUniqueInput | PhotoAnalysisWhereUniqueInput[]
    disconnect?: PhotoAnalysisWhereUniqueInput | PhotoAnalysisWhereUniqueInput[]
    delete?: PhotoAnalysisWhereUniqueInput | PhotoAnalysisWhereUniqueInput[]
    connect?: PhotoAnalysisWhereUniqueInput | PhotoAnalysisWhereUniqueInput[]
    update?: PhotoAnalysisUpdateWithWhereUniqueWithoutUserInput | PhotoAnalysisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PhotoAnalysisUpdateManyWithWhereWithoutUserInput | PhotoAnalysisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PhotoAnalysisScalarWhereInput | PhotoAnalysisScalarWhereInput[]
  }

  export type UserProfileCreatestyleTypeInput = {
    set: $Enums.StyleType[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumBodyTypeFieldUpdateOperationsInput = {
    set?: $Enums.BodyType | null
  }

  export type NullableEnumFaceShapeFieldUpdateOperationsInput = {
    set?: $Enums.FaceShape | null
  }

  export type NullableEnumSkinToneFieldUpdateOperationsInput = {
    set?: $Enums.SkinTone | null
  }

  export type UserProfileUpdatestyleTypeInput = {
    set?: $Enums.StyleType[]
    push?: $Enums.StyleType | $Enums.StyleType[]
  }

  export type NullableEnumBudgetRangeFieldUpdateOperationsInput = {
    set?: $Enums.BudgetRange | null
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutPhotosInput = {
    create?: XOR<UserCreateWithoutPhotosInput, UserUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPhotosInput
    connect?: UserWhereUniqueInput
  }

  export type EnumPhotoTypeFieldUpdateOperationsInput = {
    set?: $Enums.PhotoType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutPhotosNestedInput = {
    create?: XOR<UserCreateWithoutPhotosInput, UserUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPhotosInput
    upsert?: UserUpsertWithoutPhotosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPhotosInput, UserUpdateWithoutPhotosInput>, UserUncheckedUpdateWithoutPhotosInput>
  }

  export type StyleSuggestionCreatecolorsInput = {
    set: string[]
  }

  export type ProductRecommendationCreateNestedManyWithoutSuggestionInput = {
    create?: XOR<ProductRecommendationCreateWithoutSuggestionInput, ProductRecommendationUncheckedCreateWithoutSuggestionInput> | ProductRecommendationCreateWithoutSuggestionInput[] | ProductRecommendationUncheckedCreateWithoutSuggestionInput[]
    connectOrCreate?: ProductRecommendationCreateOrConnectWithoutSuggestionInput | ProductRecommendationCreateOrConnectWithoutSuggestionInput[]
    createMany?: ProductRecommendationCreateManySuggestionInputEnvelope
    connect?: ProductRecommendationWhereUniqueInput | ProductRecommendationWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutSuggestionInput = {
    create?: XOR<FeedbackCreateWithoutSuggestionInput, FeedbackUncheckedCreateWithoutSuggestionInput> | FeedbackCreateWithoutSuggestionInput[] | FeedbackUncheckedCreateWithoutSuggestionInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSuggestionInput | FeedbackCreateOrConnectWithoutSuggestionInput[]
    createMany?: FeedbackCreateManySuggestionInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ProductRecommendationUncheckedCreateNestedManyWithoutSuggestionInput = {
    create?: XOR<ProductRecommendationCreateWithoutSuggestionInput, ProductRecommendationUncheckedCreateWithoutSuggestionInput> | ProductRecommendationCreateWithoutSuggestionInput[] | ProductRecommendationUncheckedCreateWithoutSuggestionInput[]
    connectOrCreate?: ProductRecommendationCreateOrConnectWithoutSuggestionInput | ProductRecommendationCreateOrConnectWithoutSuggestionInput[]
    createMany?: ProductRecommendationCreateManySuggestionInputEnvelope
    connect?: ProductRecommendationWhereUniqueInput | ProductRecommendationWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutSuggestionInput = {
    create?: XOR<FeedbackCreateWithoutSuggestionInput, FeedbackUncheckedCreateWithoutSuggestionInput> | FeedbackCreateWithoutSuggestionInput[] | FeedbackUncheckedCreateWithoutSuggestionInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSuggestionInput | FeedbackCreateOrConnectWithoutSuggestionInput[]
    createMany?: FeedbackCreateManySuggestionInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type EnumOccasionFieldUpdateOperationsInput = {
    set?: $Enums.Occasion
  }

  export type StyleSuggestionUpdatecolorsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProductRecommendationUpdateManyWithoutSuggestionNestedInput = {
    create?: XOR<ProductRecommendationCreateWithoutSuggestionInput, ProductRecommendationUncheckedCreateWithoutSuggestionInput> | ProductRecommendationCreateWithoutSuggestionInput[] | ProductRecommendationUncheckedCreateWithoutSuggestionInput[]
    connectOrCreate?: ProductRecommendationCreateOrConnectWithoutSuggestionInput | ProductRecommendationCreateOrConnectWithoutSuggestionInput[]
    upsert?: ProductRecommendationUpsertWithWhereUniqueWithoutSuggestionInput | ProductRecommendationUpsertWithWhereUniqueWithoutSuggestionInput[]
    createMany?: ProductRecommendationCreateManySuggestionInputEnvelope
    set?: ProductRecommendationWhereUniqueInput | ProductRecommendationWhereUniqueInput[]
    disconnect?: ProductRecommendationWhereUniqueInput | ProductRecommendationWhereUniqueInput[]
    delete?: ProductRecommendationWhereUniqueInput | ProductRecommendationWhereUniqueInput[]
    connect?: ProductRecommendationWhereUniqueInput | ProductRecommendationWhereUniqueInput[]
    update?: ProductRecommendationUpdateWithWhereUniqueWithoutSuggestionInput | ProductRecommendationUpdateWithWhereUniqueWithoutSuggestionInput[]
    updateMany?: ProductRecommendationUpdateManyWithWhereWithoutSuggestionInput | ProductRecommendationUpdateManyWithWhereWithoutSuggestionInput[]
    deleteMany?: ProductRecommendationScalarWhereInput | ProductRecommendationScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutSuggestionNestedInput = {
    create?: XOR<FeedbackCreateWithoutSuggestionInput, FeedbackUncheckedCreateWithoutSuggestionInput> | FeedbackCreateWithoutSuggestionInput[] | FeedbackUncheckedCreateWithoutSuggestionInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSuggestionInput | FeedbackCreateOrConnectWithoutSuggestionInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutSuggestionInput | FeedbackUpsertWithWhereUniqueWithoutSuggestionInput[]
    createMany?: FeedbackCreateManySuggestionInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutSuggestionInput | FeedbackUpdateWithWhereUniqueWithoutSuggestionInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutSuggestionInput | FeedbackUpdateManyWithWhereWithoutSuggestionInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type ProductRecommendationUncheckedUpdateManyWithoutSuggestionNestedInput = {
    create?: XOR<ProductRecommendationCreateWithoutSuggestionInput, ProductRecommendationUncheckedCreateWithoutSuggestionInput> | ProductRecommendationCreateWithoutSuggestionInput[] | ProductRecommendationUncheckedCreateWithoutSuggestionInput[]
    connectOrCreate?: ProductRecommendationCreateOrConnectWithoutSuggestionInput | ProductRecommendationCreateOrConnectWithoutSuggestionInput[]
    upsert?: ProductRecommendationUpsertWithWhereUniqueWithoutSuggestionInput | ProductRecommendationUpsertWithWhereUniqueWithoutSuggestionInput[]
    createMany?: ProductRecommendationCreateManySuggestionInputEnvelope
    set?: ProductRecommendationWhereUniqueInput | ProductRecommendationWhereUniqueInput[]
    disconnect?: ProductRecommendationWhereUniqueInput | ProductRecommendationWhereUniqueInput[]
    delete?: ProductRecommendationWhereUniqueInput | ProductRecommendationWhereUniqueInput[]
    connect?: ProductRecommendationWhereUniqueInput | ProductRecommendationWhereUniqueInput[]
    update?: ProductRecommendationUpdateWithWhereUniqueWithoutSuggestionInput | ProductRecommendationUpdateWithWhereUniqueWithoutSuggestionInput[]
    updateMany?: ProductRecommendationUpdateManyWithWhereWithoutSuggestionInput | ProductRecommendationUpdateManyWithWhereWithoutSuggestionInput[]
    deleteMany?: ProductRecommendationScalarWhereInput | ProductRecommendationScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutSuggestionNestedInput = {
    create?: XOR<FeedbackCreateWithoutSuggestionInput, FeedbackUncheckedCreateWithoutSuggestionInput> | FeedbackCreateWithoutSuggestionInput[] | FeedbackUncheckedCreateWithoutSuggestionInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSuggestionInput | FeedbackCreateOrConnectWithoutSuggestionInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutSuggestionInput | FeedbackUpsertWithWhereUniqueWithoutSuggestionInput[]
    createMany?: FeedbackCreateManySuggestionInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutSuggestionInput | FeedbackUpdateWithWhereUniqueWithoutSuggestionInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutSuggestionInput | FeedbackUpdateManyWithWhereWithoutSuggestionInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type StyleSuggestionCreateNestedOneWithoutProductsInput = {
    create?: XOR<StyleSuggestionCreateWithoutProductsInput, StyleSuggestionUncheckedCreateWithoutProductsInput>
    connectOrCreate?: StyleSuggestionCreateOrConnectWithoutProductsInput
    connect?: StyleSuggestionWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPlatformFieldUpdateOperationsInput = {
    set?: $Enums.Platform
  }

  export type EnumProductCategoryFieldUpdateOperationsInput = {
    set?: $Enums.ProductCategory
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StyleSuggestionUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<StyleSuggestionCreateWithoutProductsInput, StyleSuggestionUncheckedCreateWithoutProductsInput>
    connectOrCreate?: StyleSuggestionCreateOrConnectWithoutProductsInput
    upsert?: StyleSuggestionUpsertWithoutProductsInput
    connect?: StyleSuggestionWhereUniqueInput
    update?: XOR<XOR<StyleSuggestionUpdateToOneWithWhereWithoutProductsInput, StyleSuggestionUpdateWithoutProductsInput>, StyleSuggestionUncheckedUpdateWithoutProductsInput>
  }

  export type UserCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    upsert?: UserUpsertWithoutFavoritesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoritesInput, UserUpdateWithoutFavoritesInput>, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type StyleSuggestionCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<StyleSuggestionCreateWithoutFeedbackInput, StyleSuggestionUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: StyleSuggestionCreateOrConnectWithoutFeedbackInput
    connect?: StyleSuggestionWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutFeedbackNestedInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    upsert?: UserUpsertWithoutFeedbackInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbackInput, UserUpdateWithoutFeedbackInput>, UserUncheckedUpdateWithoutFeedbackInput>
  }

  export type StyleSuggestionUpdateOneWithoutFeedbackNestedInput = {
    create?: XOR<StyleSuggestionCreateWithoutFeedbackInput, StyleSuggestionUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: StyleSuggestionCreateOrConnectWithoutFeedbackInput
    upsert?: StyleSuggestionUpsertWithoutFeedbackInput
    disconnect?: StyleSuggestionWhereInput | boolean
    delete?: StyleSuggestionWhereInput | boolean
    connect?: StyleSuggestionWhereUniqueInput
    update?: XOR<XOR<StyleSuggestionUpdateToOneWithWhereWithoutFeedbackInput, StyleSuggestionUpdateWithoutFeedbackInput>, StyleSuggestionUncheckedUpdateWithoutFeedbackInput>
  }

  export type UserCreateNestedOneWithoutPreferencesInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    upsert?: UserUpsertWithoutPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPreferencesInput, UserUpdateWithoutPreferencesInput>, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type SeasonalTrendCreatecolorsInput = {
    set: string[]
  }

  export type SeasonalTrendCreatekeyPiecesInput = {
    set: string[]
  }

  export type SeasonalTrendCreatetagsInput = {
    set: string[]
  }

  export type TrendProductCreateNestedManyWithoutTrendInput = {
    create?: XOR<TrendProductCreateWithoutTrendInput, TrendProductUncheckedCreateWithoutTrendInput> | TrendProductCreateWithoutTrendInput[] | TrendProductUncheckedCreateWithoutTrendInput[]
    connectOrCreate?: TrendProductCreateOrConnectWithoutTrendInput | TrendProductCreateOrConnectWithoutTrendInput[]
    createMany?: TrendProductCreateManyTrendInputEnvelope
    connect?: TrendProductWhereUniqueInput | TrendProductWhereUniqueInput[]
  }

  export type TrendProductUncheckedCreateNestedManyWithoutTrendInput = {
    create?: XOR<TrendProductCreateWithoutTrendInput, TrendProductUncheckedCreateWithoutTrendInput> | TrendProductCreateWithoutTrendInput[] | TrendProductUncheckedCreateWithoutTrendInput[]
    connectOrCreate?: TrendProductCreateOrConnectWithoutTrendInput | TrendProductCreateOrConnectWithoutTrendInput[]
    createMany?: TrendProductCreateManyTrendInputEnvelope
    connect?: TrendProductWhereUniqueInput | TrendProductWhereUniqueInput[]
  }

  export type SeasonalTrendUpdatecolorsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SeasonalTrendUpdatekeyPiecesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SeasonalTrendUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TrendProductUpdateManyWithoutTrendNestedInput = {
    create?: XOR<TrendProductCreateWithoutTrendInput, TrendProductUncheckedCreateWithoutTrendInput> | TrendProductCreateWithoutTrendInput[] | TrendProductUncheckedCreateWithoutTrendInput[]
    connectOrCreate?: TrendProductCreateOrConnectWithoutTrendInput | TrendProductCreateOrConnectWithoutTrendInput[]
    upsert?: TrendProductUpsertWithWhereUniqueWithoutTrendInput | TrendProductUpsertWithWhereUniqueWithoutTrendInput[]
    createMany?: TrendProductCreateManyTrendInputEnvelope
    set?: TrendProductWhereUniqueInput | TrendProductWhereUniqueInput[]
    disconnect?: TrendProductWhereUniqueInput | TrendProductWhereUniqueInput[]
    delete?: TrendProductWhereUniqueInput | TrendProductWhereUniqueInput[]
    connect?: TrendProductWhereUniqueInput | TrendProductWhereUniqueInput[]
    update?: TrendProductUpdateWithWhereUniqueWithoutTrendInput | TrendProductUpdateWithWhereUniqueWithoutTrendInput[]
    updateMany?: TrendProductUpdateManyWithWhereWithoutTrendInput | TrendProductUpdateManyWithWhereWithoutTrendInput[]
    deleteMany?: TrendProductScalarWhereInput | TrendProductScalarWhereInput[]
  }

  export type TrendProductUncheckedUpdateManyWithoutTrendNestedInput = {
    create?: XOR<TrendProductCreateWithoutTrendInput, TrendProductUncheckedCreateWithoutTrendInput> | TrendProductCreateWithoutTrendInput[] | TrendProductUncheckedCreateWithoutTrendInput[]
    connectOrCreate?: TrendProductCreateOrConnectWithoutTrendInput | TrendProductCreateOrConnectWithoutTrendInput[]
    upsert?: TrendProductUpsertWithWhereUniqueWithoutTrendInput | TrendProductUpsertWithWhereUniqueWithoutTrendInput[]
    createMany?: TrendProductCreateManyTrendInputEnvelope
    set?: TrendProductWhereUniqueInput | TrendProductWhereUniqueInput[]
    disconnect?: TrendProductWhereUniqueInput | TrendProductWhereUniqueInput[]
    delete?: TrendProductWhereUniqueInput | TrendProductWhereUniqueInput[]
    connect?: TrendProductWhereUniqueInput | TrendProductWhereUniqueInput[]
    update?: TrendProductUpdateWithWhereUniqueWithoutTrendInput | TrendProductUpdateWithWhereUniqueWithoutTrendInput[]
    updateMany?: TrendProductUpdateManyWithWhereWithoutTrendInput | TrendProductUpdateManyWithWhereWithoutTrendInput[]
    deleteMany?: TrendProductScalarWhereInput | TrendProductScalarWhereInput[]
  }

  export type SeasonalTrendCreateNestedOneWithoutProductsInput = {
    create?: XOR<SeasonalTrendCreateWithoutProductsInput, SeasonalTrendUncheckedCreateWithoutProductsInput>
    connectOrCreate?: SeasonalTrendCreateOrConnectWithoutProductsInput
    connect?: SeasonalTrendWhereUniqueInput
  }

  export type SeasonalTrendUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<SeasonalTrendCreateWithoutProductsInput, SeasonalTrendUncheckedCreateWithoutProductsInput>
    connectOrCreate?: SeasonalTrendCreateOrConnectWithoutProductsInput
    upsert?: SeasonalTrendUpsertWithoutProductsInput
    connect?: SeasonalTrendWhereUniqueInput
    update?: XOR<XOR<SeasonalTrendUpdateToOneWithWhereWithoutProductsInput, SeasonalTrendUpdateWithoutProductsInput>, SeasonalTrendUncheckedUpdateWithoutProductsInput>
  }

  export type UserCreateNestedOneWithoutPhotoAnalysesInput = {
    create?: XOR<UserCreateWithoutPhotoAnalysesInput, UserUncheckedCreateWithoutPhotoAnalysesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPhotoAnalysesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAnalysisTypeFieldUpdateOperationsInput = {
    set?: $Enums.AnalysisType
  }

  export type UserUpdateOneRequiredWithoutPhotoAnalysesNestedInput = {
    create?: XOR<UserCreateWithoutPhotoAnalysesInput, UserUncheckedCreateWithoutPhotoAnalysesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPhotoAnalysesInput
    upsert?: UserUpsertWithoutPhotoAnalysesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPhotoAnalysesInput, UserUpdateWithoutPhotoAnalysesInput>, UserUncheckedUpdateWithoutPhotoAnalysesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumBodyTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BodyType | EnumBodyTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BodyType[] | ListEnumBodyTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BodyType[] | ListEnumBodyTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBodyTypeNullableFilter<$PrismaModel> | $Enums.BodyType | null
  }

  export type NestedEnumFaceShapeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.FaceShape | EnumFaceShapeFieldRefInput<$PrismaModel> | null
    in?: $Enums.FaceShape[] | ListEnumFaceShapeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.FaceShape[] | ListEnumFaceShapeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFaceShapeNullableFilter<$PrismaModel> | $Enums.FaceShape | null
  }

  export type NestedEnumSkinToneNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.SkinTone | EnumSkinToneFieldRefInput<$PrismaModel> | null
    in?: $Enums.SkinTone[] | ListEnumSkinToneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SkinTone[] | ListEnumSkinToneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSkinToneNullableFilter<$PrismaModel> | $Enums.SkinTone | null
  }

  export type NestedEnumBudgetRangeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetRange | EnumBudgetRangeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BudgetRange[] | ListEnumBudgetRangeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BudgetRange[] | ListEnumBudgetRangeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBudgetRangeNullableFilter<$PrismaModel> | $Enums.BudgetRange | null
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumBodyTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BodyType | EnumBodyTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BodyType[] | ListEnumBodyTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BodyType[] | ListEnumBodyTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBodyTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BodyType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBodyTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBodyTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumFaceShapeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FaceShape | EnumFaceShapeFieldRefInput<$PrismaModel> | null
    in?: $Enums.FaceShape[] | ListEnumFaceShapeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.FaceShape[] | ListEnumFaceShapeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFaceShapeNullableWithAggregatesFilter<$PrismaModel> | $Enums.FaceShape | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumFaceShapeNullableFilter<$PrismaModel>
    _max?: NestedEnumFaceShapeNullableFilter<$PrismaModel>
  }

  export type NestedEnumSkinToneNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SkinTone | EnumSkinToneFieldRefInput<$PrismaModel> | null
    in?: $Enums.SkinTone[] | ListEnumSkinToneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SkinTone[] | ListEnumSkinToneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSkinToneNullableWithAggregatesFilter<$PrismaModel> | $Enums.SkinTone | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSkinToneNullableFilter<$PrismaModel>
    _max?: NestedEnumSkinToneNullableFilter<$PrismaModel>
  }

  export type NestedEnumBudgetRangeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetRange | EnumBudgetRangeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BudgetRange[] | ListEnumBudgetRangeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BudgetRange[] | ListEnumBudgetRangeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBudgetRangeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BudgetRange | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBudgetRangeNullableFilter<$PrismaModel>
    _max?: NestedEnumBudgetRangeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPhotoTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoType | EnumPhotoTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoTypeFilter<$PrismaModel> | $Enums.PhotoType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumPhotoTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoType | EnumPhotoTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoType[] | ListEnumPhotoTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoTypeWithAggregatesFilter<$PrismaModel> | $Enums.PhotoType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhotoTypeFilter<$PrismaModel>
    _max?: NestedEnumPhotoTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumOccasionFilter<$PrismaModel = never> = {
    equals?: $Enums.Occasion | EnumOccasionFieldRefInput<$PrismaModel>
    in?: $Enums.Occasion[] | ListEnumOccasionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Occasion[] | ListEnumOccasionFieldRefInput<$PrismaModel>
    not?: NestedEnumOccasionFilter<$PrismaModel> | $Enums.Occasion
  }

  export type NestedEnumOccasionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Occasion | EnumOccasionFieldRefInput<$PrismaModel>
    in?: $Enums.Occasion[] | ListEnumOccasionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Occasion[] | ListEnumOccasionFieldRefInput<$PrismaModel>
    not?: NestedEnumOccasionWithAggregatesFilter<$PrismaModel> | $Enums.Occasion
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOccasionFilter<$PrismaModel>
    _max?: NestedEnumOccasionFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumPlatformFilter<$PrismaModel = never> = {
    equals?: $Enums.Platform | EnumPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlatformFilter<$PrismaModel> | $Enums.Platform
  }

  export type NestedEnumProductCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductCategory | EnumProductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProductCategoryFilter<$PrismaModel> | $Enums.ProductCategory
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumPlatformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Platform | EnumPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlatformWithAggregatesFilter<$PrismaModel> | $Enums.Platform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlatformFilter<$PrismaModel>
    _max?: NestedEnumPlatformFilter<$PrismaModel>
  }

  export type NestedEnumProductCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductCategory | EnumProductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProductCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ProductCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductCategoryFilter<$PrismaModel>
    _max?: NestedEnumProductCategoryFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumAnalysisTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AnalysisType | EnumAnalysisTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnalysisType[] | ListEnumAnalysisTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnalysisType[] | ListEnumAnalysisTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAnalysisTypeFilter<$PrismaModel> | $Enums.AnalysisType
  }

  export type NestedEnumAnalysisTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnalysisType | EnumAnalysisTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AnalysisType[] | ListEnumAnalysisTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnalysisType[] | ListEnumAnalysisTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAnalysisTypeWithAggregatesFilter<$PrismaModel> | $Enums.AnalysisType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnalysisTypeFilter<$PrismaModel>
    _max?: NestedEnumAnalysisTypeFilter<$PrismaModel>
  }

  export type UserProfileCreateWithoutUserInput = {
    id?: string
    gender: $Enums.Gender
    height?: number | null
    weight?: number | null
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    styleType?: UserProfileCreatestyleTypeInput | $Enums.StyleType[]
    budgetRange?: $Enums.BudgetRange | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    id?: string
    gender: $Enums.Gender
    height?: number | null
    weight?: number | null
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    styleType?: UserProfileCreatestyleTypeInput | $Enums.StyleType[]
    budgetRange?: $Enums.BudgetRange | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type UserPhotoCreateWithoutUserInput = {
    id?: string
    url: string
    type: $Enums.PhotoType
    isActive?: boolean
    publicId: string
    createdAt?: Date | string
  }

  export type UserPhotoUncheckedCreateWithoutUserInput = {
    id?: string
    url: string
    type: $Enums.PhotoType
    isActive?: boolean
    publicId: string
    createdAt?: Date | string
  }

  export type UserPhotoCreateOrConnectWithoutUserInput = {
    where: UserPhotoWhereUniqueInput
    create: XOR<UserPhotoCreateWithoutUserInput, UserPhotoUncheckedCreateWithoutUserInput>
  }

  export type UserPhotoCreateManyUserInputEnvelope = {
    data: UserPhotoCreateManyUserInput | UserPhotoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPreferenceCreateWithoutUserInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUncheckedCreateWithoutUserInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceCreateOrConnectWithoutUserInput = {
    where: UserPreferenceWhereUniqueInput
    create: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
  }

  export type UserPreferenceCreateManyUserInputEnvelope = {
    data: UserPreferenceCreateManyUserInput | UserPreferenceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteCreateWithoutUserInput = {
    id?: string
    productId: string
    name: string
    brand: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    createdAt?: Date | string
  }

  export type FavoriteUncheckedCreateWithoutUserInput = {
    id?: string
    productId: string
    name: string
    brand: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    createdAt?: Date | string
  }

  export type FavoriteCreateOrConnectWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteCreateManyUserInputEnvelope = {
    data: FavoriteCreateManyUserInput | FavoriteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutUserInput = {
    id?: string
    rating: number
    liked: boolean
    comment?: string | null
    createdAt?: Date | string
    suggestion?: StyleSuggestionCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    id?: string
    suggestionId?: string | null
    rating: number
    liked: boolean
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: FeedbackCreateManyUserInput | FeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PhotoAnalysisCreateWithoutUserInput = {
    id?: string
    photoUrl: string
    analysisType: $Enums.AnalysisType
    detectedValue?: string | null
    confidence?: number | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type PhotoAnalysisUncheckedCreateWithoutUserInput = {
    id?: string
    photoUrl: string
    analysisType: $Enums.AnalysisType
    detectedValue?: string | null
    confidence?: number | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type PhotoAnalysisCreateOrConnectWithoutUserInput = {
    where: PhotoAnalysisWhereUniqueInput
    create: XOR<PhotoAnalysisCreateWithoutUserInput, PhotoAnalysisUncheckedCreateWithoutUserInput>
  }

  export type PhotoAnalysisCreateManyUserInputEnvelope = {
    data: PhotoAnalysisCreateManyUserInput | PhotoAnalysisCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    where?: UserProfileWhereInput
  }

  export type UserProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UserProfileWhereInput
    data: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    styleType?: UserProfileUpdatestyleTypeInput | $Enums.StyleType[]
    budgetRange?: NullableEnumBudgetRangeFieldUpdateOperationsInput | $Enums.BudgetRange | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    styleType?: UserProfileUpdatestyleTypeInput | $Enums.StyleType[]
    budgetRange?: NullableEnumBudgetRangeFieldUpdateOperationsInput | $Enums.BudgetRange | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPhotoUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPhotoWhereUniqueInput
    update: XOR<UserPhotoUpdateWithoutUserInput, UserPhotoUncheckedUpdateWithoutUserInput>
    create: XOR<UserPhotoCreateWithoutUserInput, UserPhotoUncheckedCreateWithoutUserInput>
  }

  export type UserPhotoUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPhotoWhereUniqueInput
    data: XOR<UserPhotoUpdateWithoutUserInput, UserPhotoUncheckedUpdateWithoutUserInput>
  }

  export type UserPhotoUpdateManyWithWhereWithoutUserInput = {
    where: UserPhotoScalarWhereInput
    data: XOR<UserPhotoUpdateManyMutationInput, UserPhotoUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPhotoScalarWhereInput = {
    AND?: UserPhotoScalarWhereInput | UserPhotoScalarWhereInput[]
    OR?: UserPhotoScalarWhereInput[]
    NOT?: UserPhotoScalarWhereInput | UserPhotoScalarWhereInput[]
    id?: StringFilter<"UserPhoto"> | string
    userId?: StringFilter<"UserPhoto"> | string
    url?: StringFilter<"UserPhoto"> | string
    type?: EnumPhotoTypeFilter<"UserPhoto"> | $Enums.PhotoType
    isActive?: BoolFilter<"UserPhoto"> | boolean
    publicId?: StringFilter<"UserPhoto"> | string
    createdAt?: DateTimeFilter<"UserPhoto"> | Date | string
  }

  export type UserPreferenceUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPreferenceWhereUniqueInput
    update: XOR<UserPreferenceUpdateWithoutUserInput, UserPreferenceUncheckedUpdateWithoutUserInput>
    create: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
  }

  export type UserPreferenceUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPreferenceWhereUniqueInput
    data: XOR<UserPreferenceUpdateWithoutUserInput, UserPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type UserPreferenceUpdateManyWithWhereWithoutUserInput = {
    where: UserPreferenceScalarWhereInput
    data: XOR<UserPreferenceUpdateManyMutationInput, UserPreferenceUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPreferenceScalarWhereInput = {
    AND?: UserPreferenceScalarWhereInput | UserPreferenceScalarWhereInput[]
    OR?: UserPreferenceScalarWhereInput[]
    NOT?: UserPreferenceScalarWhereInput | UserPreferenceScalarWhereInput[]
    id?: StringFilter<"UserPreference"> | string
    userId?: StringFilter<"UserPreference"> | string
    key?: StringFilter<"UserPreference"> | string
    value?: StringFilter<"UserPreference"> | string
    createdAt?: DateTimeFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreference"> | Date | string
  }

  export type FavoriteUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    update: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    data: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteScalarWhereInput
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteScalarWhereInput = {
    AND?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    OR?: FavoriteScalarWhereInput[]
    NOT?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    id?: StringFilter<"Favorite"> | string
    userId?: StringFilter<"Favorite"> | string
    productId?: StringFilter<"Favorite"> | string
    name?: StringFilter<"Favorite"> | string
    brand?: StringFilter<"Favorite"> | string
    imageUrl?: StringFilter<"Favorite"> | string
    productUrl?: StringFilter<"Favorite"> | string
    platform?: EnumPlatformFilter<"Favorite"> | $Enums.Platform
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: StringFilter<"Feedback"> | string
    userId?: StringFilter<"Feedback"> | string
    suggestionId?: StringNullableFilter<"Feedback"> | string | null
    rating?: IntFilter<"Feedback"> | number
    liked?: BoolFilter<"Feedback"> | boolean
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
  }

  export type PhotoAnalysisUpsertWithWhereUniqueWithoutUserInput = {
    where: PhotoAnalysisWhereUniqueInput
    update: XOR<PhotoAnalysisUpdateWithoutUserInput, PhotoAnalysisUncheckedUpdateWithoutUserInput>
    create: XOR<PhotoAnalysisCreateWithoutUserInput, PhotoAnalysisUncheckedCreateWithoutUserInput>
  }

  export type PhotoAnalysisUpdateWithWhereUniqueWithoutUserInput = {
    where: PhotoAnalysisWhereUniqueInput
    data: XOR<PhotoAnalysisUpdateWithoutUserInput, PhotoAnalysisUncheckedUpdateWithoutUserInput>
  }

  export type PhotoAnalysisUpdateManyWithWhereWithoutUserInput = {
    where: PhotoAnalysisScalarWhereInput
    data: XOR<PhotoAnalysisUpdateManyMutationInput, PhotoAnalysisUncheckedUpdateManyWithoutUserInput>
  }

  export type PhotoAnalysisScalarWhereInput = {
    AND?: PhotoAnalysisScalarWhereInput | PhotoAnalysisScalarWhereInput[]
    OR?: PhotoAnalysisScalarWhereInput[]
    NOT?: PhotoAnalysisScalarWhereInput | PhotoAnalysisScalarWhereInput[]
    id?: StringFilter<"PhotoAnalysis"> | string
    userId?: StringFilter<"PhotoAnalysis"> | string
    photoUrl?: StringFilter<"PhotoAnalysis"> | string
    analysisType?: EnumAnalysisTypeFilter<"PhotoAnalysis"> | $Enums.AnalysisType
    detectedValue?: StringNullableFilter<"PhotoAnalysis"> | string | null
    confidence?: FloatNullableFilter<"PhotoAnalysis"> | number | null
    metadata?: StringNullableFilter<"PhotoAnalysis"> | string | null
    createdAt?: DateTimeFilter<"PhotoAnalysis"> | Date | string
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: UserPhotoCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: UserPhotoUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: UserPhotoUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: UserPhotoUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPhotosInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPhotosInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPhotosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPhotosInput, UserUncheckedCreateWithoutPhotosInput>
  }

  export type UserUpsertWithoutPhotosInput = {
    update: XOR<UserUpdateWithoutPhotosInput, UserUncheckedUpdateWithoutPhotosInput>
    create: XOR<UserCreateWithoutPhotosInput, UserUncheckedCreateWithoutPhotosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPhotosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPhotosInput, UserUncheckedUpdateWithoutPhotosInput>
  }

  export type UserUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductRecommendationCreateWithoutSuggestionInput = {
    id?: string
    productId: string
    name: string
    brand: string
    price: number
    currency?: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    category: $Enums.ProductCategory
    rating?: number | null
    reviewCount?: number | null
    inStock?: boolean
    createdAt?: Date | string
  }

  export type ProductRecommendationUncheckedCreateWithoutSuggestionInput = {
    id?: string
    productId: string
    name: string
    brand: string
    price: number
    currency?: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    category: $Enums.ProductCategory
    rating?: number | null
    reviewCount?: number | null
    inStock?: boolean
    createdAt?: Date | string
  }

  export type ProductRecommendationCreateOrConnectWithoutSuggestionInput = {
    where: ProductRecommendationWhereUniqueInput
    create: XOR<ProductRecommendationCreateWithoutSuggestionInput, ProductRecommendationUncheckedCreateWithoutSuggestionInput>
  }

  export type ProductRecommendationCreateManySuggestionInputEnvelope = {
    data: ProductRecommendationCreateManySuggestionInput | ProductRecommendationCreateManySuggestionInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutSuggestionInput = {
    id?: string
    rating: number
    liked: boolean
    comment?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutSuggestionInput = {
    id?: string
    userId: string
    rating: number
    liked: boolean
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutSuggestionInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutSuggestionInput, FeedbackUncheckedCreateWithoutSuggestionInput>
  }

  export type FeedbackCreateManySuggestionInputEnvelope = {
    data: FeedbackCreateManySuggestionInput | FeedbackCreateManySuggestionInput[]
    skipDuplicates?: boolean
  }

  export type ProductRecommendationUpsertWithWhereUniqueWithoutSuggestionInput = {
    where: ProductRecommendationWhereUniqueInput
    update: XOR<ProductRecommendationUpdateWithoutSuggestionInput, ProductRecommendationUncheckedUpdateWithoutSuggestionInput>
    create: XOR<ProductRecommendationCreateWithoutSuggestionInput, ProductRecommendationUncheckedCreateWithoutSuggestionInput>
  }

  export type ProductRecommendationUpdateWithWhereUniqueWithoutSuggestionInput = {
    where: ProductRecommendationWhereUniqueInput
    data: XOR<ProductRecommendationUpdateWithoutSuggestionInput, ProductRecommendationUncheckedUpdateWithoutSuggestionInput>
  }

  export type ProductRecommendationUpdateManyWithWhereWithoutSuggestionInput = {
    where: ProductRecommendationScalarWhereInput
    data: XOR<ProductRecommendationUpdateManyMutationInput, ProductRecommendationUncheckedUpdateManyWithoutSuggestionInput>
  }

  export type ProductRecommendationScalarWhereInput = {
    AND?: ProductRecommendationScalarWhereInput | ProductRecommendationScalarWhereInput[]
    OR?: ProductRecommendationScalarWhereInput[]
    NOT?: ProductRecommendationScalarWhereInput | ProductRecommendationScalarWhereInput[]
    id?: StringFilter<"ProductRecommendation"> | string
    suggestionId?: StringFilter<"ProductRecommendation"> | string
    productId?: StringFilter<"ProductRecommendation"> | string
    name?: StringFilter<"ProductRecommendation"> | string
    brand?: StringFilter<"ProductRecommendation"> | string
    price?: FloatFilter<"ProductRecommendation"> | number
    currency?: StringFilter<"ProductRecommendation"> | string
    imageUrl?: StringFilter<"ProductRecommendation"> | string
    productUrl?: StringFilter<"ProductRecommendation"> | string
    platform?: EnumPlatformFilter<"ProductRecommendation"> | $Enums.Platform
    category?: EnumProductCategoryFilter<"ProductRecommendation"> | $Enums.ProductCategory
    rating?: FloatNullableFilter<"ProductRecommendation"> | number | null
    reviewCount?: IntNullableFilter<"ProductRecommendation"> | number | null
    inStock?: BoolFilter<"ProductRecommendation"> | boolean
    createdAt?: DateTimeFilter<"ProductRecommendation"> | Date | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutSuggestionInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutSuggestionInput, FeedbackUncheckedUpdateWithoutSuggestionInput>
    create: XOR<FeedbackCreateWithoutSuggestionInput, FeedbackUncheckedCreateWithoutSuggestionInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutSuggestionInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutSuggestionInput, FeedbackUncheckedUpdateWithoutSuggestionInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutSuggestionInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutSuggestionInput>
  }

  export type StyleSuggestionCreateWithoutProductsInput = {
    id?: string
    userId: string
    occasion: $Enums.Occasion
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    outfitDesc: string
    hairstyle?: string | null
    accessories?: string | null
    skincare?: string | null
    colors?: StyleSuggestionCreatecolorsInput | string[]
    outfitImageUrl?: string | null
    styleImageUrl?: string | null
    confidence?: number | null
    createdAt?: Date | string
    feedback?: FeedbackCreateNestedManyWithoutSuggestionInput
  }

  export type StyleSuggestionUncheckedCreateWithoutProductsInput = {
    id?: string
    userId: string
    occasion: $Enums.Occasion
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    outfitDesc: string
    hairstyle?: string | null
    accessories?: string | null
    skincare?: string | null
    colors?: StyleSuggestionCreatecolorsInput | string[]
    outfitImageUrl?: string | null
    styleImageUrl?: string | null
    confidence?: number | null
    createdAt?: Date | string
    feedback?: FeedbackUncheckedCreateNestedManyWithoutSuggestionInput
  }

  export type StyleSuggestionCreateOrConnectWithoutProductsInput = {
    where: StyleSuggestionWhereUniqueInput
    create: XOR<StyleSuggestionCreateWithoutProductsInput, StyleSuggestionUncheckedCreateWithoutProductsInput>
  }

  export type StyleSuggestionUpsertWithoutProductsInput = {
    update: XOR<StyleSuggestionUpdateWithoutProductsInput, StyleSuggestionUncheckedUpdateWithoutProductsInput>
    create: XOR<StyleSuggestionCreateWithoutProductsInput, StyleSuggestionUncheckedCreateWithoutProductsInput>
    where?: StyleSuggestionWhereInput
  }

  export type StyleSuggestionUpdateToOneWithWhereWithoutProductsInput = {
    where?: StyleSuggestionWhereInput
    data: XOR<StyleSuggestionUpdateWithoutProductsInput, StyleSuggestionUncheckedUpdateWithoutProductsInput>
  }

  export type StyleSuggestionUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    occasion?: EnumOccasionFieldUpdateOperationsInput | $Enums.Occasion
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    outfitDesc?: StringFieldUpdateOperationsInput | string
    hairstyle?: NullableStringFieldUpdateOperationsInput | string | null
    accessories?: NullableStringFieldUpdateOperationsInput | string | null
    skincare?: NullableStringFieldUpdateOperationsInput | string | null
    colors?: StyleSuggestionUpdatecolorsInput | string[]
    outfitImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    styleImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedback?: FeedbackUpdateManyWithoutSuggestionNestedInput
  }

  export type StyleSuggestionUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    occasion?: EnumOccasionFieldUpdateOperationsInput | $Enums.Occasion
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    outfitDesc?: StringFieldUpdateOperationsInput | string
    hairstyle?: NullableStringFieldUpdateOperationsInput | string | null
    accessories?: NullableStringFieldUpdateOperationsInput | string | null
    skincare?: NullableStringFieldUpdateOperationsInput | string | null
    colors?: StyleSuggestionUpdatecolorsInput | string[]
    outfitImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    styleImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedback?: FeedbackUncheckedUpdateManyWithoutSuggestionNestedInput
  }

  export type UserCreateWithoutFavoritesInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    photos?: UserPhotoCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoritesInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    photos?: UserPhotoUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoritesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
  }

  export type UserUpsertWithoutFavoritesInput = {
    update: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    photos?: UserPhotoUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    photos?: UserPhotoUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFeedbackInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    photos?: UserPhotoCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbackInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    photos?: UserPhotoUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
  }

  export type StyleSuggestionCreateWithoutFeedbackInput = {
    id?: string
    userId: string
    occasion: $Enums.Occasion
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    outfitDesc: string
    hairstyle?: string | null
    accessories?: string | null
    skincare?: string | null
    colors?: StyleSuggestionCreatecolorsInput | string[]
    outfitImageUrl?: string | null
    styleImageUrl?: string | null
    confidence?: number | null
    createdAt?: Date | string
    products?: ProductRecommendationCreateNestedManyWithoutSuggestionInput
  }

  export type StyleSuggestionUncheckedCreateWithoutFeedbackInput = {
    id?: string
    userId: string
    occasion: $Enums.Occasion
    bodyType?: $Enums.BodyType | null
    faceShape?: $Enums.FaceShape | null
    skinTone?: $Enums.SkinTone | null
    outfitDesc: string
    hairstyle?: string | null
    accessories?: string | null
    skincare?: string | null
    colors?: StyleSuggestionCreatecolorsInput | string[]
    outfitImageUrl?: string | null
    styleImageUrl?: string | null
    confidence?: number | null
    createdAt?: Date | string
    products?: ProductRecommendationUncheckedCreateNestedManyWithoutSuggestionInput
  }

  export type StyleSuggestionCreateOrConnectWithoutFeedbackInput = {
    where: StyleSuggestionWhereUniqueInput
    create: XOR<StyleSuggestionCreateWithoutFeedbackInput, StyleSuggestionUncheckedCreateWithoutFeedbackInput>
  }

  export type UserUpsertWithoutFeedbackInput = {
    update: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
  }

  export type UserUpdateWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    photos?: UserPhotoUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    photos?: UserPhotoUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StyleSuggestionUpsertWithoutFeedbackInput = {
    update: XOR<StyleSuggestionUpdateWithoutFeedbackInput, StyleSuggestionUncheckedUpdateWithoutFeedbackInput>
    create: XOR<StyleSuggestionCreateWithoutFeedbackInput, StyleSuggestionUncheckedCreateWithoutFeedbackInput>
    where?: StyleSuggestionWhereInput
  }

  export type StyleSuggestionUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: StyleSuggestionWhereInput
    data: XOR<StyleSuggestionUpdateWithoutFeedbackInput, StyleSuggestionUncheckedUpdateWithoutFeedbackInput>
  }

  export type StyleSuggestionUpdateWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    occasion?: EnumOccasionFieldUpdateOperationsInput | $Enums.Occasion
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    outfitDesc?: StringFieldUpdateOperationsInput | string
    hairstyle?: NullableStringFieldUpdateOperationsInput | string | null
    accessories?: NullableStringFieldUpdateOperationsInput | string | null
    skincare?: NullableStringFieldUpdateOperationsInput | string | null
    colors?: StyleSuggestionUpdatecolorsInput | string[]
    outfitImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    styleImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductRecommendationUpdateManyWithoutSuggestionNestedInput
  }

  export type StyleSuggestionUncheckedUpdateWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    occasion?: EnumOccasionFieldUpdateOperationsInput | $Enums.Occasion
    bodyType?: NullableEnumBodyTypeFieldUpdateOperationsInput | $Enums.BodyType | null
    faceShape?: NullableEnumFaceShapeFieldUpdateOperationsInput | $Enums.FaceShape | null
    skinTone?: NullableEnumSkinToneFieldUpdateOperationsInput | $Enums.SkinTone | null
    outfitDesc?: StringFieldUpdateOperationsInput | string
    hairstyle?: NullableStringFieldUpdateOperationsInput | string | null
    accessories?: NullableStringFieldUpdateOperationsInput | string | null
    skincare?: NullableStringFieldUpdateOperationsInput | string | null
    colors?: StyleSuggestionUpdatecolorsInput | string[]
    outfitImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    styleImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductRecommendationUncheckedUpdateManyWithoutSuggestionNestedInput
  }

  export type UserCreateWithoutPreferencesInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    photos?: UserPhotoCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPreferencesInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    photos?: UserPhotoUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    photoAnalyses?: PhotoAnalysisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
  }

  export type UserUpsertWithoutPreferencesInput = {
    update: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type UserUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    photos?: UserPhotoUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    photos?: UserPhotoUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    photoAnalyses?: PhotoAnalysisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TrendProductCreateWithoutTrendInput = {
    id?: string
    productId: string
    name: string
    brand: string
    price: number
    originalPrice?: number | null
    currency?: string
    imageUrl: string
    productUrl: string
    category: $Enums.ProductCategory
    rating?: number | null
    inStock?: boolean
    featured?: boolean
    createdAt?: Date | string
  }

  export type TrendProductUncheckedCreateWithoutTrendInput = {
    id?: string
    productId: string
    name: string
    brand: string
    price: number
    originalPrice?: number | null
    currency?: string
    imageUrl: string
    productUrl: string
    category: $Enums.ProductCategory
    rating?: number | null
    inStock?: boolean
    featured?: boolean
    createdAt?: Date | string
  }

  export type TrendProductCreateOrConnectWithoutTrendInput = {
    where: TrendProductWhereUniqueInput
    create: XOR<TrendProductCreateWithoutTrendInput, TrendProductUncheckedCreateWithoutTrendInput>
  }

  export type TrendProductCreateManyTrendInputEnvelope = {
    data: TrendProductCreateManyTrendInput | TrendProductCreateManyTrendInput[]
    skipDuplicates?: boolean
  }

  export type TrendProductUpsertWithWhereUniqueWithoutTrendInput = {
    where: TrendProductWhereUniqueInput
    update: XOR<TrendProductUpdateWithoutTrendInput, TrendProductUncheckedUpdateWithoutTrendInput>
    create: XOR<TrendProductCreateWithoutTrendInput, TrendProductUncheckedCreateWithoutTrendInput>
  }

  export type TrendProductUpdateWithWhereUniqueWithoutTrendInput = {
    where: TrendProductWhereUniqueInput
    data: XOR<TrendProductUpdateWithoutTrendInput, TrendProductUncheckedUpdateWithoutTrendInput>
  }

  export type TrendProductUpdateManyWithWhereWithoutTrendInput = {
    where: TrendProductScalarWhereInput
    data: XOR<TrendProductUpdateManyMutationInput, TrendProductUncheckedUpdateManyWithoutTrendInput>
  }

  export type TrendProductScalarWhereInput = {
    AND?: TrendProductScalarWhereInput | TrendProductScalarWhereInput[]
    OR?: TrendProductScalarWhereInput[]
    NOT?: TrendProductScalarWhereInput | TrendProductScalarWhereInput[]
    id?: StringFilter<"TrendProduct"> | string
    trendId?: StringFilter<"TrendProduct"> | string
    productId?: StringFilter<"TrendProduct"> | string
    name?: StringFilter<"TrendProduct"> | string
    brand?: StringFilter<"TrendProduct"> | string
    price?: FloatFilter<"TrendProduct"> | number
    originalPrice?: FloatNullableFilter<"TrendProduct"> | number | null
    currency?: StringFilter<"TrendProduct"> | string
    imageUrl?: StringFilter<"TrendProduct"> | string
    productUrl?: StringFilter<"TrendProduct"> | string
    category?: EnumProductCategoryFilter<"TrendProduct"> | $Enums.ProductCategory
    rating?: FloatNullableFilter<"TrendProduct"> | number | null
    inStock?: BoolFilter<"TrendProduct"> | boolean
    featured?: BoolFilter<"TrendProduct"> | boolean
    createdAt?: DateTimeFilter<"TrendProduct"> | Date | string
  }

  export type SeasonalTrendCreateWithoutProductsInput = {
    id?: string
    title: string
    description: string
    season: string
    popularity: number
    imageUrl: string
    colors?: SeasonalTrendCreatecolorsInput | string[]
    keyPieces?: SeasonalTrendCreatekeyPiecesInput | string[]
    tags?: SeasonalTrendCreatetagsInput | string[]
    isActive?: boolean
    priority?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SeasonalTrendUncheckedCreateWithoutProductsInput = {
    id?: string
    title: string
    description: string
    season: string
    popularity: number
    imageUrl: string
    colors?: SeasonalTrendCreatecolorsInput | string[]
    keyPieces?: SeasonalTrendCreatekeyPiecesInput | string[]
    tags?: SeasonalTrendCreatetagsInput | string[]
    isActive?: boolean
    priority?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SeasonalTrendCreateOrConnectWithoutProductsInput = {
    where: SeasonalTrendWhereUniqueInput
    create: XOR<SeasonalTrendCreateWithoutProductsInput, SeasonalTrendUncheckedCreateWithoutProductsInput>
  }

  export type SeasonalTrendUpsertWithoutProductsInput = {
    update: XOR<SeasonalTrendUpdateWithoutProductsInput, SeasonalTrendUncheckedUpdateWithoutProductsInput>
    create: XOR<SeasonalTrendCreateWithoutProductsInput, SeasonalTrendUncheckedCreateWithoutProductsInput>
    where?: SeasonalTrendWhereInput
  }

  export type SeasonalTrendUpdateToOneWithWhereWithoutProductsInput = {
    where?: SeasonalTrendWhereInput
    data: XOR<SeasonalTrendUpdateWithoutProductsInput, SeasonalTrendUncheckedUpdateWithoutProductsInput>
  }

  export type SeasonalTrendUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    popularity?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    colors?: SeasonalTrendUpdatecolorsInput | string[]
    keyPieces?: SeasonalTrendUpdatekeyPiecesInput | string[]
    tags?: SeasonalTrendUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeasonalTrendUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    popularity?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    colors?: SeasonalTrendUpdatecolorsInput | string[]
    keyPieces?: SeasonalTrendUpdatekeyPiecesInput | string[]
    tags?: SeasonalTrendUpdatetagsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutPhotoAnalysesInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    photos?: UserPhotoCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    feedback?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPhotoAnalysesInput = {
    id?: string
    email: string
    password?: string | null
    name: string
    avatar?: string | null
    googleId?: string | null
    appleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    photos?: UserPhotoUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPhotoAnalysesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPhotoAnalysesInput, UserUncheckedCreateWithoutPhotoAnalysesInput>
  }

  export type UserUpsertWithoutPhotoAnalysesInput = {
    update: XOR<UserUpdateWithoutPhotoAnalysesInput, UserUncheckedUpdateWithoutPhotoAnalysesInput>
    create: XOR<UserCreateWithoutPhotoAnalysesInput, UserUncheckedCreateWithoutPhotoAnalysesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPhotoAnalysesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPhotoAnalysesInput, UserUncheckedUpdateWithoutPhotoAnalysesInput>
  }

  export type UserUpdateWithoutPhotoAnalysesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    photos?: UserPhotoUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPhotoAnalysesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    photos?: UserPhotoUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserPhotoCreateManyUserInput = {
    id?: string
    url: string
    type: $Enums.PhotoType
    isActive?: boolean
    publicId: string
    createdAt?: Date | string
  }

  export type UserPreferenceCreateManyUserInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavoriteCreateManyUserInput = {
    id?: string
    productId: string
    name: string
    brand: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    createdAt?: Date | string
  }

  export type FeedbackCreateManyUserInput = {
    id?: string
    suggestionId?: string | null
    rating: number
    liked: boolean
    comment?: string | null
    createdAt?: Date | string
  }

  export type PhotoAnalysisCreateManyUserInput = {
    id?: string
    photoUrl: string
    analysisType: $Enums.AnalysisType
    detectedValue?: string | null
    confidence?: number | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type UserPhotoUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    publicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPhotoUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    publicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPhotoUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumPhotoTypeFieldUpdateOperationsInput | $Enums.PhotoType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    publicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suggestion?: StyleSuggestionUpdateOneWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    suggestionId?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    suggestionId?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoAnalysisUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    analysisType?: EnumAnalysisTypeFieldUpdateOperationsInput | $Enums.AnalysisType
    detectedValue?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoAnalysisUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    analysisType?: EnumAnalysisTypeFieldUpdateOperationsInput | $Enums.AnalysisType
    detectedValue?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoAnalysisUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    analysisType?: EnumAnalysisTypeFieldUpdateOperationsInput | $Enums.AnalysisType
    detectedValue?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductRecommendationCreateManySuggestionInput = {
    id?: string
    productId: string
    name: string
    brand: string
    price: number
    currency?: string
    imageUrl: string
    productUrl: string
    platform: $Enums.Platform
    category: $Enums.ProductCategory
    rating?: number | null
    reviewCount?: number | null
    inStock?: boolean
    createdAt?: Date | string
  }

  export type FeedbackCreateManySuggestionInput = {
    id?: string
    userId: string
    rating: number
    liked: boolean
    comment?: string | null
    createdAt?: Date | string
  }

  export type ProductRecommendationUpdateWithoutSuggestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    reviewCount?: NullableIntFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductRecommendationUncheckedUpdateWithoutSuggestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    reviewCount?: NullableIntFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductRecommendationUncheckedUpdateManyWithoutSuggestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    reviewCount?: NullableIntFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUpdateWithoutSuggestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutSuggestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutSuggestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    liked?: BoolFieldUpdateOperationsInput | boolean
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendProductCreateManyTrendInput = {
    id?: string
    productId: string
    name: string
    brand: string
    price: number
    originalPrice?: number | null
    currency?: string
    imageUrl: string
    productUrl: string
    category: $Enums.ProductCategory
    rating?: number | null
    inStock?: boolean
    featured?: boolean
    createdAt?: Date | string
  }

  export type TrendProductUpdateWithoutTrendInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    originalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendProductUncheckedUpdateWithoutTrendInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    originalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendProductUncheckedUpdateManyWithoutTrendInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    originalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StyleSuggestionCountOutputTypeDefaultArgs instead
     */
    export type StyleSuggestionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StyleSuggestionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeasonalTrendCountOutputTypeDefaultArgs instead
     */
    export type SeasonalTrendCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeasonalTrendCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserProfileDefaultArgs instead
     */
    export type UserProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPhotoDefaultArgs instead
     */
    export type UserPhotoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPhotoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StyleSuggestionDefaultArgs instead
     */
    export type StyleSuggestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StyleSuggestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductRecommendationDefaultArgs instead
     */
    export type ProductRecommendationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductRecommendationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoriteDefaultArgs instead
     */
    export type FavoriteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavoriteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackDefaultArgs instead
     */
    export type FeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPreferenceDefaultArgs instead
     */
    export type UserPreferenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPreferenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeasonalTrendDefaultArgs instead
     */
    export type SeasonalTrendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeasonalTrendDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrendProductDefaultArgs instead
     */
    export type TrendProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrendProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PhotoAnalysisDefaultArgs instead
     */
    export type PhotoAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PhotoAnalysisDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}