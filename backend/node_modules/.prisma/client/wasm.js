
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  avatar: 'avatar',
  googleId: 'googleId',
  appleId: 'appleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gender: 'gender',
  height: 'height',
  weight: 'weight',
  bodyType: 'bodyType',
  faceShape: 'faceShape',
  skinTone: 'skinTone',
  styleType: 'styleType',
  budgetRange: 'budgetRange',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPhotoScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  url: 'url',
  type: 'type',
  isActive: 'isActive',
  publicId: 'publicId',
  createdAt: 'createdAt'
};

exports.Prisma.StyleSuggestionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  occasion: 'occasion',
  bodyType: 'bodyType',
  faceShape: 'faceShape',
  skinTone: 'skinTone',
  outfitDesc: 'outfitDesc',
  hairstyle: 'hairstyle',
  accessories: 'accessories',
  skincare: 'skincare',
  colors: 'colors',
  outfitImageUrl: 'outfitImageUrl',
  styleImageUrl: 'styleImageUrl',
  confidence: 'confidence',
  createdAt: 'createdAt'
};

exports.Prisma.ProductRecommendationScalarFieldEnum = {
  id: 'id',
  suggestionId: 'suggestionId',
  productId: 'productId',
  name: 'name',
  brand: 'brand',
  price: 'price',
  currency: 'currency',
  imageUrl: 'imageUrl',
  productUrl: 'productUrl',
  platform: 'platform',
  category: 'category',
  rating: 'rating',
  reviewCount: 'reviewCount',
  inStock: 'inStock',
  createdAt: 'createdAt'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  name: 'name',
  brand: 'brand',
  imageUrl: 'imageUrl',
  productUrl: 'productUrl',
  platform: 'platform',
  createdAt: 'createdAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  suggestionId: 'suggestionId',
  rating: 'rating',
  liked: 'liked',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeasonalTrendScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  season: 'season',
  popularity: 'popularity',
  imageUrl: 'imageUrl',
  colors: 'colors',
  keyPieces: 'keyPieces',
  tags: 'tags',
  isActive: 'isActive',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrendProductScalarFieldEnum = {
  id: 'id',
  trendId: 'trendId',
  productId: 'productId',
  name: 'name',
  brand: 'brand',
  price: 'price',
  originalPrice: 'originalPrice',
  currency: 'currency',
  imageUrl: 'imageUrl',
  productUrl: 'productUrl',
  category: 'category',
  rating: 'rating',
  inStock: 'inStock',
  featured: 'featured',
  createdAt: 'createdAt'
};

exports.Prisma.PhotoAnalysisScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  photoUrl: 'photoUrl',
  analysisType: 'analysisType',
  detectedValue: 'detectedValue',
  confidence: 'confidence',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  NON_BINARY: 'NON_BINARY',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.BodyType = exports.$Enums.BodyType = {
  ECTOMORPH: 'ECTOMORPH',
  MESOMORPH: 'MESOMORPH',
  ENDOMORPH: 'ENDOMORPH',
  PEAR: 'PEAR',
  APPLE: 'APPLE',
  HOURGLASS: 'HOURGLASS',
  RECTANGLE: 'RECTANGLE',
  INVERTED_TRIANGLE: 'INVERTED_TRIANGLE'
};

exports.FaceShape = exports.$Enums.FaceShape = {
  OVAL: 'OVAL',
  ROUND: 'ROUND',
  SQUARE: 'SQUARE',
  HEART: 'HEART',
  DIAMOND: 'DIAMOND',
  OBLONG: 'OBLONG'
};

exports.SkinTone = exports.$Enums.SkinTone = {
  VERY_FAIR: 'VERY_FAIR',
  FAIR: 'FAIR',
  LIGHT: 'LIGHT',
  MEDIUM: 'MEDIUM',
  OLIVE: 'OLIVE',
  TAN: 'TAN',
  DARK: 'DARK',
  VERY_DARK: 'VERY_DARK'
};

exports.BudgetRange = exports.$Enums.BudgetRange = {
  BUDGET_FRIENDLY: 'BUDGET_FRIENDLY',
  MID_RANGE: 'MID_RANGE',
  PREMIUM: 'PREMIUM',
  LUXURY: 'LUXURY'
};

exports.StyleType = exports.$Enums.StyleType = {
  CASUAL: 'CASUAL',
  FORMAL: 'FORMAL',
  BUSINESS: 'BUSINESS',
  TRENDY: 'TRENDY',
  CLASSIC: 'CLASSIC',
  BOHEMIAN: 'BOHEMIAN',
  MINIMALIST: 'MINIMALIST',
  SPORTY: 'SPORTY',
  VINTAGE: 'VINTAGE',
  EDGY: 'EDGY'
};

exports.PhotoType = exports.$Enums.PhotoType = {
  FACE: 'FACE',
  FULL_BODY: 'FULL_BODY',
  OUTFIT: 'OUTFIT'
};

exports.Occasion = exports.$Enums.Occasion = {
  CASUAL: 'CASUAL',
  OFFICE: 'OFFICE',
  DATE: 'DATE',
  WEDDING: 'WEDDING',
  PARTY: 'PARTY',
  FORMAL_EVENT: 'FORMAL_EVENT',
  VACATION: 'VACATION',
  WORKOUT: 'WORKOUT',
  INTERVIEW: 'INTERVIEW'
};

exports.Platform = exports.$Enums.Platform = {
  MYNTRA: 'MYNTRA',
  AMAZON: 'AMAZON',
  HM: 'HM',
  AJIO: 'AJIO',
  NYKAA: 'NYKAA'
};

exports.ProductCategory = exports.$Enums.ProductCategory = {
  CLOTHING: 'CLOTHING',
  FOOTWEAR: 'FOOTWEAR',
  ACCESSORIES: 'ACCESSORIES',
  SKINCARE: 'SKINCARE',
  HAIRCARE: 'HAIRCARE',
  MAKEUP: 'MAKEUP'
};

exports.AnalysisType = exports.$Enums.AnalysisType = {
  BODY_TYPE: 'BODY_TYPE',
  FACE_SHAPE: 'FACE_SHAPE',
  SKIN_TONE: 'SKIN_TONE',
  FULL_ANALYSIS: 'FULL_ANALYSIS'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  UserPhoto: 'UserPhoto',
  StyleSuggestion: 'StyleSuggestion',
  ProductRecommendation: 'ProductRecommendation',
  Favorite: 'Favorite',
  Feedback: 'Feedback',
  UserPreference: 'UserPreference',
  SeasonalTrend: 'SeasonalTrend',
  TrendProduct: 'TrendProduct',
  PhotoAnalysis: 'PhotoAnalysis'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
